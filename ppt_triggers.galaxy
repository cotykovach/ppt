//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Planet Protoss Tribes Beta
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
fixed gv_version;
bool gv_daytime;
int gv_scoreboardscreen;
int gv_hidescoreboardbox;
int gv_numberofplayers;
int gv_numberofteams;
bool[13] gv_activeteams;
int gv_minimizescoreboard;
int[21] gv_teams;
int[21] gv_playernames;
int[21] gv_playerKD;
int[21] gv_playerstatus;
playergroup gv_scoreboardhidden;
int[13] gv_kills;
int[13] gv_deaths;
playergroup gv_p1;
playergroup gv_p2;
playergroup gv_p3;
playergroup gv_p4;
playergroup gv_p5;
playergroup gv_p6;
playergroup gv_p7;
playergroup gv_p8;
playergroup gv_p9;
playergroup gv_p10;
playergroup gv_p11;
playergroup gv_p12;
playergroup gv_remainingTeams;
playergroup gv_victorious;
int[16] gv_currentheroselectionimage;
int[16] gv_currentheroselectionlabel;
int gv_currentheroplayername;
int[16] gv_currentheroplayermmr;
int[13] gv_heroPickDialog;
int[23] gv_foragerInfo;
int[23] gv_warriorInfo;
int[23] gv_beastHunterInfo;
int[23] gv_templarInfo;
int[23] gv_thiefInfo;
int[23] gv_techieInfo;
int[23] gv_voidmancerInfo;
int[7] gv_dialogportrait;
int gv_basicModeVotes;
int gv_standardModeVotes;
int gv_advancedModeVotes;
int gv_hardcoreModeVotes;
int[13] gv_currentVote;
int gv_victoryEnabled;
int gv_airShipsEnabled;
int gv_acceleratedMode;
bool gv_acceleratedModeEnabled;
int gv_victoryEnabledCheckbox;
int gv_victoryVoteTotal;
int gv_airShipsEnabledCheckbox;
int gv_airShipsVoteTotal;
int gv_acceleratedModeEnabledCheckbox;
int gv_acceleratedModeTotal;
int[6] gv_modeCheckboxes;
int[6] gv_modeCheckboxTotal;
int gv_menu;
int gv_selectModeMenu;
int gv_choose;
int[8] gv_heroChoice;
int[6] gv_info;
string[16] gv_heroTypeSelection;
playergroup gv_noHero;
playergroup gv_selectedHero;
int gv_selectedPlayer;
timer gv_selectionTimer;
int gv_selectionTimerWindow;
region[54] gv_fishPools;
fixed gv_basicItemSpawnTime;
fixed gv_standardItemSpawnTime;
fixed gv_advancedItemSpawnTime;
fixed gv_hardcoreItemSpawnTime;
int gv_voidTime;
fixed gv_noobTimeDuration;
timer gv_noobTime;
int gv_noobTimerWindow;
timer[13] gv_noobResurrectionTimer;
int[13] gv_noobResurrectionTimerWindow;
playergroup gv_playerTips;
region gv_tradeShipShareableRegion;
region[31] gv_tradeShipRoute1Path;
unitgroup gv_tradeShipsRoute1;
int[4] gv_tradeShipRoute1PathID;
int[4] gv_tradeShipRoute2PathID;
region[31] gv_tradeShipRoute2Path;
unitgroup gv_tradeShipsRoute2;
bool gv_victoryBoolean;
unitgroup gv_energywarned;
unitgroup gv_healthwarned;
playergroup gv_heatwarned;
unitgroup gv_shipwreck;
point[1000] gv_boatorigin;
unitgroup gv_boats;
revealer gv_cheatReveal;
int[16] gv_maxHeat;
unit[16] gv_bonecarrier;
int gv_triggeringunit;
unit[13] gv_hero;
unit[14] gv_master;
unit[14] gv_beast;
bool[14] gv_subclassingBeastHunter;
string[13] gv_selectedSubClassGlobal;
unit[13] gv_ancientFusionCaster;
unit[13] gv_ancientFusionTarget;
unit[13] gv_assassin;
unit[13] gv_bountyTarget;
unit[13] gv_bountyTarget2;
unit[13] gv_decimationUnit;
fixed gv_globalheight;
fixed gv_transmutetime;
int[13] gv_rawMeatCounter;
int[13] gv_empowerStr;
int[13] gv_empowerAgi;
int[13] gv_empowerInt;
int[13] gv_empowerMagic;
int[13] gv_empowerFortitude;
int[13] gv_giftofAiur;
int[13] gv_giftofXelNaga;
bool[13] gv_deadHero;
bool[13] gv_currentlyRessurectingHero;
unitgroup gv_voidTowerInUse;
int[13] gv_heroLevel;
fixed gv_craftingTime;

void InitGlobals () {
    int init_i;

    gv_version = 2.23;
    gv_daytime = true;
    gv_scoreboardscreen = c_invalidDialogId;
    gv_hidescoreboardbox = c_invalidDialogId;
    gv_minimizescoreboard = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_teams[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_playernames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_playerKD[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_playerstatus[init_i] = c_invalidDialogControlId;
    }
    gv_scoreboardhidden = PlayerGroupEmpty();
    gv_p1 = PlayerGroupEmpty();
    gv_p2 = PlayerGroupEmpty();
    gv_p3 = PlayerGroupEmpty();
    gv_p4 = PlayerGroupEmpty();
    gv_p5 = PlayerGroupEmpty();
    gv_p6 = PlayerGroupEmpty();
    gv_p7 = PlayerGroupEmpty();
    gv_p8 = PlayerGroupEmpty();
    gv_p9 = PlayerGroupEmpty();
    gv_p10 = PlayerGroupEmpty();
    gv_p11 = PlayerGroupEmpty();
    gv_p12 = PlayerGroupEmpty();
    gv_remainingTeams = PlayerGroupEmpty();
    gv_victorious = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_currentheroselectionimage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_currentheroselectionlabel[init_i] = c_invalidDialogControlId;
    }
    gv_currentheroplayername = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_currentheroplayermmr[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroPickDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_foragerInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_warriorInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_beastHunterInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_templarInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_thiefInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_techieInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 22; init_i += 1) {
        gv_voidmancerInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_dialogportrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_currentVote[init_i] = 1;
    }
    gv_victoryEnabledCheckbox = c_invalidDialogControlId;
    gv_victoryVoteTotal = c_invalidDialogControlId;
    gv_airShipsEnabledCheckbox = c_invalidDialogControlId;
    gv_airShipsVoteTotal = c_invalidDialogControlId;
    gv_acceleratedModeEnabledCheckbox = c_invalidDialogControlId;
    gv_acceleratedModeTotal = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_modeCheckboxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_modeCheckboxTotal[init_i] = c_invalidDialogControlId;
    }
    gv_menu = c_invalidDialogId;
    gv_selectModeMenu = c_invalidDialogId;
    gv_choose = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_heroChoice[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_info[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_heroTypeSelection[init_i] = "Probe";
    }
    gv_noHero = PlayerGroupEmpty();
    gv_selectedHero = PlayerGroupEmpty();
    gv_selectionTimer = TimerCreate();
    gv_selectionTimerWindow = c_timerWindowNone;
    gv_basicItemSpawnTime = 20.0;
    gv_standardItemSpawnTime = 35.0;
    gv_advancedItemSpawnTime = 55.0;
    gv_hardcoreItemSpawnTime = 75.0;
    gv_voidTime = c_invalidDialogId;
    gv_noobTimeDuration = 600.0;
    gv_noobTime = TimerCreate();
    gv_noobTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_noobResurrectionTimer[init_i] = TimerCreate();
    }
    gv_playerTips = PlayerGroupEmpty();
    gv_tradeShipsRoute1 = UnitGroupEmpty();
    gv_tradeShipsRoute2 = UnitGroupEmpty();
    gv_energywarned = UnitGroupEmpty();
    gv_healthwarned = UnitGroupEmpty();
    gv_heatwarned = PlayerGroupEmpty();
    gv_shipwreck = UnitGroupEmpty();
    gv_boats = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_maxHeat[init_i] = 100;
    }
    gv_transmutetime = 0.3;
    gv_voidTowerInUse = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroLevel[init_i] = 1;
    }
    gv_craftingTime = 0.15;
}

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_DayNightCycle;
trigger gt_CreateScoreboard;
trigger gt_ScoreboardHideShow;
trigger gt_GameValues;
trigger gt_PlayerLeaves;
trigger gt_LoseCheck;
trigger gt_VictoryCheck;
trigger gt_CreateAllMenus;
trigger gt_SelectHeroDialogs;
trigger gt_VoteBasicMode;
trigger gt_VoteStandardMode;
trigger gt_VoteAdvancedMode;
trigger gt_VoteHardcoreMode;
trigger gt_VictoryEnabled;
trigger gt_VictoryDisabled;
trigger gt_AirShipsEnabled;
trigger gt_AirShipsDisabled;
trigger gt_AcceleratedModeEnabled;
trigger gt_AcceleratedModeDisabled;
trigger gt_SpawnFish;
trigger gt_BasicInitialItemsBeasts;
trigger gt_StandardInitialItemsBeasts;
trigger gt_HardcoreInitialItemsBeasts;
trigger gt_StandardBeastSpawn;
trigger gt_AdvanceBeastSpawn;
trigger gt_HardcoreBeastSpawn;
trigger gt_BasicItemSpawn;
trigger gt_StandardItemSpawn;
trigger gt_AdvancedItemSpawn;
trigger gt_HardcoreItemSpawn;
trigger gt_BasicKarak;
trigger gt_AdvancedKarak;
trigger gt_HardcoreKarak;
trigger gt_NeutralCatcherSouthwest;
trigger gt_NeutralCatcherNorthwest;
trigger gt_NeutralCatcherSoutheast;
trigger gt_NoobTime;
trigger gt_NoobDeath;
trigger gt_NoobResurrectionTime;
trigger gt_EndNoobTIme;
trigger gt_Tips;
trigger gt_TreeMorph1;
trigger gt_TreeMorph2;
trigger gt_GenerateBaseHerbs;
trigger gt_GenerateSpecialHerbs;
trigger gt_TradeShipStop2;
trigger gt_TradeShipStop;
trigger gt_MoveTradeShips;
trigger gt_SetTradeShips;
trigger gt_EndSelectTime;
trigger gt_ForceEndSelectTime;
trigger gt_RunSelectHero;
trigger gt_ChooseForager;
trigger gt_ChooseWarrior;
trigger gt_ChooseThief;
trigger gt_ChooseTemplar;
trigger gt_ChooseBeastHunter;
trigger gt_ChooseTechie;
trigger gt_ChooseVoidmancer;
trigger gt_FallBackHideInfo;
trigger gt_HungerWarning;
trigger gt_HungerWarning2;
trigger gt_VespeneWarning;
trigger gt_VespeneWarning2;
trigger gt_VespeneWarning3;
trigger gt_EnergyWarning;
trigger gt_EnergyWarning2;
trigger gt_EnergyWarning3;
trigger gt_HealthWarning;
trigger gt_HealthWarning2;
trigger gt_HealthWarning3;
trigger gt_UltraliskAttackedWarning;
trigger gt_AirShipsBehavior;
trigger gt_NewCargoShip;
trigger gt_TransportShipDeath;
trigger gt_CheckCargoTile;
trigger gt_Hypothermia;
trigger gt_Starvation;
trigger gt_Insomnia;
trigger gt_SlainDeath;
trigger gt_MaxHunger;
trigger gt_ApplyHungerDepleteTerrazine;
trigger gt_AddtoHeatCap;
trigger gt_SubtractfromHeatCap;
trigger gt_HeatCap;
trigger gt_COATHEATREDUCTION;
trigger gt_GLOVESBOOTSHEATREDUCTION;
trigger gt_MaxHeat;
trigger gt_ApplyColdDepleteVespene;
trigger gt_AdvanceApplyColdDepleteVespene;
trigger gt_HardcoreApplyColdDepleteVespene;
trigger gt_Evade;
trigger gt_Block;
trigger gt_Boom;
trigger gt_PostStunHostility;
trigger gt_UltraliskRevive;
trigger gt_Repair;
trigger gt_ReinforceMax;
trigger gt_OffspringSpawn;
trigger gt_SetMasterandBeast;
trigger gt_TamedBeastEXP;
trigger gt_Evolve;
trigger gt_BeastTurn;
trigger gt_CriticalLyote;
trigger gt_ScanMineral;
trigger gt_ScanEmberthorn;
trigger gt_ScanBanelingDust;
trigger gt_ScanRelic;
trigger gt_ScanBone;
trigger gt_ScanStone;
trigger gt_ScanCookedMeat;
trigger gt_ScanVoidCrystal;
trigger gt_ScanHide;
trigger gt_ThiefsCloak;
trigger gt_CunningDisplay;
trigger gt_Dragoon;
trigger gt_ChosenElder;
trigger gt_Cyborg;
trigger gt_MechaAnnihilator;
trigger gt_SacredOne;
trigger gt_Seeker;
trigger gt_TrueForm;
trigger gt_TeleGatherer;
trigger gt_Assassin;
trigger gt_Trickster;
trigger gt_AiurChampion;
trigger gt_Ancient;
trigger gt_Deathsayer;
trigger gt_HeraldofDoom;
trigger gt_SubSpawn;
trigger gt_WhirlingAxe1Offensive;
trigger gt_WhirlingAxe2Offensive;
trigger gt_WhirlingAxe3Offensive;
trigger gt_ChallengeBattle;
trigger gt_ChallengeBattle2;
trigger gt_EpochFist;
trigger gt_AncientsCall1;
trigger gt_AncientsCall2;
trigger gt_AncientFusionSet;
trigger gt_AncientFusionIncomingDamage;
trigger gt_AssassinsTouch;
trigger gt_StealthStrike;
trigger gt_SmokeCloud;
trigger gt_SmokeCloud2;
trigger gt_MarkforBounty;
trigger gt_MarkforBounty2;
trigger gt_MarkforBountyRemoveRank1;
trigger gt_MarkforBountyRemoveRank2;
trigger gt_Cleanse;
trigger gt_LightofAiur1;
trigger gt_LightofAiur2;
trigger gt_LightofAiur3;
trigger gt_StoppedCastingVoid;
trigger gt_StartcastingVoid1;
trigger gt_StartcastingVoid2;
trigger gt_AwakenfromVoid1;
trigger gt_AwakenfromVoid2;
trigger gt_StaticGraviBomb;
trigger gt_StaticGraviBombTimedLife;
trigger gt_StaticGraviBombTimedLife2;
trigger gt_CyberneticCannon;
trigger gt_CyberneticUpload;
trigger gt_EMPBlastReductionCybernetic;
trigger gt_SystemShockwaveReduction1Cybernetic;
trigger gt_SystemShockwaveReduction2Cybernetic;
trigger gt_DeactivateReductionCybernetic;
trigger gt_Deactivate2ReductionCybernetic;
trigger gt_TinkeredMax;
trigger gt_ChaoticBlast1;
trigger gt_ChaoticBlast2;
trigger gt_ChaoticBlast3;
trigger gt_Decimation1;
trigger gt_Decimation2;
trigger gt_Decimation3;
trigger gt_DrainEnergy;
trigger gt_WaveofDeath1;
trigger gt_WaveofDeath2;
trigger gt_AbsorbLife1;
trigger gt_AbsorbLife2;
trigger gt_MarkofDeath1;
trigger gt_MarkofDeath2;
trigger gt_TurretBuff;
trigger gt_Snipe1;
trigger gt_Snipe2;
trigger gt_Snipe3;
trigger gt_VoidLegionZergling;
trigger gt_VoidLegionRoach;
trigger gt_MechaThrusters;
trigger gt_MechaThrusters2;
trigger gt_SelfDestruct5;
trigger gt_SelfDestruct4;
trigger gt_SelfDestruct3;
trigger gt_SelfDestruct2;
trigger gt_SelfDestruct1;
trigger gt_SelfDestructPostEffects;
trigger gt_SelfDestructDamage1;
trigger gt_SelfDestructDamage2;
trigger gt_UnstableEnergy1;
trigger gt_UnstableEnergy2;
trigger gt_PurgeAlly;
trigger gt_PurgeEnemy;
trigger gt_ScanHostileProtoss;
trigger gt_ScanHostileStructure;
trigger gt_ScanHostileQuilgor;
trigger gt_ScanHostileLyote;
trigger gt_ScanHostileSpinean;
trigger gt_ScanHostilePanthor;
trigger gt_ScanHostileTransportShip;
trigger gt_Replace;
trigger gt_VengeanceBuff;
trigger gt_SeekandDestroy;
trigger gt_Lunge;
trigger gt_LungeOff;
trigger gt_KineticGrasp;
trigger gt_TransmuteMaterial;
trigger gt_TransmuteHerb;
trigger gt_TransmuteLesserPotion;
trigger gt_TransmuteIngot;
trigger gt_TransmuteArcana;
trigger gt_TransmuteGold;
trigger gt_TransmuteGreaterPotion;
trigger gt_TransmuteDarkMatter;
trigger gt_TransmuteCorruption;
trigger gt_RemoveTeleGather;
trigger gt_TeleGather;
trigger gt_PsyForagerBeacon;
trigger gt_ReplaceSpecialBuilding;
trigger gt_ImportItemsnew;
trigger gt_ExportItemsnew;
trigger gt_ExportItemsToTradingPost;
trigger gt_SummonedIllusionLevel;
trigger gt_TrickstersVeil;
trigger gt_IllusiveBlink;
trigger gt_IllusiveIllusionSet;
trigger gt_IllusionBehaviors;
trigger gt_ShadowAssaultSpawn;
trigger gt_VenomousBite;
trigger gt_PreyAcquire;
trigger gt_PreyVenomBite;
trigger gt_PreyRegularAttack;
trigger gt_VoidSpawn;
trigger gt_RawMeatHeroDeath;
trigger gt_RawMeatCarry;
trigger gt_HarvestRawMeat;
trigger gt_DropRawMeat;
trigger gt_ConsumeRawMeat;
trigger gt_TricksterDeath;
trigger gt_CorruptionItemScatter;
trigger gt_CorruptedGround;
trigger gt_ExpNo1ItemScatter;
trigger gt_DropPodArea;
trigger gt_DropPodSpawn;
trigger gt_DropPodDeath;
trigger gt_UltraliskPoisoned;
trigger gt_UltraliskItemScatter;
trigger gt_UltraliskResetPosition;
trigger gt_UltraliskFacingReset;
trigger gt_UltraliskFacingResetKite;
trigger gt_BoneMeleeResponse;
trigger gt_BoneRangeResponse;
trigger gt_BoneArmor;
trigger gt_ThrowSpearRockAnimate;
trigger gt_KarakHideScrap;
trigger gt_CookedMeat;
trigger gt_DiseasedMeat;
trigger gt_Emberthorn;
trigger gt_Potions;
trigger gt_MutalingEgg;
trigger gt_ItemSpawnScatter;
trigger gt_Bloodsoul;
trigger gt_ShardofCorruption;
trigger gt_DarkShadowBeastDeath;
trigger gt_GatherHerbs;
trigger gt_PawnItem;
trigger gt_TargetStructureInventoryFull;
trigger gt_PouchMovement;
trigger gt_ItemLimitations;
trigger gt_ItemStacking;
trigger gt_ItemintoNeutral;
trigger gt_Magic;
trigger gt_RemoveShadowFromGame;
trigger gt_PotionofDiseaseTarget;
trigger gt_BagofHorrors;
trigger gt_KaiserBlade;
trigger gt_StaffofEternalFlame;
trigger gt_VisionoftheIsles;
trigger gt_HerosSkullReplace;
trigger gt_Nest;
trigger gt_CureAll;
trigger gt_ConsumeHeartoftheUltralisk;
trigger gt_Sonar;
trigger gt_VoidArtifact;
trigger gt_FireStoneDeath;
trigger gt_PODDeath;
trigger gt_MageFireStoneDeath;
trigger gt_NexusWarp;
trigger gt_UpgradeNexus;
trigger gt_Warp;
trigger gt_QuickWarp;
trigger gt_UpgradeWarpPad;
trigger gt_UpgradeWarpPad2;
trigger gt_UpgradeWarpPad3;
trigger gt_UpgradePhotonCannon;
trigger gt_UpgradePhotonCannon2;
trigger gt_UpgradePhotonCannon3;
trigger gt_EMPBlastReduction;
trigger gt_SystemShockwaveReduction1;
trigger gt_SystemShockwaveReduction2;
trigger gt_DeactivateReduction;
trigger gt_Deactivate2Reduction;
trigger gt_MindControlReduction;
trigger gt_MindControl2Reduction;
trigger gt_MasterCrafter;
trigger gt_CookMeat;
trigger gt_EmpowerStrength;
trigger gt_EmpowerAgility;
trigger gt_EmpowerIntellect;
trigger gt_EmpowerMagic;
trigger gt_EmpowerFortitude;
trigger gt_GiftofAiur;
trigger gt_GiftofXelNaga;
trigger gt_HeroPostNoobDeath;
trigger gt_HeroPostNoobDeathHardcore;
trigger gt_LevelGain;
trigger gt_VoidTowerDeath;
trigger gt_VoidTowerBuilt;
trigger gt_VoidTowerComplete;
trigger gt_CraftItemsButtons;
trigger gt_VoidTrap;
trigger gt_BaneIgnotRecipe;
trigger gt_AiurIgnotRecipe;
trigger gt_StormBlade;
trigger gt_DustyBlade;
trigger gt_SeersDagger;
trigger gt_SeersBaneDagger;
trigger gt_SeersAiurDagger;
trigger gt_StoneBlade;
trigger gt_BaneBlade;
trigger gt_AiurBlade;
trigger gt_Spear;
trigger gt_Shield;
trigger gt_BaneShield;
trigger gt_AiurShield;
trigger gt_ShieldoftheVoid;
trigger gt_CraftCorrupted;
trigger gt_CorruptedArmor;
trigger gt_CorruptedWeapon;
trigger gt_CorruptedBoots;
trigger gt_CorruptedGloves;
trigger gt_CorruptedBag;
trigger gt_GlovesofInsanity;
trigger gt_PhaseCoat;
trigger gt_HydroBoots;
trigger gt_AiurBoots;
trigger gt_AiurGloves;
trigger gt_AiurCoat;
trigger gt_BaneBoots;
trigger gt_BaneCoat;
trigger gt_BaneGloves;
trigger gt_KarakSkinBoots;
trigger gt_KarakSkinGloves;
trigger gt_KarakSkinCoat;
trigger gt_UrsadakSkinCoat;
trigger gt_UrsadakSkinGloves;
trigger gt_UrsadakSkinBoots;
trigger gt_LyoteSkinCoat;
trigger gt_LyoteSkinBoots;
trigger gt_LyoteSkinGloves;
trigger gt_BoneGloves;
trigger gt_BoneCoat;
trigger gt_BoneBoots;
trigger gt_BoneShield;
trigger gt_MultiDimensionalPouch;
trigger gt_TransportShip;
trigger gt_PrivateShuttle;
trigger gt_ZerglingNest;
trigger gt_WarpPad;
trigger gt_VespeneFuel;
trigger gt_EMP;
trigger gt_SonarCompass;
trigger gt_VoidCapsule;
trigger gt_VoidMechanism;
trigger gt_Combine;
trigger gt_FusePotionofDisease;
trigger gt_FuseEnergyStimI;
trigger gt_FuseEnergyStimII;
trigger gt_FuseEnergyStimIII;
trigger gt_FuseREALVISION;
trigger gt_FuseAnabolicPotion;
trigger gt_FusePotionofKnowledge;
trigger gt_FuseHealingStimI;
trigger gt_FuseHealingStimII;
trigger gt_FuseHealingStimIII;
trigger gt_FuseCureAll;
trigger gt_FuseSpiritOfWind;
trigger gt_FuseSpiritOfWater;
trigger gt_Warpstone;
trigger gt_EncryptionSearingBolt;
trigger gt_EncryptionAncientArmor;
trigger gt_EncryptionBlink;
trigger gt_EncryptionPsiShield;
trigger gt_EncryptionCyclonicGrasp;
trigger gt_EncryptionEnergyDisruptionFIX;
trigger gt_Poison;
trigger gt_BoneNecklace;
trigger gt_UltraPoison;
trigger gt_PoisonSpear;
trigger gt_RefinedPoisonSpear;
trigger gt_UltraPoisonSpear;
trigger gt_MageFire;
trigger gt_MagicSeed;
trigger gt_ImbuedRelic;
trigger gt_VoidTower;
trigger gt_CraftVoidArtifact;

//--------------------------------------------------------------------------------------------------
// Trigger: Day Night Cycle
//--------------------------------------------------------------------------------------------------
bool gt_DayNightCycle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_daytime == true)) {
        GameSetLighting("KorhalNight", 0.0);
        GameTimeOfDaySet("00");
        gv_daytime = false;
    }
    else {
        GameSetLighting("Korhal", 0.0);
        GameTimeOfDaySet("12:00:00");
        gv_daytime = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DayNightCycle_Init () {
    gt_DayNightCycle = TriggerCreate("gt_DayNightCycle_Func");
    TriggerAddEventTimePeriodic(gt_DayNightCycle, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Scoreboard
//--------------------------------------------------------------------------------------------------
bool gt_CreateScoreboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_height;
    bool lv_counted;
    int lv_tEAMCOUNT;

    // Variable Initialization
    lv_height = 100;
    lv_tEAMCOUNT = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_numberofplayers = (PlayerGroupCount(PlayerGroupActive()) + 0);
    DialogCreate(600, 750, c_anchorTopRight, 0, 0, true);
    gv_hidescoreboardbox = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_hidescoreboardbox, 32, 32, c_anchorTop, 250, 75, StringExternal("Param/Value/4C070D3A"), StringExternal("Param/Value/B672F89B"), "");
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_minimizescoreboard = DialogControlLastCreated();
    DialogCreate(600, 600, c_anchorTopRight, 0, 0, true);
    gv_scoreboardscreen = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, 75, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_playernames[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, 75, StringExternal("Param/Value/F3A4441E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_playerKD[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, 75, StringExternal("Param/Value/09E28222"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_playerstatus[0] = DialogControlLastCreated();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            lv_counted = true;
            gv_activeteams[1] = true;
            gv_numberofteams += 1;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[2] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(3));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[3] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(4));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[4] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(5));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[5] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(6));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[6] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(7));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[7] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(8));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[8] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(9));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[9] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(10));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[10] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(11));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[11] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(12));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_counted == false)) {
            gv_numberofteams += 1;
            gv_activeteams[12] = true;
            lv_counted = true;
        }

    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[1] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/5F0ACC94"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/09545D2D"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/76F3A823"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/6803AAD5"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/15937373"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[2] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/3D87A789"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/5F95BC22"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/724EAB53"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/50B4AEE1"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/CC14B950"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(3));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[3] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/66735952"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/A87FA008"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/573185C9"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/131134AE"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/D80F1DB3"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(4));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[4] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/7BE9E85F"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/2A4C8C6A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/43A8F6AB"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/9A525E25"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/144F9FCE"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(5));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[5] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/DCF96D7F"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/3DEE91FD"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/D213FE8C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/17EE0F66"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/B0017E2E"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(6));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[6] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/C12BCCBB"), Color(100.00, 100.00, 100.00), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/4C02C892"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/84504066"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/04A1D9F6"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/54D37AF4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(7));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[7] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/36765B18"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/C1804B6F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/A6E60EC4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/E9F8363F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/0D42EE47"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(8));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[8] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/079B306D"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/1956FD62"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/520E4798"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/D7876BB0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/B9E52D47"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(9));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[9] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/404D27A7"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/E3E49873"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/C97BB0FA"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/CB3030E6"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/5FD29B28"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(10));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[10] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/173CF118"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/8DB7936F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/11DECC55"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/CEB5E8F2"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/B6D39896"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(11));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[11] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/700D0C8E"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/90258542"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/2FF9CCCA"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/3C5DB4B3"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/4F61ACBB"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(12));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_activeteams[12] == true) && (lv_counted == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, StringExternal("Param/Value/CEA28204"), Color(100.00, 100.00, 75.69), false, 2.0);
            gv_teams[lv_tEAMCOUNT] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_counted = true;
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/EAFD0E11"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/988C87A2"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
            lv_tEAMCOUNT += 1;
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, -150, lv_height, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playernames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 0, lv_height, StringExternal("Param/Value/81908AA9"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerKD[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_scoreboardscreen, 150, 20, c_anchorTop, 150, lv_height, StringExternal("Param/Value/2F3241B0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
            gv_playerstatus[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_height = (lv_height + 25);
        }
    }
    PlayerGroupLoopEnd();
    lv_counted = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateScoreboard_Init () {
    gt_CreateScoreboard = TriggerCreate("gt_CreateScoreboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scoreboard Hide/Show
//--------------------------------------------------------------------------------------------------
bool gt_ScoreboardHideShow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_minimizescoreboard))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_scoreboardhidden, EventPlayer()) == false)) {
        libNtve_gf_SetDialogItemText(gv_minimizescoreboard, StringExternal("Param/Value/DBB2768A"), PlayerGroupSingle(EventPlayer()));
        PlayerGroupAdd(gv_scoreboardhidden, EventPlayer());
        DialogSetVisible(gv_scoreboardscreen, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        libNtve_gf_SetDialogItemText(gv_minimizescoreboard, StringExternal("Param/Value/F9887B79"), PlayerGroupSingle(EventPlayer()));
        PlayerGroupRemove(gv_scoreboardhidden, EventPlayer());
        DialogSetVisible(gv_scoreboardscreen, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreboardHideShow_Init () {
    gt_ScoreboardHideShow = TriggerCreate("gt_ScoreboardHideShow_Func");
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ScoreboardHideShow, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Values
//--------------------------------------------------------------------------------------------------
bool gt_GameValues_Func (bool testConds, bool runActions) {
    int init_i;

    int autoAF6BB4F0_ae;
    int autoAF6BB4F0_ai;
    playergroup autoA861D6B3_g;
    int autoA861D6B3_p;

    // Variable Declarations
    int lv_fishrandom;
    int lv_counter;
    int lv_player;
    int lv_randomGenerated;
    region[21] lv_spawnArray;
    region[13] lv_heroSpawnPoint;
    playergroup lv_fFAGroup;
    playergroup lv_team1;
    playergroup lv_team2;
    playergroup lv_team3;
    playergroup lv_team4;
    int lv_rANDOMSPAWNCOUNTER;
    int lv_islandRandomizer;
    int[5] lv_chosenIsland;
    int lv_selectedSpawnIsland;
    region[5][13] lv_randomizerRegion;
    point[5] lv_randomizerPoint;
    int lv_minrandom;
    int lv_maxrandom;
    int[4] lv_randomintegers;
    bool[4] lv_islandused;

    // Variable Initialization
    lv_player = 1;
    lv_fFAGroup = PlayerGroupEmpty();
    lv_team1 = PlayerGroupEmpty();
    lv_team2 = PlayerGroupEmpty();
    lv_team3 = PlayerGroupEmpty();
    lv_team4 = PlayerGroupEmpty();
    lv_rANDOMSPAWNCOUNTER = 1;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_chosenIsland[init_i] = 4;
    }
    lv_selectedSpawnIsland = 4;
    lv_maxrandom = 3;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_randomintegers[init_i] = 3;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHots_gf_PlaySoundLinkasMusic(SoundLink("JungleMusic", -1), true, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeTerrazine, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeReferee) && (PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeSpectator)) {
            gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Probe";
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1661), 0.0, -1, 10.0, true);
            PlayerGroupAdd(gv_noHero, PlayerGroupLoopCurrent());
            PlayerGroupAdd(gv_playerTips, PlayerGroupLoopCurrent());
            PlayerGroupAdd(gv_remainingTeams, PlayerGroupLoopCurrent());
            PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
        }

    }
    PlayerGroupLoopEnd();
    GameTimeOfDaySet("00");
    GameSetLighting("Korhal", 0.0);
    GameSetSpeedValue(c_gameSpeedNormal);
    if ((GameAttributeGameValue("1") == "0002")) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGroupCount(gv_p1) == 0)) {
                PlayerGroupAdd(gv_p1, PlayerGroupLoopCurrent());
            }
            else {
                if ((PlayerGroupCount(gv_p2) == 0)) {
                    PlayerGroupAdd(gv_p2, PlayerGroupLoopCurrent());
                }
                else {
                    if ((PlayerGroupCount(gv_p3) == 0)) {
                        PlayerGroupAdd(gv_p3, PlayerGroupLoopCurrent());
                    }

                }
            }
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGroupCount(gv_p4) == 0)) {
                PlayerGroupAdd(gv_p4, PlayerGroupLoopCurrent());
            }
            else {
                if ((PlayerGroupCount(gv_p5) == 0)) {
                    PlayerGroupAdd(gv_p5, PlayerGroupLoopCurrent());
                }
                else {
                    if ((PlayerGroupCount(gv_p6) == 0)) {
                        PlayerGroupAdd(gv_p6, PlayerGroupLoopCurrent());
                    }

                }
            }
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(3));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGroupCount(gv_p7) == 0)) {
                PlayerGroupAdd(gv_p7, PlayerGroupLoopCurrent());
            }
            else {
                if ((PlayerGroupCount(gv_p8) == 0)) {
                    PlayerGroupAdd(gv_p8, PlayerGroupLoopCurrent());
                }
                else {
                    if ((PlayerGroupCount(gv_p9) == 0)) {
                        PlayerGroupAdd(gv_p9, PlayerGroupLoopCurrent());
                    }

                }
            }
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(4));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGroupCount(gv_p10) == 0)) {
                PlayerGroupAdd(gv_p10, PlayerGroupLoopCurrent());
            }
            else {
                if ((PlayerGroupCount(gv_p11) == 0)) {
                    PlayerGroupAdd(gv_p11, PlayerGroupLoopCurrent());
                }
                else {
                    if ((PlayerGroupCount(gv_p12) == 0)) {
                        PlayerGroupAdd(gv_p12, PlayerGroupLoopCurrent());
                    }

                }
            }
        }
        PlayerGroupLoopEnd();
        PointSet(PointFromId(1357), RegionGetCenter(RegionFromId(58)));
        PointSet(PointFromId(5842), RegionGetCenter(RegionFromId(59)));
        PointSet(PointFromId(5843), RegionGetCenter(RegionFromId(60)));
        PointSet(PointFromId(5845), RegionGetCenter(RegionFromId(62)));
        PointSet(PointFromId(5846), RegionGetCenter(RegionFromId(56)));
        PointSet(PointFromId(5847), RegionGetCenter(RegionFromId(57)));
    }
    else {
        if ((GameAttributeGameValue("1") == "0003")) {
            PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((PlayerGroupCount(gv_p1) == 0)) {
                    PlayerGroupAdd(gv_p1, PlayerGroupLoopCurrent());
                }
                else {
                    if ((PlayerGroupCount(gv_p2) == 0)) {
                        PlayerGroupAdd(gv_p2, PlayerGroupLoopCurrent());
                    }
                    else {
                        if ((PlayerGroupCount(gv_p3) == 0)) {
                            PlayerGroupAdd(gv_p3, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p4) == 0)) {
                                PlayerGroupAdd(gv_p4, PlayerGroupLoopCurrent());
                            }
                            else {
                                if ((PlayerGroupCount(gv_p5) == 0)) {
                                    PlayerGroupAdd(gv_p5, PlayerGroupLoopCurrent());
                                }
                                else {
                                    if ((PlayerGroupCount(gv_p6) == 0)) {
                                        PlayerGroupAdd(gv_p6, PlayerGroupLoopCurrent());
                                    }

                                }
                            }
                        }
                    }
                }
            }
            PlayerGroupLoopEnd();
            PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((PlayerGroupCount(gv_p7) == 0)) {
                    PlayerGroupAdd(gv_p7, PlayerGroupLoopCurrent());
                }
                else {
                    if ((PlayerGroupCount(gv_p8) == 0)) {
                        PlayerGroupAdd(gv_p8, PlayerGroupLoopCurrent());
                    }
                    else {
                        if ((PlayerGroupCount(gv_p9) == 0)) {
                            PlayerGroupAdd(gv_p9, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p10) == 0)) {
                                PlayerGroupAdd(gv_p10, PlayerGroupLoopCurrent());
                            }
                            else {
                                if ((PlayerGroupCount(gv_p11) == 0)) {
                                    PlayerGroupAdd(gv_p11, PlayerGroupLoopCurrent());
                                }
                                else {
                                    if ((PlayerGroupCount(gv_p12) == 0)) {
                                        PlayerGroupAdd(gv_p12, PlayerGroupLoopCurrent());
                                    }

                                }
                            }
                        }
                    }
                }
            }
            PlayerGroupLoopEnd();
            PointSet(PointFromId(5858), RegionGetCenter(RegionFromId(61)));
            PointSet(PointFromId(10), RegionGetCenter(RegionFromId(63)));
            PointSet(PointFromId(477), RegionGetCenter(RegionFromId(64)));
            PointSet(PointFromId(1357), RegionGetCenter(RegionFromId(65)));
            PointSet(PointFromId(5842), RegionGetCenter(RegionFromId(66)));
            PointSet(PointFromId(5843), RegionGetCenter(RegionFromId(67)));
            PointSet(PointFromId(5844), RegionGetCenter(RegionFromId(68)));
            PointSet(PointFromId(5845), RegionGetCenter(RegionFromId(69)));
            PointSet(PointFromId(5846), RegionGetCenter(RegionFromId(70)));
            PointSet(PointFromId(5847), RegionGetCenter(RegionFromId(71)));
        }
        else {
            if ((GameAttributeGameValue("1") == "0004")) {
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p1) == 0)) {
                        PlayerGroupAdd(gv_p1, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p2) == 0)) {
                        PlayerGroupAdd(gv_p2, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(3));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p3) == 0)) {
                        PlayerGroupAdd(gv_p3, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(4));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p4) == 0)) {
                        PlayerGroupAdd(gv_p4, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(5));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p5) == 0)) {
                        PlayerGroupAdd(gv_p5, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(6));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p6) == 0)) {
                        PlayerGroupAdd(gv_p6, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(7));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p7) == 0)) {
                        PlayerGroupAdd(gv_p7, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(8));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p8) == 0)) {
                        PlayerGroupAdd(gv_p8, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(9));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p9) == 0)) {
                        PlayerGroupAdd(gv_p9, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(10));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p10) == 0)) {
                        PlayerGroupAdd(gv_p10, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(11));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p11) == 0)) {
                        PlayerGroupAdd(gv_p11, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(GameAttributePlayersForTeam(12));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerGroupCount(gv_p12) == 0)) {
                        PlayerGroupAdd(gv_p12, PlayerGroupLoopCurrent());
                    }

                }
                PlayerGroupLoopEnd();
                lv_spawnArray[19] = RegionFromId(72);
                lv_spawnArray[8] = RegionFromId(73);
                lv_spawnArray[6] = RegionFromId(74);
                lv_spawnArray[5] = RegionFromId(75);
                lv_spawnArray[4] = RegionFromId(76);
                lv_spawnArray[3] = RegionFromId(77);
                lv_spawnArray[2] = RegionFromId(78);
                lv_spawnArray[1] = RegionFromId(79);
                lv_spawnArray[0] = RegionFromId(80);
                lv_spawnArray[18] = RegionFromId(81);
                lv_spawnArray[17] = RegionFromId(82);
                lv_spawnArray[16] = RegionFromId(83);
                lv_spawnArray[15] = RegionFromId(84);
                lv_spawnArray[14] = RegionFromId(85);
                lv_spawnArray[13] = RegionFromId(86);
                lv_spawnArray[12] = RegionFromId(87);
                lv_spawnArray[11] = RegionFromId(88);
                lv_spawnArray[10] = RegionFromId(89);
                lv_spawnArray[9] = RegionFromId(90);
                lv_spawnArray[7] = RegionFromId(91);
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p1, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p2, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p3, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p4, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p5, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p6, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p7, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p8, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p9, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p10, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p11, 1));
                PlayerGroupAdd(lv_fFAGroup, PlayerGroupPlayer(gv_p12, 1));
                autoA861D6B3_g = lv_fFAGroup; 
                autoA861D6B3_p = 1;
                for ( ; autoA861D6B3_p <= PlayerGroupCount(autoA861D6B3_g) ; autoA861D6B3_p += BoolToInt(lv_counter == PlayerGroupPlayer(autoA861D6B3_g, autoA861D6B3_p)) ) {
                    lv_counter = PlayerGroupPlayer(autoA861D6B3_g, autoA861D6B3_p);
                    while ((lv_heroSpawnPoint[lv_counter] == null)) {
                        lv_randomGenerated = RandomInt(0, 19);
                        lv_heroSpawnPoint[lv_counter] = lv_spawnArray[lv_randomGenerated];
                        lv_spawnArray[lv_randomGenerated] = null;
                    }
                }
                PointSet(PointFromId(5858), RegionGetCenter(lv_heroSpawnPoint[0]));
                PointSet(PointFromId(10), RegionGetCenter(lv_heroSpawnPoint[1]));
                PointSet(PointFromId(477), RegionGetCenter(lv_heroSpawnPoint[2]));
                PointSet(PointFromId(1357), RegionGetCenter(lv_heroSpawnPoint[3]));
                PointSet(PointFromId(1399), RegionGetCenter(lv_heroSpawnPoint[4]));
                PointSet(PointFromId(5841), RegionGetCenter(lv_heroSpawnPoint[5]));
                PointSet(PointFromId(5842), RegionGetCenter(lv_heroSpawnPoint[6]));
                PointSet(PointFromId(5843), RegionGetCenter(lv_heroSpawnPoint[7]));
                PointSet(PointFromId(5844), RegionGetCenter(lv_heroSpawnPoint[8]));
                PointSet(PointFromId(5845), RegionGetCenter(lv_heroSpawnPoint[9]));
                PointSet(PointFromId(5846), RegionGetCenter(lv_heroSpawnPoint[10]));
                PointSet(PointFromId(5847), RegionGetCenter(lv_heroSpawnPoint[11]));
            }
            else {
                if ((GameAttributeGameValue("1") == "0005")) {
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p1) == 0)) {
                            PlayerGroupAdd(gv_p1, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p2) == 0)) {
                                PlayerGroupAdd(gv_p2, PlayerGroupLoopCurrent());
                            }

                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p3) == 0)) {
                            PlayerGroupAdd(gv_p3, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p4) == 0)) {
                                PlayerGroupAdd(gv_p4, PlayerGroupLoopCurrent());
                            }

                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(3));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p5) == 0)) {
                            PlayerGroupAdd(gv_p5, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p6) == 0)) {
                                PlayerGroupAdd(gv_p6, PlayerGroupLoopCurrent());
                            }

                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(4));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p7) == 0)) {
                            PlayerGroupAdd(gv_p7, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p8) == 0)) {
                                PlayerGroupAdd(gv_p8, PlayerGroupLoopCurrent());
                            }

                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(5));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p9) == 0)) {
                            PlayerGroupAdd(gv_p9, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p10) == 0)) {
                                PlayerGroupAdd(gv_p10, PlayerGroupLoopCurrent());
                            }

                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(6));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p11) == 0)) {
                            PlayerGroupAdd(gv_p11, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p12) == 0)) {
                                PlayerGroupAdd(gv_p12, PlayerGroupLoopCurrent());
                            }

                        }
                    }
                    PlayerGroupLoopEnd();
                    PointSet(PointFromId(5858), RegionGetCenter(RegionFromId(174)));
                    PointSet(PointFromId(10), RegionGetCenter(RegionFromId(175)));
                    PointSet(PointFromId(477), RegionGetCenter(RegionFromId(176)));
                    PointSet(PointFromId(1357), RegionGetCenter(RegionFromId(177)));
                    PointSet(PointFromId(1399), RegionGetCenter(RegionFromId(178)));
                    PointSet(PointFromId(5841), RegionGetCenter(RegionFromId(179)));
                    PointSet(PointFromId(5842), RegionGetCenter(RegionFromId(180)));
                    PointSet(PointFromId(5843), RegionGetCenter(RegionFromId(181)));
                    PointSet(PointFromId(5844), RegionGetCenter(RegionFromId(182)));
                    PointSet(PointFromId(5845), RegionGetCenter(RegionFromId(183)));
                    PointSet(PointFromId(5846), RegionGetCenter(RegionFromId(184)));
                    PointSet(PointFromId(5847), RegionGetCenter(RegionFromId(185)));
                }
                else {
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p1) == 0)) {
                            PlayerGroupAdd(gv_p1, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p2) == 0)) {
                                PlayerGroupAdd(gv_p2, PlayerGroupLoopCurrent());
                            }
                            else {
                                if ((PlayerGroupCount(gv_p3) == 0)) {
                                    PlayerGroupAdd(gv_p3, PlayerGroupLoopCurrent());
                                }
                                else {
                                    if ((PlayerGroupCount(gv_p4) == 0)) {
                                        PlayerGroupAdd(gv_p4, PlayerGroupLoopCurrent());
                                    }

                                }
                            }
                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p5) == 0)) {
                            PlayerGroupAdd(gv_p5, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p6) == 0)) {
                                PlayerGroupAdd(gv_p6, PlayerGroupLoopCurrent());
                            }
                            else {
                                if ((PlayerGroupCount(gv_p7) == 0)) {
                                    PlayerGroupAdd(gv_p7, PlayerGroupLoopCurrent());
                                }
                                else {
                                    if ((PlayerGroupCount(gv_p8) == 0)) {
                                        PlayerGroupAdd(gv_p8, PlayerGroupLoopCurrent());
                                    }

                                }
                            }
                        }
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(GameAttributePlayersForTeam(3));
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((PlayerGroupCount(gv_p9) == 0)) {
                            PlayerGroupAdd(gv_p9, PlayerGroupLoopCurrent());
                        }
                        else {
                            if ((PlayerGroupCount(gv_p10) == 0)) {
                                PlayerGroupAdd(gv_p10, PlayerGroupLoopCurrent());
                            }
                            else {
                                if ((PlayerGroupCount(gv_p11) == 0)) {
                                    PlayerGroupAdd(gv_p11, PlayerGroupLoopCurrent());
                                }
                                else {
                                    if ((PlayerGroupCount(gv_p12) == 0)) {
                                        PlayerGroupAdd(gv_p12, PlayerGroupLoopCurrent());
                                    }

                                }
                            }
                        }
                    }
                    PlayerGroupLoopEnd();
                    lv_randomizerRegion[0][0] = RegionFromId(195);
                    lv_randomizerRegion[0][1] = RegionFromId(194);
                    lv_randomizerRegion[0][2] = RegionFromId(193);
                    lv_randomizerRegion[0][3] = RegionFromId(192);
                    lv_randomizerRegion[0][4] = RegionFromId(196);
                    lv_randomizerRegion[0][5] = RegionFromId(197);
                    lv_randomizerRegion[0][6] = RegionFromId(198);
                    lv_randomizerRegion[0][7] = RegionFromId(199);
                    lv_randomizerRegion[0][8] = RegionFromId(200);
                    lv_randomizerRegion[0][9] = RegionFromId(201);
                    lv_randomizerRegion[0][10] = RegionFromId(202);
                    lv_randomizerRegion[0][11] = RegionFromId(203);
                    lv_randomizerRegion[1][0] = RegionFromId(204);
                    lv_randomizerRegion[1][1] = RegionFromId(205);
                    lv_randomizerRegion[1][2] = RegionFromId(207);
                    lv_randomizerRegion[1][3] = RegionFromId(206);
                    lv_randomizerRegion[1][4] = RegionFromId(208);
                    lv_randomizerRegion[1][5] = RegionFromId(209);
                    lv_randomizerRegion[1][6] = RegionFromId(211);
                    lv_randomizerRegion[1][7] = RegionFromId(210);
                    lv_randomizerRegion[1][8] = RegionFromId(212);
                    lv_randomizerRegion[1][9] = RegionFromId(213);
                    lv_randomizerRegion[1][10] = RegionFromId(215);
                    lv_randomizerRegion[1][11] = RegionFromId(214);
                    lv_randomizerRegion[2][0] = RegionFromId(1);
                    lv_randomizerRegion[2][1] = RegionFromId(31);
                    lv_randomizerRegion[2][2] = RegionFromId(32);
                    lv_randomizerRegion[2][3] = RegionFromId(34);
                    lv_randomizerRegion[2][4] = RegionFromId(35);
                    lv_randomizerRegion[2][5] = RegionFromId(52);
                    lv_randomizerRegion[2][6] = RegionFromId(54);
                    lv_randomizerRegion[2][7] = RegionFromId(187);
                    lv_randomizerRegion[2][8] = RegionFromId(188);
                    lv_randomizerRegion[2][9] = RegionFromId(189);
                    lv_randomizerRegion[2][10] = RegionFromId(190);
                    lv_randomizerRegion[2][11] = RegionFromId(191);
                    lv_randomizerRegion[3][0] = RegionFromId(224);
                    lv_randomizerRegion[3][1] = RegionFromId(225);
                    lv_randomizerRegion[3][2] = RegionFromId(227);
                    lv_randomizerRegion[3][3] = RegionFromId(226);
                    lv_randomizerRegion[3][4] = RegionFromId(216);
                    lv_randomizerRegion[3][5] = RegionFromId(217);
                    lv_randomizerRegion[3][6] = RegionFromId(219);
                    lv_randomizerRegion[3][7] = RegionFromId(218);
                    lv_randomizerRegion[3][8] = RegionFromId(220);
                    lv_randomizerRegion[3][9] = RegionFromId(221);
                    lv_randomizerRegion[3][10] = RegionFromId(223);
                    lv_randomizerRegion[3][11] = RegionFromId(222);
                    lv_randomintegers[0] = 0;
                    lv_randomintegers[1] = 1;
                    lv_randomintegers[2] = 2;
                    lv_randomintegers[3] = 3;
                    autoAF6BB4F0_ae = 3;
                    autoAF6BB4F0_ai = 1;
                    lv_rANDOMSPAWNCOUNTER = 1;
                    for ( ; ( (autoAF6BB4F0_ai >= 0 && lv_rANDOMSPAWNCOUNTER <= autoAF6BB4F0_ae) || (autoAF6BB4F0_ai <= 0 && lv_rANDOMSPAWNCOUNTER >= autoAF6BB4F0_ae) ) ; lv_rANDOMSPAWNCOUNTER += autoAF6BB4F0_ai ) {
                        if ((lv_rANDOMSPAWNCOUNTER == 1)) {
                            lv_randomizerPoint[0] = PointFromId(5858);
                            lv_randomizerPoint[1] = PointFromId(10);
                            lv_randomizerPoint[2] = PointFromId(477);
                            lv_randomizerPoint[3] = PointFromId(1357);
                        }
                        else {
                            if ((lv_rANDOMSPAWNCOUNTER == 2)) {
                                lv_randomizerPoint[0] = PointFromId(1399);
                                lv_randomizerPoint[1] = PointFromId(5841);
                                lv_randomizerPoint[2] = PointFromId(5842);
                                lv_randomizerPoint[3] = PointFromId(5843);
                            }
                            else {
                                if ((lv_rANDOMSPAWNCOUNTER == 3)) {
                                    lv_randomizerPoint[0] = PointFromId(5844);
                                    lv_randomizerPoint[1] = PointFromId(5845);
                                    lv_randomizerPoint[2] = PointFromId(5846);
                                    lv_randomizerPoint[3] = PointFromId(5847);
                                }

                            }
                        }
                        lv_islandRandomizer = lv_randomintegers[RandomInt(lv_minrandom, lv_maxrandom)];
                        if ((lv_islandRandomizer == 0)) {
                            lv_selectedSpawnIsland = lv_islandRandomizer;
                            lv_islandused[0] = true;
                            if ((lv_maxrandom == 3)) {
                                lv_maxrandom = 2;
                                lv_randomintegers[0] = 1;
                                lv_randomintegers[1] = 2;
                                lv_randomintegers[2] = 3;
                            }
                            else {
                                if ((lv_maxrandom == 2)) {
                                    lv_maxrandom = 1;
                                    if ((lv_islandused[1] == true)) {
                                        lv_randomintegers[0] = 2;
                                        lv_randomintegers[1] = 3;
                                    }
                                    else {
                                        if ((lv_islandused[2] == true)) {
                                            lv_randomintegers[0] = 1;
                                            lv_randomintegers[1] = 3;
                                        }
                                        else {
                                            lv_randomintegers[0] = 1;
                                            lv_randomintegers[1] = 2;
                                        }
                                    }
                                }
                                else {
                                    if ((lv_maxrandom == 1)) {
                                        lv_maxrandom = 0;
                                        if ((lv_islandused[1] == true) && (lv_islandused[2] == true)) {
                                            lv_randomintegers[0] = 3;
                                        }
                                        else {
                                            if ((lv_islandused[1] == true)) {
                                                lv_randomintegers[0] = 2;
                                            }
                                            else {
                                                lv_randomintegers[0] = 1;
                                            }
                                        }
                                    }

                                }
                            }
                            lv_islandRandomizer = RandomInt(0, 2);
                            if ((lv_islandRandomizer == 0)) {
                                PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][0]));
                                PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][1]));
                                PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][2]));
                                PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][3]));
                            }

                            if ((lv_islandRandomizer == 1)) {
                                PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][4]));
                                PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][5]));
                                PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][6]));
                                PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][7]));
                            }

                            if ((lv_islandRandomizer == 2)) {
                                PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][8]));
                                PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][9]));
                                PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][10]));
                                PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][11]));
                            }

                        }
                        else {
                            if ((lv_islandRandomizer == 1)) {
                                lv_selectedSpawnIsland = lv_islandRandomizer;
                                lv_islandused[1] = true;
                                if ((lv_maxrandom == 3)) {
                                    lv_maxrandom = 2;
                                    lv_randomintegers[0] = 0;
                                    lv_randomintegers[1] = 2;
                                    lv_randomintegers[2] = 3;
                                }
                                else {
                                    if ((lv_maxrandom == 2)) {
                                        lv_maxrandom = 1;
                                        if ((lv_islandused[0] == true)) {
                                            lv_randomintegers[0] = 2;
                                            lv_randomintegers[1] = 3;
                                        }
                                        else {
                                            if ((lv_islandused[2] == true)) {
                                                lv_randomintegers[0] = 0;
                                                lv_randomintegers[1] = 3;
                                            }
                                            else {
                                                lv_randomintegers[0] = 0;
                                                lv_randomintegers[1] = 2;
                                            }
                                        }
                                    }
                                    else {
                                        if ((lv_maxrandom == 1)) {
                                            lv_maxrandom = 0;
                                            if ((lv_islandused[0] == true) && (lv_islandused[2] == true)) {
                                                lv_randomintegers[0] = 3;
                                            }
                                            else {
                                                if ((lv_islandused[0] == true)) {
                                                    lv_randomintegers[0] = 2;
                                                }
                                                else {
                                                    lv_randomintegers[0] = 0;
                                                }
                                            }
                                        }

                                    }
                                }
                                lv_islandRandomizer = RandomInt(0, 2);
                                if ((lv_islandRandomizer == 0)) {
                                    PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][0]));
                                    PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][1]));
                                    PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][2]));
                                    PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][3]));
                                }

                                if ((lv_islandRandomizer == 1)) {
                                    PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][4]));
                                    PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][5]));
                                    PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][6]));
                                    PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][7]));
                                }

                                if ((lv_islandRandomizer == 2)) {
                                    PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][8]));
                                    PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][9]));
                                    PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][10]));
                                    PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][11]));
                                }

                            }
                            else {
                                if ((lv_islandRandomizer == 2)) {
                                    lv_selectedSpawnIsland = lv_islandRandomizer;
                                    lv_islandused[2] = true;
                                    if ((lv_maxrandom == 3)) {
                                        lv_maxrandom = 2;
                                        lv_randomintegers[0] = 0;
                                        lv_randomintegers[1] = 1;
                                        lv_randomintegers[2] = 3;
                                    }
                                    else {
                                        if ((lv_maxrandom == 2)) {
                                            lv_maxrandom = 1;
                                            if ((lv_islandused[1] == true)) {
                                                lv_randomintegers[0] = 0;
                                                lv_randomintegers[1] = 3;
                                            }
                                            else {
                                                if ((lv_islandused[0] == true)) {
                                                    lv_randomintegers[0] = 3;
                                                    lv_randomintegers[1] = 1;
                                                }
                                                else {
                                                    lv_randomintegers[0] = 0;
                                                    lv_randomintegers[1] = 1;
                                                }
                                            }
                                        }
                                        else {
                                            if ((lv_maxrandom == 1)) {
                                                lv_maxrandom = 0;
                                                if ((lv_islandused[1] == true) && (lv_islandused[2] == true)) {
                                                    lv_randomintegers[0] = 3;
                                                }
                                                else {
                                                    if ((lv_islandused[1] == true)) {
                                                        lv_randomintegers[0] = 2;
                                                    }
                                                    else {
                                                        lv_randomintegers[0] = 1;
                                                    }
                                                }
                                            }

                                        }
                                    }
                                    lv_islandRandomizer = RandomInt(0, 2);
                                    if ((lv_islandRandomizer == 0)) {
                                        PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][0]));
                                        PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][1]));
                                        PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][2]));
                                        PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][3]));
                                    }

                                    if ((lv_islandRandomizer == 1)) {
                                        PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][4]));
                                        PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][5]));
                                        PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][6]));
                                        PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][7]));
                                    }

                                    if ((lv_islandRandomizer == 2)) {
                                        PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][8]));
                                        PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][9]));
                                        PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][10]));
                                        PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][11]));
                                    }

                                }
                                else {
                                    if ((lv_islandRandomizer == 3)) {
                                        lv_selectedSpawnIsland = lv_islandRandomizer;
                                        lv_islandused[3] = true;
                                        if ((lv_maxrandom == 3)) {
                                            lv_maxrandom = 2;
                                            lv_randomintegers[0] = 0;
                                            lv_randomintegers[1] = 1;
                                            lv_randomintegers[2] = 2;
                                        }
                                        else {
                                            if ((lv_maxrandom == 2)) {
                                                lv_maxrandom = 1;
                                                if ((lv_islandused[1] == true)) {
                                                    lv_randomintegers[0] = 2;
                                                    lv_randomintegers[1] = 0;
                                                }
                                                else {
                                                    if ((lv_islandused[2] == true)) {
                                                        lv_randomintegers[0] = 1;
                                                        lv_randomintegers[1] = 0;
                                                    }
                                                    else {
                                                        lv_randomintegers[0] = 1;
                                                        lv_randomintegers[1] = 2;
                                                    }
                                                }
                                            }
                                            else {
                                                if ((lv_maxrandom == 1)) {
                                                    lv_maxrandom = 0;
                                                    if ((lv_islandused[1] == true) && (lv_islandused[2] == true)) {
                                                        lv_randomintegers[0] = 0;
                                                    }
                                                    else {
                                                        if ((lv_islandused[1] == true)) {
                                                            lv_randomintegers[0] = 1;
                                                        }
                                                        else {
                                                            lv_randomintegers[0] = 2;
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                        lv_islandRandomizer = RandomInt(0, 2);
                                        if ((lv_islandRandomizer == 0)) {
                                            PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][0]));
                                            PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][1]));
                                            PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][2]));
                                            PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][3]));
                                        }

                                        if ((lv_islandRandomizer == 1)) {
                                            PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][4]));
                                            PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][5]));
                                            PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][6]));
                                            PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][7]));
                                        }

                                        if ((lv_islandRandomizer == 2)) {
                                            PointSet(lv_randomizerPoint[0], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][8]));
                                            PointSet(lv_randomizerPoint[1], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][9]));
                                            PointSet(lv_randomizerPoint[2], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][10]));
                                            PointSet(lv_randomizerPoint[3], RegionGetCenter(lv_randomizerRegion[lv_selectedSpawnIsland][11]));
                                        }

                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    gv_fishPools[0] = RegionFromId(2);
    gv_fishPools[1] = RegionFromId(129);
    gv_fishPools[2] = RegionFromId(130);
    gv_fishPools[3] = RegionFromId(131);
    gv_fishPools[4] = RegionFromId(132);
    gv_fishPools[5] = RegionFromId(133);
    gv_fishPools[6] = RegionFromId(134);
    gv_fishPools[7] = RegionFromId(135);
    gv_fishPools[8] = RegionFromId(136);
    gv_fishPools[9] = RegionFromId(137);
    gv_fishPools[10] = RegionFromId(138);
    gv_fishPools[11] = RegionFromId(12);
    gv_fishPools[12] = RegionFromId(139);
    gv_fishPools[13] = RegionFromId(140);
    gv_fishPools[14] = RegionFromId(141);
    gv_fishPools[15] = RegionFromId(142);
    gv_fishPools[16] = RegionFromId(143);
    gv_fishPools[17] = RegionFromId(144);
    gv_fishPools[18] = RegionFromId(145);
    gv_fishPools[19] = RegionFromId(146);
    gv_fishPools[20] = RegionFromId(147);
    gv_fishPools[21] = RegionFromId(148);
    gv_fishPools[22] = RegionFromId(13);
    gv_fishPools[23] = RegionFromId(149);
    gv_fishPools[24] = RegionFromId(150);
    gv_fishPools[25] = RegionFromId(151);
    gv_fishPools[26] = RegionFromId(152);
    gv_fishPools[27] = RegionFromId(153);
    gv_fishPools[28] = RegionFromId(154);
    gv_fishPools[29] = RegionFromId(155);
    gv_fishPools[30] = RegionFromId(156);
    gv_fishPools[31] = RegionFromId(157);
    gv_fishPools[32] = RegionFromId(158);
    gv_fishPools[33] = RegionFromId(14);
    gv_fishPools[34] = RegionFromId(159);
    gv_fishPools[35] = RegionFromId(160);
    gv_fishPools[36] = RegionFromId(161);
    gv_fishPools[37] = RegionFromId(162);
    gv_fishPools[38] = RegionFromId(163);
    gv_fishPools[39] = RegionFromId(164);
    gv_fishPools[40] = RegionFromId(165);
    gv_fishPools[41] = RegionFromId(166);
    gv_fishPools[42] = RegionFromId(167);
    gv_fishPools[43] = RegionFromId(168);
    gv_fishPools[44] = RegionFromId(25);
    gv_fishPools[45] = RegionFromId(169);
    gv_fishPools[46] = RegionFromId(170);
    gv_fishPools[47] = RegionFromId(171);
    gv_fishPools[48] = RegionFromId(125);
    gv_fishPools[49] = RegionFromId(126);
    gv_fishPools[50] = RegionFromId(127);
    gv_fishPools[51] = RegionFromId(128);
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    lv_fishrandom = RandomInt(0, 51);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameValues_Init () {
    gt_GameValues = TriggerCreate("gt_GameValues_Func");
    TriggerAddEventMapInit(gt_GameValues);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_remainingTeams, EventPlayer());
    if ((PlayerGroupHasPlayer(gv_victorious, EventPlayer()) == false)) {
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == true)) {
                UnitSetPosition(UnitGroupLoopCurrent(), RegionGetCenter(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0)), false);
                Wait(0.1, c_timeGame);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "QuitHero", UnitGroupLoopCurrent(), 1);
                UnitKill(UnitGroupLoopCurrent());
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "QuitHero", UnitGroupLoopCurrent(), 1);
                UnitKill(UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
    }
    else {
        libNtve_gf_SetDialogItemText(gv_playerstatus[EventPlayer()], StringExternal("Param/Value/42AEF36E"), PlayerGroupAll());
    }
    UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == true) && (PlayerGroupHasPlayer(gv_victorious, EventPlayer()) == false)) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionGetCenter(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.0)), false);
            Wait(0.1, c_timeGame);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "QuitHero", UnitGroupLoopCurrent(), 1);
            UnitKill(UnitGroupLoopCurrent());
        }
        else {
            if ((PlayerGroupHasPlayer(gv_victorious, EventPlayer()) == false)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "QuitHero", UnitGroupLoopCurrent(), 1);
                UnitKill(UnitGroupLoopCurrent());
            }

        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_SetDialogItemText(gv_playerstatus[EventPlayer()], StringExternal("Param/Value/A030EAB5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_playernames[EventPlayer()], Color(51.37, 51.37, 51.37), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_playerKD[EventPlayer()], Color(51.37, 51.37, 51.37), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_playerstatus[EventPlayer()], Color(51.37, 51.37, 51.37), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lose Check
//--------------------------------------------------------------------------------------------------
bool gt_LoseCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_noVoidTowersLeft;
    int lv_deadHeroes;
    int lv_totalHeroes;

    // Variable Initialization
    lv_noVoidTowersLeft = true;

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_noobTime) == 0.0))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12]) || (UnitGetType(EventUnit()) == "VoidTowerBuilt")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == gv_hero[0]) && (EventUnit() == gv_hero[1]) && (EventUnit() == gv_hero[2]) && (EventUnit() == gv_hero[3]) && (EventUnit() == gv_hero[4]) && (EventUnit() == gv_hero[5]) && (EventUnit() == gv_hero[6]) && (EventUnit() == gv_hero[7]) && (EventUnit() == gv_hero[8]) && (EventUnit() == gv_hero[9]) && (EventUnit() == gv_hero[10]) && (EventUnit() == gv_hero[11]) && (EventUnit() == gv_hero[12])) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "DeadHero", gv_hero[EventPlayer()], 1);
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "DeadHero") == true) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && ((UnitGroupLoopCurrent() == gv_hero[0]) || (UnitGroupLoopCurrent() == gv_hero[1]) || (UnitGroupLoopCurrent() == gv_hero[2]) || (UnitGroupLoopCurrent() == gv_hero[3]) || (UnitGroupLoopCurrent() == gv_hero[4]) || (UnitGroupLoopCurrent() == gv_hero[5]) || (UnitGroupLoopCurrent() == gv_hero[6]) || (UnitGroupLoopCurrent() == gv_hero[7]) || (UnitGroupLoopCurrent() == gv_hero[8]) || (UnitGroupLoopCurrent() == gv_hero[9]) || (UnitGroupLoopCurrent() == gv_hero[10]) || (UnitGroupLoopCurrent() == gv_hero[11]) || (UnitGroupLoopCurrent() == gv_hero[12]))) {
            lv_deadHeroes = (lv_deadHeroes + 1);
            lv_totalHeroes = (lv_totalHeroes + 1);
        }
        else {
            lv_totalHeroes = (lv_totalHeroes + 1);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidTowerBuilt") && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
            lv_noVoidTowersLeft = false;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_deadHeroes == lv_totalHeroes) && (lv_noVoidTowersLeft == true)) {
        if ((gv_victoryBoolean == true)) {
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, 0, 0), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "BoundSoul") && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true)) {
                    UnitKill(UnitGroupLoopCurrent());
                }

            }
            UnitGroupLoopEnd();
            PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit())));
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                PlayerGroupRemove(gv_remainingTeams, PlayerGroupLoopCurrent());
                GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
            }
            PlayerGroupLoopEnd();
            PlayerGroupRemove(gv_remainingTeams, UnitGetOwner(EventUnit()));
            GameOver(UnitGetOwner(EventUnit()), c_gameOverDefeat, true, true);
        }
        else {
            UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterSummoned - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                VisRevealerCreate(UnitGetOwner(UnitGroupLoopCurrent()), RegionEntireMap());
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((StringExternal("Param/Value/95265EDA") + IntToText(UnitGetOwner(UnitGroupLoopCurrent()))) + StringExternal("Param/Value/1538EE3A")));
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            }
            UnitGroupLoopEnd();
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/A0520ECF"));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/3C168354"));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/E78CAA60"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoseCheck_Init () {
    gt_LoseCheck = TriggerCreate("gt_LoseCheck_Func");
    TriggerEnable(gt_LoseCheck, false);
    TriggerAddEventUnitDied(gt_LoseCheck, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Check
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadEnemyHeroes;
    int lv_totalEnemyHeroes;
    bool lv_victoryAchieved;
    bool lv_noVoidTowersLeft;

    // Variable Initialization
    lv_noVoidTowersLeft = true;

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(gv_noobTime) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_remainingTeams);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", PlayerGroupLoopCurrent(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((PlayerGroupHasPlayer(gv_remainingTeams, UnitGetOwner(UnitGroupLoopCurrent())) == true) && (UnitHasBehavior(UnitGroupLoopCurrent(), "DeadHero") == true) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), PlayerGroupLoopCurrent(), libNtve_ge_PlayerRelation_Enemy) == true) && ((UnitGroupLoopCurrent() == gv_hero[0]) || (UnitGroupLoopCurrent() == gv_hero[1]) || (UnitGroupLoopCurrent() == gv_hero[2]) || (UnitGroupLoopCurrent() == gv_hero[3]) || (UnitGroupLoopCurrent() == gv_hero[4]) || (UnitGroupLoopCurrent() == gv_hero[5]) || (UnitGroupLoopCurrent() == gv_hero[6]) || (UnitGroupLoopCurrent() == gv_hero[7]) || (UnitGroupLoopCurrent() == gv_hero[8]) || (UnitGroupLoopCurrent() == gv_hero[9]) || (UnitGroupLoopCurrent() == gv_hero[10]) || (UnitGroupLoopCurrent() == gv_hero[11]) || (UnitGroupLoopCurrent() == gv_hero[12]))) {
                lv_deadEnemyHeroes = (lv_deadEnemyHeroes + 1);
                lv_totalEnemyHeroes = (lv_totalEnemyHeroes + 1);
            }
            else {
                if ((PlayerGroupHasPlayer(gv_remainingTeams, UnitGetOwner(UnitGroupLoopCurrent())) == true) && (UnitHasBehavior(UnitGroupLoopCurrent(), "DeadHero") == false) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), PlayerGroupLoopCurrent(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    lv_totalEnemyHeroes = (lv_totalEnemyHeroes + 1);
                }

            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", PlayerGroupLoopCurrent(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((PlayerGroupHasPlayer(gv_remainingTeams, UnitGetOwner(UnitGroupLoopCurrent())) == true) && (UnitGetType(UnitGroupLoopCurrent()) == "VoidTowerBuilt") && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), PlayerGroupLoopCurrent(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                lv_noVoidTowersLeft = false;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_deadEnemyHeroes == lv_totalEnemyHeroes) && (lv_noVoidTowersLeft == true)) {
            if ((gv_victoryBoolean == true)) {
                PlayerGroupAdd(gv_victorious, PlayerGroupLoopCurrent());
                GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, ((StringExternal("Param/Value/F5B10826") + IntToText(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/8059D7A4")));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)));
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaChat, StringExternal("Param/Value/AB3EA7A7"));
            }
            lv_victoryAchieved = true;
        }

        lv_deadEnemyHeroes = 0;
        lv_totalEnemyHeroes = 0;
    }
    PlayerGroupLoopEnd();
    if ((lv_victoryAchieved == true)) {
        TriggerEnable(gt_LoseCheck, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheck_Init () {
    gt_VictoryCheck = TriggerCreate("gt_VictoryCheck_Func");
    TriggerEnable(gt_VictoryCheck, false);
    TriggerAddEventTimePeriodic(gt_VictoryCheck, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create All Menus
//--------------------------------------------------------------------------------------------------
bool gt_CreateAllMenus_Func (bool testConds, bool runActions) {
    int auto5304DCDD_ae;
    int auto5304DCDD_ai;

    // Variable Declarations
    playergroup lv_tempplayer;
    int lv_pickedPlayer;
    int lv_start;
    int lv_portraitx;
    int lv_portraity;
    int lv_selectionoffsetx;
    int lv_team;

    // Variable Initialization
    lv_tempplayer = PlayerGroupEmpty();
    lv_portraitx = 140;
    lv_portraity = -50;
    lv_selectionoffsetx = 1;
    lv_team = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CreateScoreboard, true, true);
    TriggerExecute(gt_SelectHeroDialogs, true, false);
    TimerStart(gv_selectionTimer, 60.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/8D5D2CDB"), true, false);
    gv_selectionTimerWindow = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_selectionTimerWindow, c_anchorTop, 0, -35);
    DialogCreate(1460, 650, c_anchorCenter, 0, -100, true);
    gv_menu = DialogLastCreated();
    DialogSetVisible(gv_menu, PlayerGroupActive(), true);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 40, -150, StringExternal("Param/Value/346A4469"), StringToText(""), "");
    gv_heroChoice[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 40, -150, StringToText(""), "Assets\\Textures\\btn-unit-protoss-probe.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 40, -50, StringExternal("Param/Value/0495B4C8"), StringToText(""), "");
    gv_heroChoice[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 40, -50, StringToText(""), "Assets\\Textures\\btn-unit-protoss-zealot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 40, 50, StringExternal("Param/Value/0B96D921"), StringToText(""), "");
    gv_heroChoice[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 40, 50, StringToText(""), "Assets\\Textures\\btn-unit-protoss-prisonzealot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 40, 150, StringExternal("Param/Value/40BA4A0A"), StringToText(""), "");
    gv_heroChoice[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 40, 150, StringToText(""), "Assets\\Textures\\btn-unit-protoss-hightemplar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 140, -150, StringExternal("Param/Value/6B8A5841"), StringToText(""), "");
    gv_heroChoice[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 140, -150, StringToText(""), "Assets\\Textures\\btn-unit-protoss-preserver01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 140, -50, StringExternal("Param/Value/358DD722"), StringToText(""), "");
    gv_heroChoice[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 140, -50, StringToText(""), "Assets\\Textures\\btn-unit-protoss-adept.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 100, 100, c_anchorLeft, 140, 50, StringExternal("Param/Value/C1013456"), StringToText(""), "");
    gv_heroChoice[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 140, 50, StringToText(""), "Assets\\Textures\\btn-unit-protoss-hightemplar-taldarim.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorLeft, 140, 150, StringExternal("Param/Value/59ECD8C8"), "Assets\\Textures\\btn-bloodzealot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_menu, 240, 65, c_anchorBottom, 137, 55, StringExternal("Param/Value/9D450794"), StringExternal("Param/Value/FB619D61"), "");
    gv_choose = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, -225, StringExternal("Param/Value/BFFC74CD"), false);
    gv_modeCheckboxes[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, -210, StringExternal("Param/Value/4C7C6434"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, -210, ((StringExternal("Param/Value/66A3D3FF") + IntToText(gv_basicModeVotes)) + (StringExternal("Param/Value/69F3E93C") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/B7FD76EA")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_modeCheckboxTotal[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, -175, StringExternal("Param/Value/95FB3220"), true);
    gv_modeCheckboxes[1] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_modeCheckboxes[1], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, -160, StringExternal("Param/Value/85DC2445"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, -160, ((StringExternal("Param/Value/CD86BE6B") + IntToText(gv_standardModeVotes)) + (StringExternal("Param/Value/5010ECA0") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/6D8509E1")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_modeCheckboxTotal[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, -125, StringExternal("Param/Value/FDD18F38"), false);
    gv_modeCheckboxes[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, -110, StringExternal("Param/Value/0FBD5F8D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, -110, ((StringExternal("Param/Value/86493D3A") + IntToText(gv_advancedModeVotes)) + (StringExternal("Param/Value/7298527A") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/21719E03")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_modeCheckboxTotal[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, -75, StringExternal("Param/Value/AE50184A"), false);
    gv_modeCheckboxes[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, -60, StringExternal("Param/Value/D23615CC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, -60, ((StringExternal("Param/Value/66F301A9") + IntToText(gv_hardcoreModeVotes)) + (StringExternal("Param/Value/49C31C91") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/364D4D45")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_modeCheckboxTotal[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, -25, StringExternal("Param/Value/698E2342"), true);
    gv_victoryEnabledCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, -10, StringExternal("Param/Value/690F84CE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, -10, ((StringExternal("Param/Value/FDB7FF11") + IntToText(gv_victoryEnabled)) + (StringExternal("Param/Value/33EB4F06") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/50D279F3")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_victoryVoteTotal = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, 25, StringExternal("Param/Value/0283CEEC"), false);
    gv_airShipsEnabledCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, 40, StringExternal("Param/Value/7015F050"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, 40, ((StringExternal("Param/Value/A37A2B26") + IntToText(gv_airShipsEnabled)) + (StringExternal("Param/Value/C88F3E9C") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/2505F8E1")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_airShipsVoteTotal = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_menu, 50, 50, c_anchorRight, 330, 75, StringExternal("Param/Value/F70449A0"), true);
    gv_acceleratedModeEnabledCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 25, 90, StringExternal("Param/Value/DEED6152"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 50, c_anchorRight, 110, 90, ((StringExternal("Param/Value/684DD61E") + IntToText(gv_acceleratedMode)) + (StringExternal("Param/Value/C17C5CAB") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/25C7C730")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_acceleratedModeTotal = DialogControlLastCreated();
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[0] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[0], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[0], c_triggerRenderTypeLDR, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[0], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[0], "ProbePortrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-probe.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -230, -180, StringExternal("Param/Value/13F04C52"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_foragerInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -100, StringExternal("Param/Value/25576A8A"), Color(100,100,100), false, 2.0);
    gv_foragerInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/13DFB7FC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_foragerInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/5ACF1747"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/203D45C9"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/4C387EF4"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/5B2F59F8"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/1442F71E"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot06.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/4BA79AE9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_foragerInfo[9] = DialogControlLastCreated();
    gv_foragerInfo[10] = DialogControlLastCreated();
    gv_foragerInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/60223E3E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_foragerInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/10545304"), "Assets\\Textures\\btn-ability-terran-scannersweep-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/ACC83530"), "Assets\\Textures\\btn-unit-terran-targetingdrone.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/0C3E11F5"), "Assets\\Textures\\btn-research-terran-orbitalstrikerally.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/074559AF"), "Assets\\Textures\\btn-unit-protoss-sentry.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -350, 225, StringExternal("Param/Value/40D253FE"), "Assets\\Textures\\btn-unit-protoss-dragoon-void.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/68CA0086"), "Assets\\Textures\\intellect-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_foragerInfo[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 240, StringExternal("Param/Value/5CA80B67"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -250, 135, StringExternal("Param/Value/3D1CCD57"), "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -200, 135, StringExternal("Param/Value/9E85A69C"), "Assets\\Textures\\btn-upgrade-terran-mobiusreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[1] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[1], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemUseTransition(gv_dialogportrait[1], false, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[1], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[1], c_triggerRenderTypeLDR, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[1], "ZealotPortrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-zealot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -230, -180, StringExternal("Param/Value/9DDD68E9"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_warriorInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -100, StringExternal("Param/Value/05F6DE34"), Color(100,100,100), false, 2.0);
    gv_warriorInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/F84D7F8D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_warriorInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/23921004"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/C845B1A7"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/26FF07CE"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/ABE87CB2"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/5BFD2676"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -215, -15, StringExternal("Param/Value/30013904"), "Assets\\Textures\\shield-sword-slot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/C58B7F34"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_warriorInfo[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 115, StringToText(""), Color(100,100,100), false, 2.0);
    gv_warriorInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/478C06F7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_warriorInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/88EDA11F"), "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/0B2933D7"), "Assets\\Textures\\btn-ability-protoss-blink-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/2C810676"), "Assets\\Textures\\btn-ability-protoss-dragoonchassis.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -350, 225, StringExternal("Param/Value/168CC3AA"), "Assets\\Textures\\Ancient-Icon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/DF89996F"), "Assets\\Textures\\btn-unit-protoss-zealot-aiur.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/CE3F0983"), "Assets\\Textures\\strength-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_warriorInfo[18] = DialogControlLastCreated();
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[2] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[2], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemUseTransition(gv_dialogportrait[2], false, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[2], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[2], c_triggerRenderTypeLDR, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[2], "DarkTemplar2Portrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-prisonzealot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -195, -180, StringExternal("Param/Value/0114A364"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_thiefInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -100, StringExternal("Param/Value/AD877F36"), Color(100,100,100), false, 2.0);
    gv_thiefInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/86F2D6A6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_thiefInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/A79C32F0"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/23657261"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/B613E09D"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/675AF0B5"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/1157FD42"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot05.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/E85D84A5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_thiefInfo[9] = DialogControlLastCreated();
    gv_thiefInfo[10] = DialogControlLastCreated();
    gv_thiefInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/4F13C52A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_thiefInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/5A78AB72"), "Assets\\Textures\\btn-ability-protoss-stealth-blink.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/F99202C4"), "Assets\\Textures\\btn-ability-terran-cloak-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/6B17AD73"), "Assets\\Textures\\war3_pasbtncriticalstrike.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -350, 225, StringExternal("Param/Value/E062B38E"), "Assets\\Textures\\btn-unit-protoss-darktemplar-taldarim.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/F78E6B3B"), "Assets\\Textures\\btn-unit-protoss-darktemplar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/AB68D36C"), "Assets\\Textures\\agility-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_thiefInfo[18] = DialogControlLastCreated();
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[3] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[3], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemUseTransition(gv_dialogportrait[3], false, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[3], c_triggerRenderTypeLDR, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[3], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[3], "HighTemplarPortrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-hightemplar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -230, -180, StringExternal("Param/Value/B036FDA2"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_templarInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -100, StringExternal("Param/Value/2A77F1E2"), Color(100,100,100), false, 2.0);
    gv_templarInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/13E7CCC7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_templarInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/E7BE07D8"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/A2F48F4F"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/66DA0392"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/26BF5806"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/9D0C9108"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot04.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/82A523B9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_templarInfo[9] = DialogControlLastCreated();
    gv_templarInfo[10] = DialogControlLastCreated();
    gv_templarInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/70AB5035"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_templarInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/B78E1120"), "Assets\\Textures\\btn-ability-protoss-barrier-upgraded.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/C242DB33"), "Assets\\Textures\\btn-ability-protoss-protoncharge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/4898AA6D"), "Assets\\Textures\\btn-ability-protoss-blinkshieldrestore.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -350, 225, StringExternal("Param/Value/2D9CB926"), "Assets\\Textures\\btn-unit-protoss-archon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/B106E03F"), "Assets\\Textures\\btn-unit-protoss-tassadar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/EE40275B"), "Assets\\Textures\\intellect-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_templarInfo[18] = DialogControlLastCreated();
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[4] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[4], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemUseTransition(gv_dialogportrait[4], false, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[4], c_triggerRenderTypeLDR, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[4], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[4], "Preserver3Portrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-preserver02.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 225, 150, c_anchorCenter, -200, -215, StringExternal("Param/Value/55D68B65"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_beastHunterInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -100, StringExternal("Param/Value/49B62DAE"), Color(100,100,100), false, 2.0);
    gv_beastHunterInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/6D77FA3E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastHunterInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/EF5F0198"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/9E39D2DC"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/2CAB9618"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/C628B917"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/2E0CD5C1"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot04.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/AC0DDA12"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastHunterInfo[9] = DialogControlLastCreated();
    gv_beastHunterInfo[10] = DialogControlLastCreated();
    gv_beastHunterInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/012893AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_beastHunterInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/5993BE9F"), "Assets\\Textures\\btn-ability-protoss-confusion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/4D22F052"), "Assets\\Textures\\war3_btnbearform.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/37DF891D"), "Assets\\Textures\\war3_btnreddragondevour.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -350, 225, StringExternal("Param/Value/C79F0E34"), "Assets\\Textures\\btn-unit-protoss-stalker-purifier.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/FEB62A94"), "Assets\\Textures\\btn-unit-zerg-dehakaspawn.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/ACD5FF4F"), "Assets\\Textures\\agility-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_beastHunterInfo[18] = DialogControlLastCreated();
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[5] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[5], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemUseTransition(gv_dialogportrait[5], false, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[5], c_triggerRenderTypeLDR, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[5], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[5], "ShadePortrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-adept.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -215, -180, StringExternal("Param/Value/56B3E189"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_techieInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -100, StringExternal("Param/Value/2AA8AE41"), Color(100,100,100), false, 2.0);
    gv_techieInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/16BF3271"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_techieInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/4C3E4E90"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/CD7D7B74"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/99CBEF3C"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/E0BD5CBC"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/D03038C2"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot05.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/7CABA585"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_techieInfo[9] = DialogControlLastCreated();
    gv_techieInfo[10] = DialogControlLastCreated();
    gv_techieInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/AC3B8184"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_techieInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/C5083231"), "Assets\\Textures\\btn-unit-protoss-replicant.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/82EA4BB0"), "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/D0652C49"), "Assets\\Textures\\btn-ability-protoss-prismaticrange.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -350, 225, StringExternal("Param/Value/27E1E3B5"), "Assets\\Textures\\btn-unit-protoss-immortal-nerazim.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/DEE16978"), "Assets\\Textures\\btn-unit-protoss-adept-purifier.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/D828536C"), "Assets\\Textures\\intellect-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_techieInfo[18] = DialogControlLastCreated();
    DialogControlCreate(gv_menu, c_triggerControlTypePortrait);
    gv_dialogportrait[6] = DialogControlLastCreated();
    DialogControlSetSize(gv_dialogportrait[6], PlayerGroupAll(), 237, 360);
    libNtve_gf_SetDialogItemUseTransition(gv_dialogportrait[6], false, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(gv_dialogportrait[6], c_triggerRenderTypeLDR, PlayerGroupAll());
    DialogControlSetPosition(gv_dialogportrait[6], PlayerGroupAll(), c_anchorCenter, lv_portraitx, lv_portraity);
    libNtve_gf_SetDialogItemModel(gv_dialogportrait[6], "HighTemplarTaldarimPortrait", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_menu, 100, 100, c_anchorCenter, -385, -240, StringToText(""), "Assets\\Textures\\btn-unit-protoss-hightemplar-taldarim.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -220, -170, StringExternal("Param/Value/7429A4CE"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_voidmancerInfo[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 355, 175, c_anchorCenter, -225, -90, StringExternal("Param/Value/A4CE3904"), Color(100,100,100), false, 2.0);
    gv_voidmancerInfo[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 15, StringExternal("Param/Value/8DFDFD67"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_voidmancerInfo[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -390, -15, StringExternal("Param/Value/0111FEBF"), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -355, -15, StringExternal("Param/Value/62BF92A5"), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -320, -15, StringExternal("Param/Value/AE06631E"), "Assets\\Textures\\btn-ability-protoss-psytrousoxideoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -285, -15, StringExternal("Param/Value/0974C4AE"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 35, 35, c_anchorCenter, -250, -15, StringExternal("Param/Value/98837E7D"), "Assets\\Textures\\btn-border-protoss-queue-trainingslot04.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -280, 85, StringExternal("Param/Value/2DD1DF46"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_voidmancerInfo[9] = DialogControlLastCreated();
    gv_voidmancerInfo[10] = DialogControlLastCreated();
    gv_voidmancerInfo[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_menu, 200, 150, c_anchorCenter, -320, 160, StringExternal("Param/Value/0145E629"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_voidmancerInfo[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -400, 135, StringExternal("Param/Value/A35B765A"), "Assets\\Textures\\btn-ability-voidbolt.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -350, 135, StringExternal("Param/Value/EE56D045"), "Assets\\Textures\\btn-ability-protoss-disintegration.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -300, 135, StringExternal("Param/Value/04F84D93"), "Assets\\Textures\\btn-ability-voidspawn.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -360, 225, StringExternal("Param/Value/BE260188"), "Assets\\Textures\\btn-unit-protoss-hod.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 75, 75, c_anchorCenter, -280, 225, StringExternal("Param/Value/18FE2CB7"), "Assets\\Textures\\btn-unit-protoss-darkarchon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_menu, 50, 50, c_anchorCenter, -100, -230, StringExternal("Param/Value/BBD962AD"), "Assets\\Textures\\intellect-hero.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_voidmancerInfo[18] = DialogControlLastCreated();
    auto5304DCDD_ae = 18;
    auto5304DCDD_ai = 1;
    lv_start = 0;
    for ( ; ( (auto5304DCDD_ai >= 0 && lv_start <= auto5304DCDD_ae) || (auto5304DCDD_ai <= 0 && lv_start >= auto5304DCDD_ae) ) ; lv_start += auto5304DCDD_ai ) {
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupAll(), false);
    }
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateAllMenus_Init () {
    gt_CreateAllMenus = TriggerCreate("gt_CreateAllMenus_Func");
    TriggerAddEventMapInit(gt_CreateAllMenus);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Hero Dialogs
//--------------------------------------------------------------------------------------------------
bool gt_SelectHeroDialogs_Func (bool testConds, bool runActions) {
    int auto344CAEC0_ae;
    int auto344CAEC0_ai;

    // Variable Declarations
    int lv_selectionoffsetx;
    int lv_team;
    string[8] lv_rankicon;
    string[8] lv_rankborder;
    int lv_ranking;
    int lv_setrank;

    // Variable Initialization
    lv_selectionoffsetx = 1;
    lv_team = 1;
    lv_ranking = 1999;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rankicon[0] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_bronze.dds";
    lv_rankicon[1] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_silver.dds";
    lv_rankicon[2] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_gold.dds";
    lv_rankicon[3] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_diamond.dds";
    lv_rankicon[4] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_platinum.dds";
    lv_rankicon[5] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_master.dds";
    lv_rankicon[6] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_grandmaster.dds";
    lv_rankicon[7] = "Assets\\Textures\\ui_glues_icons_league_matchmaking_placement.dds";
    lv_rankborder[0] = "Assets\\Textures\\ui_multiplayerload_avatarborder_bronze.dds";
    lv_rankborder[1] = "Assets\\Textures\\ui_multiplayerload_avatarborder_silver.dds";
    lv_rankborder[2] = "Assets\\Textures\\ui_multiplayerload_avatarborder_gold.dds";
    lv_rankborder[3] = "Assets\\Textures\\ui_multiplayerload_avatarborder_diamond.dds";
    lv_rankborder[4] = "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds";
    lv_rankborder[5] = "Assets\\Textures\\ui_multiplayerload_avatarborder_master.dds";
    lv_rankborder[6] = "Assets\\Textures\\ui_multiplayerload_avatarborder_grandmaster.dds";
    lv_rankborder[7] = "Assets\\Textures\\ui_multiplayerload_avatarborder_unranked.dds";
    auto344CAEC0_ae = 12;
    auto344CAEC0_ai = 1;
    lv_team = 1;
    for ( ; ( (auto344CAEC0_ai >= 0 && lv_team <= auto344CAEC0_ae) || (auto344CAEC0_ai <= 0 && lv_team >= auto344CAEC0_ae) ) ; lv_team += auto344CAEC0_ai ) {
        DialogCreate(1750, 325, c_anchorBottom, 0, 50, true);
        gv_heroPickDialog[lv_team] = DialogLastCreated();
        DialogSetImageVisible(gv_heroPickDialog[lv_team], false);
        DialogSetVisible(gv_heroPickDialog[lv_team], GameAttributePlayersForTeam(lv_team), true);
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(lv_team));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((lv_ranking >= 1) && (lv_ranking <= 499))) {
                lv_setrank = 0;
            }
            else {
                if (((lv_ranking >= 500) && (lv_ranking <= 999))) {
                    lv_setrank = 1;
                }
                else {
                    if (((lv_ranking >= 1000) && (lv_ranking <= 1249))) {
                        lv_setrank = 2;
                    }
                    else {
                        if (((lv_ranking >= 1250) && (lv_ranking <= 1500))) {
                            lv_setrank = 3;
                        }
                        else {
                            if (((lv_ranking >= 1501) && (lv_ranking <= 1750))) {
                                lv_setrank = 4;
                            }
                            else {
                                if (((lv_ranking >= 1751) && (lv_ranking <= 2000))) {
                                    lv_setrank = 5;
                                }
                                else {
                                    lv_setrank = 6;
                                }
                            }
                        }
                    }
                }
            }
            lv_setrank = 7;
            if (((PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == 2) || (PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == 4) || (PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == 6))) {
                if ((lv_selectionoffsetx == 1)) {
                    lv_selectionoffsetx = 125;
                }
                else {
                    if ((lv_selectionoffsetx == 125)) {
                        lv_selectionoffsetx = -125;
                    }
                    else {
                        if ((lv_selectionoffsetx == -125)) {
                            lv_selectionoffsetx = 375;
                        }
                        else {
                            if ((lv_selectionoffsetx == 375)) {
                                lv_selectionoffsetx = -375;
                            }
                            else {
                                if ((lv_selectionoffsetx == -375)) {
                                    lv_selectionoffsetx = 625;
                                }
                                else {
                                    if ((lv_selectionoffsetx == 625)) {
                                        lv_selectionoffsetx = -625;
                                    }

                                }
                            }
                        }
                    }
                }
                libNtve_gf_CreateDialogItemImage(gv_heroPickDialog[lv_team], 165, 165, c_anchorCenter, lv_selectionoffsetx, 0, StringToText(""), "Assets\\Textures\\selection_random.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_currentheroselectionimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(gv_heroPickDialog[lv_team], 53, 53, c_anchorCenter, (lv_selectionoffsetx - 75), 135, StringToText(""), lv_rankicon[lv_setrank], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_heroPickDialog[lv_team], 200, 100, c_anchorCenter, (lv_selectionoffsetx + 30), 135, (StringExternal("Param/Value/20852950") + (StringExternal("Param/Value/D051E225") + (StringToText("") + StringExternal("Param/Value/5ED8DFA3")))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentheroplayermmr[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(gv_heroPickDialog[lv_team], 225, 225, c_anchorCenter, lv_selectionoffsetx, 0, StringToText(""), lv_rankborder[lv_setrank], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_heroPickDialog[lv_team], 200, 50, c_anchorCenter, lv_selectionoffsetx, -100, (StringExternal("Param/Value/8CB9D877") + (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/8D494364"))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentheroplayername = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_heroPickDialog[lv_team], 200, 50, c_anchorCenter, lv_selectionoffsetx, -70, StringExternal("Param/Value/8EE32CB8"), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentheroselectionlabel[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            }
            else {
                if ((lv_selectionoffsetx == 1)) {
                    lv_selectionoffsetx = 0;
                }
                else {
                    if ((lv_selectionoffsetx == 0)) {
                        lv_selectionoffsetx = 250;
                    }
                    else {
                        if ((lv_selectionoffsetx == 250)) {
                            lv_selectionoffsetx = -250;
                        }
                        else {
                            if ((lv_selectionoffsetx == -250)) {
                                lv_selectionoffsetx = 500;
                            }
                            else {
                                if ((lv_selectionoffsetx == 500)) {
                                    lv_selectionoffsetx = -500;
                                }

                            }
                        }
                    }
                }
                libNtve_gf_CreateDialogItemImage(gv_heroPickDialog[lv_team], 165, 165, c_anchorCenter, lv_selectionoffsetx, 0, StringToText(""), "Assets\\Textures\\selection_random.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_currentheroselectionimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(gv_heroPickDialog[lv_team], 53, 53, c_anchorCenter, (lv_selectionoffsetx - 75), 135, StringToText(""), lv_rankicon[lv_setrank], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_heroPickDialog[lv_team], 200, 100, c_anchorCenter, (lv_selectionoffsetx + 30), 135, (StringExternal("Param/Value/763F013D") + (StringExternal("Param/Value/2112443C") + (StringToText("") + StringExternal("Param/Value/B260AFD3")))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentheroplayermmr[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(gv_heroPickDialog[lv_team], 225, 225, c_anchorCenter, lv_selectionoffsetx, 0, StringToText(""), lv_rankborder[lv_setrank], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_heroPickDialog[lv_team], 200, 50, c_anchorCenter, lv_selectionoffsetx, -100, (StringExternal("Param/Value/AC986CD3") + (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/B27FD82E"))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentheroplayername = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_heroPickDialog[lv_team], 200, 50, c_anchorCenter, lv_selectionoffsetx, -70, StringExternal("Param/Value/0004EDF8"), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentheroselectionlabel[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            }
        }
        PlayerGroupLoopEnd();
        lv_selectionoffsetx = 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHeroDialogs_Init () {
    gt_SelectHeroDialogs = TriggerCreate("gt_SelectHeroDialogs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Basic Mode
//--------------------------------------------------------------------------------------------------
bool gt_VoteBasicMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_modeCheckboxes[0]))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_modeCheckboxes[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_modeCheckboxes[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[3], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[3], false, PlayerGroupSingle(EventPlayer()));
    gv_basicModeVotes = (gv_basicModeVotes + 1);
    if ((gv_currentVote[EventPlayer()] == 1)) {
        gv_standardModeVotes = (gv_standardModeVotes - 1);
        libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[1], ((StringExternal("Param/Value/3EE2DCED") + IntToText(gv_standardModeVotes)) + (StringExternal("Param/Value/267956DD") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/B9FCF18B")))), PlayerGroupAll());
    }
    else {
        if ((gv_currentVote[EventPlayer()] == 2)) {
            gv_advancedModeVotes = (gv_advancedModeVotes - 1);
            libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[2], ((StringExternal("Param/Value/ED46A5D8") + IntToText(gv_advancedModeVotes)) + (StringExternal("Param/Value/705C94BF") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/F4F77E9A")))), PlayerGroupAll());
        }
        else {
            if ((gv_currentVote[EventPlayer()] == 3)) {
                gv_hardcoreModeVotes = (gv_hardcoreModeVotes - 1);
                libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[3], ((StringExternal("Param/Value/F1C975DA") + IntToText(gv_hardcoreModeVotes)) + (StringExternal("Param/Value/D92060FE") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/624AB4B3")))), PlayerGroupAll());
            }

        }
    }
    gv_currentVote[EventPlayer()] = 0;
    libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[0], ((StringExternal("Param/Value/AD6118F9") + IntToText(gv_basicModeVotes)) + (StringExternal("Param/Value/20B72A59") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/4A40BE84")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteBasicMode_Init () {
    gt_VoteBasicMode = TriggerCreate("gt_VoteBasicMode_Func");
    TriggerAddEventDialogControl(gt_VoteBasicMode, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteBasicMode, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Standard Mode
//--------------------------------------------------------------------------------------------------
bool gt_VoteStandardMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_modeCheckboxes[1]))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_modeCheckboxes[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_modeCheckboxes[0], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[3], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[3], false, PlayerGroupSingle(EventPlayer()));
    gv_standardModeVotes = (gv_standardModeVotes + 1);
    if ((gv_currentVote[EventPlayer()] == 0)) {
        gv_basicModeVotes = (gv_basicModeVotes - 1);
        libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[0], ((StringExternal("Param/Value/1220347D") + IntToText(gv_basicModeVotes)) + (StringExternal("Param/Value/6BC4E87B") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/DF003ACD")))), PlayerGroupAll());
    }
    else {
        if ((gv_currentVote[EventPlayer()] == 2)) {
            gv_advancedModeVotes = (gv_advancedModeVotes - 1);
            libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[2], ((StringExternal("Param/Value/A820B5C4") + IntToText(gv_advancedModeVotes)) + (StringExternal("Param/Value/384FA944") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/3289F962")))), PlayerGroupAll());
        }
        else {
            if ((gv_currentVote[EventPlayer()] == 3)) {
                gv_hardcoreModeVotes = (gv_hardcoreModeVotes - 1);
                libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[3], ((StringExternal("Param/Value/AAFBCA81") + IntToText(gv_hardcoreModeVotes)) + (StringExternal("Param/Value/A1B4ABE4") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/126E286A")))), PlayerGroupAll());
            }

        }
    }
    gv_currentVote[EventPlayer()] = 1;
    libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[1], ((StringExternal("Param/Value/ECCA5699") + IntToText(gv_standardModeVotes)) + (StringExternal("Param/Value/68E4CC2E") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/0302324B")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteStandardMode_Init () {
    gt_VoteStandardMode = TriggerCreate("gt_VoteStandardMode_Func");
    TriggerAddEventDialogControl(gt_VoteStandardMode, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteStandardMode, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Advanced Mode
//--------------------------------------------------------------------------------------------------
bool gt_VoteAdvancedMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_modeCheckboxes[2]))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_modeCheckboxes[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_modeCheckboxes[0], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[3], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[3], false, PlayerGroupSingle(EventPlayer()));
    gv_advancedModeVotes = (gv_advancedModeVotes + 1);
    if ((gv_currentVote[EventPlayer()] == 0)) {
        gv_basicModeVotes = (gv_basicModeVotes - 1);
        libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[0], ((StringExternal("Param/Value/22BA0CA0") + IntToText(gv_basicModeVotes)) + (StringExternal("Param/Value/8A06A657") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/FA50705E")))), PlayerGroupAll());
    }
    else {
        if ((gv_currentVote[EventPlayer()] == 1)) {
            gv_standardModeVotes = (gv_standardModeVotes - 1);
            libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[1], ((StringExternal("Param/Value/C3BE4756") + IntToText(gv_standardModeVotes)) + (StringExternal("Param/Value/D278B2C2") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/29D1AE21")))), PlayerGroupAll());
        }
        else {
            if ((gv_currentVote[EventPlayer()] == 3)) {
                gv_hardcoreModeVotes = (gv_hardcoreModeVotes - 1);
                libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[3], ((StringExternal("Param/Value/72BCAB93") + IntToText(gv_hardcoreModeVotes)) + (StringExternal("Param/Value/870EE240") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/B55C7458")))), PlayerGroupAll());
            }

        }
    }
    gv_currentVote[EventPlayer()] = 2;
    libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[2], ((StringExternal("Param/Value/1FB1FE27") + IntToText(gv_advancedModeVotes)) + (StringExternal("Param/Value/85A41038") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/B3EC1C44")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteAdvancedMode_Init () {
    gt_VoteAdvancedMode = TriggerCreate("gt_VoteAdvancedMode_Func");
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteAdvancedMode, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Hardcore Mode
//--------------------------------------------------------------------------------------------------
bool gt_VoteHardcoreMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_modeCheckboxes[3]))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_modeCheckboxes[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_modeCheckboxes[0], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetEnabled(gv_modeCheckboxes[2], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemChecked(gv_modeCheckboxes[2], false, PlayerGroupSingle(EventPlayer()));
    gv_hardcoreModeVotes = (gv_hardcoreModeVotes + 1);
    if ((gv_currentVote[EventPlayer()] == 0)) {
        gv_basicModeVotes = (gv_basicModeVotes - 1);
        libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[0], ((StringExternal("Param/Value/1E7F84F3") + IntToText(gv_basicModeVotes)) + (StringExternal("Param/Value/FCF56740") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/F89123E2")))), PlayerGroupAll());
    }
    else {
        if ((gv_currentVote[EventPlayer()] == 1)) {
            gv_standardModeVotes = (gv_standardModeVotes - 1);
            libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[1], ((StringExternal("Param/Value/BA084738") + IntToText(gv_standardModeVotes)) + (StringExternal("Param/Value/BA5304F7") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/ADF4D779")))), PlayerGroupAll());
        }
        else {
            if ((gv_currentVote[EventPlayer()] == 2)) {
                gv_advancedModeVotes = (gv_advancedModeVotes - 1);
                libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[2], ((StringExternal("Param/Value/96D2A2B7") + IntToText(gv_advancedModeVotes)) + (StringExternal("Param/Value/FEFC9B4A") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/B4FBCB76")))), PlayerGroupAll());
            }

        }
    }
    gv_currentVote[EventPlayer()] = 3;
    libNtve_gf_SetDialogItemText(gv_modeCheckboxTotal[3], ((StringExternal("Param/Value/B0480BB1") + IntToText(gv_hardcoreModeVotes)) + (StringExternal("Param/Value/79F323A3") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/FD4BE5A9")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteHardcoreMode_Init () {
    gt_VoteHardcoreMode = TriggerCreate("gt_VoteHardcoreMode_Func");
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VoteHardcoreMode, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Enabled
//--------------------------------------------------------------------------------------------------
bool gt_VictoryEnabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryEnabledCheckbox))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryEnabled = (gv_victoryEnabled + 1);
    libNtve_gf_SetDialogItemText(gv_victoryVoteTotal, ((StringExternal("Param/Value/4A9E0D85") + IntToText(gv_victoryEnabled)) + (StringExternal("Param/Value/98DF5826") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/CD891312")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryEnabled_Init () {
    gt_VictoryEnabled = TriggerCreate("gt_VictoryEnabled_Func");
    TriggerAddEventDialogControl(gt_VictoryEnabled, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryEnabled, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Disabled
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDisabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_victoryEnabledCheckbox))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryEnabled = (gv_victoryEnabled - 1);
    libNtve_gf_SetDialogItemText(gv_victoryVoteTotal, ((StringExternal("Param/Value/9E8661F0") + IntToText(gv_victoryEnabled)) + (StringExternal("Param/Value/B8580A20") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/D959679C")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDisabled_Init () {
    gt_VictoryDisabled = TriggerCreate("gt_VictoryDisabled_Func");
    TriggerAddEventDialogControl(gt_VictoryDisabled, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_VictoryDisabled, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Ships Enabled
//--------------------------------------------------------------------------------------------------
bool gt_AirShipsEnabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_airShipsEnabledCheckbox))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_airShipsEnabled = (gv_airShipsEnabled + 1);
    libNtve_gf_SetDialogItemText(gv_airShipsVoteTotal, ((StringExternal("Param/Value/7944AE10") + IntToText(gv_airShipsEnabled)) + (StringExternal("Param/Value/ED3CC386") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/8654E380")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirShipsEnabled_Init () {
    gt_AirShipsEnabled = TriggerCreate("gt_AirShipsEnabled_Func");
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsEnabled, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Ships Disabled
//--------------------------------------------------------------------------------------------------
bool gt_AirShipsDisabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_airShipsEnabledCheckbox))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_airShipsEnabled = (gv_airShipsEnabled - 1);
    libNtve_gf_SetDialogItemText(gv_airShipsVoteTotal, ((StringExternal("Param/Value/A9897640") + IntToText(gv_airShipsEnabled)) + (StringExternal("Param/Value/054F2FE1") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/BDF7DFA7")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirShipsDisabled_Init () {
    gt_AirShipsDisabled = TriggerCreate("gt_AirShipsDisabled_Func");
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AirShipsDisabled, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Accelerated Mode Enabled
//--------------------------------------------------------------------------------------------------
bool gt_AcceleratedModeEnabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_acceleratedModeEnabledCheckbox))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_acceleratedMode = (gv_acceleratedMode + 1);
    libNtve_gf_SetDialogItemText(gv_acceleratedModeTotal, ((StringExternal("Param/Value/B12A3098") + IntToText(gv_acceleratedMode)) + (StringExternal("Param/Value/2B361DBC") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/4FF25F91")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcceleratedModeEnabled_Init () {
    gt_AcceleratedModeEnabled = TriggerCreate("gt_AcceleratedModeEnabled_Func");
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeEnabled, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Accelerated Mode Disabled
//--------------------------------------------------------------------------------------------------
bool gt_AcceleratedModeDisabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_acceleratedModeEnabledCheckbox))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_acceleratedMode = (gv_acceleratedMode - 1);
    libNtve_gf_SetDialogItemText(gv_acceleratedModeTotal, ((StringExternal("Param/Value/109610E0") + IntToText(gv_acceleratedMode)) + (StringExternal("Param/Value/004809FD") + (IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/D19075EE")))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcceleratedModeDisabled_Init () {
    gt_AcceleratedModeDisabled = TriggerCreate("gt_AcceleratedModeDisabled_Func");
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 2, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 3, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 4, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 5, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 6, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 7, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 8, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 9, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 10, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 11, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 12, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 13, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 14, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(gt_AcceleratedModeDisabled, 15, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Fish
//--------------------------------------------------------------------------------------------------
bool gt_SpawnFish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_fishrandom;
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fishrandom = RandomInt(0, 51);
    if ((UnitGroupCount(UnitGroup("SCV", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    }
    else {
        if ((UnitGroupCount(UnitGroup("Crabeetle", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (GameGetMissionTime() > 360.0)) {
            lv_rng = RandomInt(1, 25);
            if (((lv_rng >= 1) && (lv_rng <= 7))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
            }
            else {
                if ((lv_rng == 20)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
                }

            }
        }

    }
    lv_fishrandom = RandomInt(0, 51);
    if ((UnitGroupCount(UnitGroup("SCV", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    }
    else {
        if ((UnitGroupCount(UnitGroup("Crabeetle", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (GameGetMissionTime() > 360.0)) {
            lv_rng = RandomInt(1, 25);
            if (((lv_rng >= 1) && (lv_rng <= 7))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
            }
            else {
                if ((lv_rng == 20)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
                }

            }
        }

    }
    lv_fishrandom = RandomInt(0, 51);
    if ((UnitGroupCount(UnitGroup("SCV", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    }
    else {
        if ((UnitGroupCount(UnitGroup("Crabeetle", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (GameGetMissionTime() > 360.0)) {
            lv_rng = RandomInt(1, 25);
            if (((lv_rng >= 1) && (lv_rng <= 7))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
            }
            else {
                if ((lv_rng == 20)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
                }

            }
        }

    }
    lv_fishrandom = RandomInt(0, 51);
    if ((UnitGroupCount(UnitGroup("SCV", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    }
    else {
        if ((UnitGroupCount(UnitGroup("Crabeetle", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (GameGetMissionTime() > 360.0)) {
            lv_rng = RandomInt(1, 25);
            if (((lv_rng >= 1) && (lv_rng <= 7))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
            }
            else {
                if ((lv_rng == 20)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
                }

            }
        }

    }
    lv_fishrandom = RandomInt(0, 51);
    if ((UnitGroupCount(UnitGroup("SCV", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, 15, RegionGetCenter(gv_fishPools[lv_fishrandom]));
    }
    else {
        if ((UnitGroupCount(UnitGroup("Crabeetle", 15, gv_fishPools[lv_fishrandom], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (GameGetMissionTime() > 360.0)) {
            lv_rng = RandomInt(1, 25);
            if (((lv_rng >= 1) && (lv_rng <= 7))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
            }
            else {
                if ((lv_rng == 20)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(2, "Crabeetle", 0, 15, RegionRandomPoint(gv_fishPools[lv_fishrandom]));
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnFish_Init () {
    gt_SpawnFish = TriggerCreate("gt_SpawnFish_Func");
    TriggerAddEventTimePeriodic(gt_SpawnFish, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Initial Items & Beasts
//--------------------------------------------------------------------------------------------------
bool gt_BasicInitialItemsBeasts_Func (bool testConds, bool runActions) {
    int auto882C2B87_ae;
    int auto882C2B87_ai;
    int auto56DAC6C6_ae;
    int auto56DAC6C6_ai;
    int auto30907847_ae;
    int auto30907847_ai;
    int autoCE4241FB_ae;
    int autoCE4241FB_ai;
    int auto71EA31A3_ae;
    int auto71EA31A3_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    int lv_counter;
    int lv_instanceCounter;
    region[4] lv_region;
    point lv_karakSpawnPoint;

    // Variable Initialization
    lv_counter = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    auto882C2B87_ae = 3;
    auto882C2B87_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (auto882C2B87_ai >= 0 && lv_regionCounter <= auto882C2B87_ae) || (auto882C2B87_ai <= 0 && lv_regionCounter >= auto882C2B87_ae) ) ; lv_regionCounter += auto882C2B87_ai ) {
        auto56DAC6C6_ae = 7;
        auto56DAC6C6_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto56DAC6C6_ai >= 0 && lv_counter <= auto56DAC6C6_ae) || (auto56DAC6C6_ai <= 0 && lv_counter >= auto56DAC6C6_ae) ) ; lv_counter += auto56DAC6C6_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Emberthorn", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingDust", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mineral", 0, 0, lv_tempItemSpawnRegion);
        }
        auto30907847_ae = 6;
        auto30907847_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto30907847_ai >= 0 && lv_counter <= auto30907847_ae) || (auto30907847_ai <= 0 && lv_counter >= auto30907847_ae) ) ; lv_counter += auto30907847_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Rock", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Relic", 0, 0, lv_tempItemSpawnRegion);
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    lv_instanceCounter = 0;
    lv_counter = 0;
    autoCE4241FB_ae = 3;
    autoCE4241FB_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (autoCE4241FB_ai >= 0 && lv_regionCounter <= autoCE4241FB_ae) || (autoCE4241FB_ai <= 0 && lv_regionCounter >= autoCE4241FB_ae) ) ; lv_regionCounter += autoCE4241FB_ai ) {
        auto71EA31A3_ae = 14;
        auto71EA31A3_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto71EA31A3_ai >= 0 && lv_counter <= auto71EA31A3_ae) || (auto71EA31A3_ai <= 0 && lv_counter >= auto71EA31A3_ae) ) ; lv_counter += auto71EA31A3_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && (lv_instanceCounter == 1)) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup("KarakMale", c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, lv_karakSpawnPoint);
            }
            else {
                while ((UnitGroupCount(UnitGroup("KarakMale", c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, lv_karakSpawnPoint);
            }
            lv_karakSpawnPoint = null;
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicInitialItemsBeasts_Init () {
    gt_BasicInitialItemsBeasts = TriggerCreate("gt_BasicInitialItemsBeasts_Func");
    TriggerEnable(gt_BasicInitialItemsBeasts, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Standard Initial Items & Beasts
//--------------------------------------------------------------------------------------------------
bool gt_StandardInitialItemsBeasts_Func (bool testConds, bool runActions) {
    int auto2C45E891_ae;
    int auto2C45E891_ai;
    int auto58207110_ae;
    int auto58207110_ai;
    int auto71BF3046_ae;
    int auto71BF3046_ai;
    int autoE203B92A_ae;
    int autoE203B92A_ai;
    int auto6A2B0DC5_ae;
    int auto6A2B0DC5_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    int lv_counter;
    int lv_instanceCounter;
    region[4] lv_region;
    point lv_karakSpawnPoint;

    // Variable Initialization
    lv_counter = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    auto2C45E891_ae = 3;
    auto2C45E891_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (auto2C45E891_ai >= 0 && lv_regionCounter <= auto2C45E891_ae) || (auto2C45E891_ai <= 0 && lv_regionCounter >= auto2C45E891_ae) ) ; lv_regionCounter += auto2C45E891_ai ) {
        auto58207110_ae = 5;
        auto58207110_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto58207110_ai >= 0 && lv_counter <= auto58207110_ae) || (auto58207110_ai <= 0 && lv_counter >= auto58207110_ae) ) ; lv_counter += auto58207110_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Emberthorn", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingDust", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mineral", 0, 0, lv_tempItemSpawnRegion);
        }
        auto71BF3046_ae = 4;
        auto71BF3046_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto71BF3046_ai >= 0 && lv_counter <= auto71BF3046_ae) || (auto71BF3046_ai <= 0 && lv_counter >= auto71BF3046_ae) ) ; lv_counter += auto71BF3046_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Rock", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Relic", 0, 0, lv_tempItemSpawnRegion);
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    lv_instanceCounter = 0;
    lv_counter = 0;
    autoE203B92A_ae = 3;
    autoE203B92A_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (autoE203B92A_ai >= 0 && lv_regionCounter <= autoE203B92A_ae) || (autoE203B92A_ai <= 0 && lv_regionCounter >= autoE203B92A_ae) ) ; lv_regionCounter += autoE203B92A_ai ) {
        auto6A2B0DC5_ae = 12;
        auto6A2B0DC5_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto6A2B0DC5_ai >= 0 && lv_counter <= auto6A2B0DC5_ae) || (auto6A2B0DC5_ai <= 0 && lv_counter >= auto6A2B0DC5_ae) ) ; lv_counter += auto6A2B0DC5_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && (lv_instanceCounter == 1)) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup("KarakMale", c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, lv_karakSpawnPoint);
            }
            else {
                while ((UnitGroupCount(UnitGroup("KarakMale", c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, lv_karakSpawnPoint);
            }
            lv_karakSpawnPoint = null;
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StandardInitialItemsBeasts_Init () {
    gt_StandardInitialItemsBeasts = TriggerCreate("gt_StandardInitialItemsBeasts_Func");
    TriggerEnable(gt_StandardInitialItemsBeasts, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hardcore Initial Items & Beasts
//--------------------------------------------------------------------------------------------------
bool gt_HardcoreInitialItemsBeasts_Func (bool testConds, bool runActions) {
    int auto31EEEA9C_ae;
    int auto31EEEA9C_ai;
    int auto5BE9D4D1_ae;
    int auto5BE9D4D1_ai;
    int auto95AD3718_ae;
    int auto95AD3718_ai;
    int auto85DE28B0_ae;
    int auto85DE28B0_ai;
    int auto7C6619DB_ae;
    int auto7C6619DB_ai;
    int auto3940E3A3_ae;
    int auto3940E3A3_ai;
    int auto31B15DA7_ae;
    int auto31B15DA7_ai;
    int auto54B66E38_ae;
    int auto54B66E38_ai;
    int auto966AC2EA_ae;
    int auto966AC2EA_ai;
    int autoC56BD5E2_ae;
    int autoC56BD5E2_ai;
    int auto7F379084_ae;
    int auto7F379084_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    int lv_counter;
    int lv_instanceCounter;
    region[4] lv_region;
    point lv_karakSpawnPoint;

    // Variable Initialization
    lv_counter = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    auto31EEEA9C_ae = 3;
    auto31EEEA9C_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (auto31EEEA9C_ai >= 0 && lv_regionCounter <= auto31EEEA9C_ae) || (auto31EEEA9C_ai <= 0 && lv_regionCounter >= auto31EEEA9C_ae) ) ; lv_regionCounter += auto31EEEA9C_ai ) {
        auto5BE9D4D1_ae = 3;
        auto5BE9D4D1_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto5BE9D4D1_ai >= 0 && lv_counter <= auto5BE9D4D1_ae) || (auto5BE9D4D1_ai <= 0 && lv_counter >= auto5BE9D4D1_ae) ) ; lv_counter += auto5BE9D4D1_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Emberthorn", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingDust", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mineral", 0, 0, lv_tempItemSpawnRegion);
        }
        auto95AD3718_ae = 2;
        auto95AD3718_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto95AD3718_ai >= 0 && lv_counter <= auto95AD3718_ae) || (auto95AD3718_ai <= 0 && lv_counter >= auto95AD3718_ae) ) ; lv_counter += auto95AD3718_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Rock", 0, 0, lv_tempItemSpawnRegion);
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && ((lv_instanceCounter == 1) || (lv_instanceCounter == 3))) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                lv_nearbyItem = true;
            }
            else {
                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                    lv_nearbyItem = true;
                }
                else {
                    lv_nearbyItem = false;
                }
            }
            while ((lv_nearbyItem == true)) {
                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Relic", 0, 0, lv_tempItemSpawnRegion);
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    lv_instanceCounter = 0;
    lv_counter = 0;
    auto85DE28B0_ae = 3;
    auto85DE28B0_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (auto85DE28B0_ai >= 0 && lv_regionCounter <= auto85DE28B0_ae) || (auto85DE28B0_ai <= 0 && lv_regionCounter >= auto85DE28B0_ae) ) ; lv_regionCounter += auto85DE28B0_ai ) {
        auto7C6619DB_ae = 6;
        auto7C6619DB_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto7C6619DB_ai >= 0 && lv_counter <= auto7C6619DB_ae) || (auto7C6619DB_ai <= 0 && lv_counter >= auto7C6619DB_ae) ) ; lv_counter += auto7C6619DB_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && (lv_instanceCounter == 1)) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
            if ((UnitGroupCount(UnitGroup("KarakMale", c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, lv_karakSpawnPoint);
            }
            else {
                while ((UnitGroupCount(UnitGroup("KarakMale", c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, lv_karakSpawnPoint);
            }
            lv_karakSpawnPoint = null;
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    auto3940E3A3_ae = 3;
    auto3940E3A3_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (auto3940E3A3_ai >= 0 && lv_regionCounter <= auto3940E3A3_ae) || (auto3940E3A3_ai <= 0 && lv_regionCounter >= auto3940E3A3_ae) ) ; lv_regionCounter += auto3940E3A3_ai ) {
        auto31B15DA7_ae = 5;
        auto31B15DA7_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto31B15DA7_ai >= 0 && lv_counter <= auto31B15DA7_ae) || (auto31B15DA7_ai <= 0 && lv_counter >= auto31B15DA7_ae) ) ; lv_counter += auto31B15DA7_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && (lv_instanceCounter == 1)) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Lyote", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
            UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    auto54B66E38_ae = 3;
    auto54B66E38_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (auto54B66E38_ai >= 0 && lv_regionCounter <= auto54B66E38_ae) || (auto54B66E38_ai <= 0 && lv_regionCounter >= auto54B66E38_ae) ) ; lv_regionCounter += auto54B66E38_ai ) {
        auto966AC2EA_ae = 4;
        auto966AC2EA_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto966AC2EA_ai >= 0 && lv_counter <= auto966AC2EA_ae) || (auto966AC2EA_ai <= 0 && lv_counter >= auto966AC2EA_ae) ) ; lv_counter += auto966AC2EA_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && (lv_instanceCounter == 1)) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
            UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    autoC56BD5E2_ae = 3;
    autoC56BD5E2_ai = 1;
    lv_regionCounter = 0;
    for ( ; ( (autoC56BD5E2_ai >= 0 && lv_regionCounter <= autoC56BD5E2_ae) || (autoC56BD5E2_ai <= 0 && lv_regionCounter >= autoC56BD5E2_ae) ) ; lv_regionCounter += autoC56BD5E2_ai ) {
        auto7F379084_ae = 2;
        auto7F379084_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto7F379084_ai >= 0 && lv_counter <= auto7F379084_ae) || (auto7F379084_ai <= 0 && lv_counter >= auto7F379084_ae) ) ; lv_counter += auto7F379084_ai ) {
            if (((RandomInt(1, 2) >= 1) && (RandomInt(1, 2) <= 1)) && (lv_instanceCounter == 1)) {
                lv_region[1] = RegionFromId(38);
            }
            else {
                lv_region[1] = RegionFromId(39);
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
            UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
        }
        lv_instanceCounter = (lv_instanceCounter + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HardcoreInitialItemsBeasts_Init () {
    gt_HardcoreInitialItemsBeasts = TriggerCreate("gt_HardcoreInitialItemsBeasts_Func");
    TriggerEnable(gt_HardcoreInitialItemsBeasts, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Standard Beast Spawn
//--------------------------------------------------------------------------------------------------
bool gt_StandardBeastSpawn_Func (bool testConds, bool runActions) {
    int auto3FB8CD73_ae;
    int auto3FB8CD73_ai;
    int auto34625839_ae;
    int auto34625839_ai;
    int auto0B272D00_ae;
    int auto0B272D00_ai;
    int autoBD4877DB_ae;
    int autoBD4877DB_ai;
    int auto90B481D4_ae;
    int auto90B481D4_ai;
    int auto65EB131F_ae;
    int auto65EB131F_ai;

    // Variable Declarations
    int lv_regionCounter;
    region[4] lv_region;
    int lv_beastCounter;
    int lv_randomBeastGenerator;
    string[7] lv_beast;
    int lv_instanceCounter;
    point lv_karakSpawnPoint;

    // Variable Initialization
    lv_beastCounter = 1;
    lv_randomBeastGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_beast[0] = "KarakMale";
    lv_beast[1] = "Mutalisk";
    lv_beast[2] = "Lyote";
    lv_beast[3] = "SpaceCowSmall";
    lv_beast[4] = "Lurker";
    lv_beast[5] = "Predator";
    if ((GameGetMissionTime() <= 360.0)) {
        auto90B481D4_ae = 3;
        auto90B481D4_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (auto90B481D4_ai >= 0 && lv_regionCounter <= auto90B481D4_ae) || (auto90B481D4_ai <= 0 && lv_regionCounter >= auto90B481D4_ae) ) ; lv_regionCounter += auto90B481D4_ai ) {
            auto65EB131F_ae = 2;
            auto65EB131F_ai = 1;
            lv_beastCounter = 1;
            for ( ; ( (auto65EB131F_ai >= 0 && lv_beastCounter <= auto65EB131F_ae) || (auto65EB131F_ai <= 0 && lv_beastCounter >= auto65EB131F_ae) ) ; lv_beastCounter += auto65EB131F_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomBeastGenerator = RandomInt(1, 100);
                if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 65))) {
                    lv_randomBeastGenerator = 0;
                }

                if (((lv_randomBeastGenerator >= 66) && (lv_randomBeastGenerator <= 100))) {
                    lv_randomBeastGenerator = 1;
                }

                if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                    }
                    else {
                        while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                        }
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                    }
                    lv_karakSpawnPoint = null;
                }
                else {
                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10) && (lv_randomBeastGenerator != 0) && (lv_randomBeastGenerator != 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                    }

                }
            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 360.0) && (GameGetMissionTime() <= 1800.0)) {
            auto0B272D00_ae = 3;
            auto0B272D00_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (auto0B272D00_ai >= 0 && lv_regionCounter <= auto0B272D00_ae) || (auto0B272D00_ai <= 0 && lv_regionCounter >= auto0B272D00_ae) ) ; lv_regionCounter += auto0B272D00_ai ) {
                autoBD4877DB_ae = 2;
                autoBD4877DB_ai = 1;
                lv_beastCounter = 1;
                for ( ; ( (autoBD4877DB_ai >= 0 && lv_beastCounter <= autoBD4877DB_ae) || (autoBD4877DB_ai <= 0 && lv_beastCounter >= autoBD4877DB_ae) ) ; lv_beastCounter += autoBD4877DB_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomBeastGenerator = RandomInt(1, 100);
                    if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 55))) {
                        lv_randomBeastGenerator = 0;
                    }

                    if (((lv_randomBeastGenerator >= 56) && (lv_randomBeastGenerator <= 80))) {
                        lv_randomBeastGenerator = 1;
                    }

                    if (((lv_randomBeastGenerator >= 81) && (lv_randomBeastGenerator <= 90))) {
                        lv_randomBeastGenerator = 2;
                    }

                    if (((lv_randomBeastGenerator >= 91) && (lv_randomBeastGenerator <= 95))) {
                        lv_randomBeastGenerator = 3;
                    }

                    if (((lv_randomBeastGenerator >= 96) && (lv_randomBeastGenerator <= 100))) {
                        lv_randomBeastGenerator = 4;
                    }

                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                        lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                        }
                        else {
                            while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                            }
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                        }
                        lv_karakSpawnPoint = null;
                    }
                    else {
                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                        }
                        else {
                            if ((UnitGroupCount(UnitGroup("KarakMale", 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup("KarakMale", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                            }

                        }
                    }
                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 1800.0)) {
                auto3FB8CD73_ae = 3;
                auto3FB8CD73_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (auto3FB8CD73_ai >= 0 && lv_regionCounter <= auto3FB8CD73_ae) || (auto3FB8CD73_ai <= 0 && lv_regionCounter >= auto3FB8CD73_ae) ) ; lv_regionCounter += auto3FB8CD73_ai ) {
                    auto34625839_ae = 2;
                    auto34625839_ai = 1;
                    lv_beastCounter = 1;
                    for ( ; ( (auto34625839_ai >= 0 && lv_beastCounter <= auto34625839_ae) || (auto34625839_ai <= 0 && lv_beastCounter >= auto34625839_ae) ) ; lv_beastCounter += auto34625839_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomBeastGenerator = RandomInt(1, 100);
                        if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 45))) {
                            lv_randomBeastGenerator = 0;
                        }

                        if (((lv_randomBeastGenerator >= 46) && (lv_randomBeastGenerator <= 65))) {
                            lv_randomBeastGenerator = 1;
                        }

                        if (((lv_randomBeastGenerator >= 66) && (lv_randomBeastGenerator <= 82))) {
                            lv_randomBeastGenerator = 2;
                        }

                        if (((lv_randomBeastGenerator >= 83) && (lv_randomBeastGenerator <= 92))) {
                            lv_randomBeastGenerator = 3;
                        }

                        if (((lv_randomBeastGenerator >= 93) && (lv_randomBeastGenerator <= 97))) {
                            lv_randomBeastGenerator = 4;
                        }

                        if (((lv_randomBeastGenerator >= 98) && (lv_randomBeastGenerator <= 100))) {
                            lv_randomBeastGenerator = 5;
                        }

                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                            }
                            else {
                                while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                                }
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                            }
                            lv_karakSpawnPoint = null;
                        }
                        else {
                            if (((lv_randomBeastGenerator == 4) || (lv_randomBeastGenerator == 5)) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3)) {
                                if (((lv_region[lv_regionCounter] == RegionFromId(39)) || (lv_region[lv_regionCounter] == RegionFromId(38)))) {
                                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    }
                                    else {
                                        if ((UnitGroupCount(UnitGroup("KarakMale", 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup("KarakMale", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
                                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                        }

                                    }
                                }
                                else {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                }
                            }
                            else {
                                if ((lv_randomBeastGenerator != 4) && (lv_randomBeastGenerator != 5) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10)) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                }
                                else {
                                    if ((UnitGroupCount(UnitGroup("KarakMale", 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup("KarakMale", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    }

                                }
                            }
                        }
                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StandardBeastSpawn_Init () {
    gt_StandardBeastSpawn = TriggerCreate("gt_StandardBeastSpawn_Func");
    TriggerEnable(gt_StandardBeastSpawn, false);
    TriggerAddEventTimePeriodic(gt_StandardBeastSpawn, 360.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advance Beast Spawn
//--------------------------------------------------------------------------------------------------
bool gt_AdvanceBeastSpawn_Func (bool testConds, bool runActions) {
    int auto4E7FBFBE_ae;
    int auto4E7FBFBE_ai;
    int auto360463D8_ae;
    int auto360463D8_ai;
    int autoD3D36E1A_ae;
    int autoD3D36E1A_ai;
    int autoCB0A5133_ae;
    int autoCB0A5133_ai;
    int autoDF93B94D_ae;
    int autoDF93B94D_ai;
    int auto9EB399AD_ae;
    int auto9EB399AD_ai;

    // Variable Declarations
    int lv_regionCounter;
    region[4] lv_region;
    int lv_beastCounter;
    int lv_randomBeastGenerator;
    string[7] lv_beast;
    int lv_instanceCounter;
    point lv_karakSpawnPoint;

    // Variable Initialization
    lv_beastCounter = 1;
    lv_randomBeastGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_beast[0] = "KarakMale";
    lv_beast[1] = "Mutalisk";
    lv_beast[2] = "Lyote";
    lv_beast[3] = "SpaceCowSmall";
    lv_beast[4] = "Lurker";
    lv_beast[5] = "Predator";
    if ((GameGetMissionTime() <= 360.0)) {
        autoDF93B94D_ae = 3;
        autoDF93B94D_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (autoDF93B94D_ai >= 0 && lv_regionCounter <= autoDF93B94D_ae) || (autoDF93B94D_ai <= 0 && lv_regionCounter >= autoDF93B94D_ae) ) ; lv_regionCounter += autoDF93B94D_ai ) {
            auto9EB399AD_ae = 2;
            auto9EB399AD_ai = 1;
            lv_beastCounter = 1;
            for ( ; ( (auto9EB399AD_ai >= 0 && lv_beastCounter <= auto9EB399AD_ae) || (auto9EB399AD_ai <= 0 && lv_beastCounter >= auto9EB399AD_ae) ) ; lv_beastCounter += auto9EB399AD_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomBeastGenerator = RandomInt(1, 100);
                if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 65))) {
                    lv_randomBeastGenerator = 0;
                }

                if (((lv_randomBeastGenerator >= 66) && (lv_randomBeastGenerator <= 100))) {
                    lv_randomBeastGenerator = 1;
                }

                if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 15) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 60) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                    }
                    else {
                        while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                        }
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                    }
                    lv_karakSpawnPoint = null;
                }
                else {
                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                        UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy2", UnitLastCreated(), 1);
                    }

                }
            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 360.0) && (GameGetMissionTime() <= 660.0)) {
            autoD3D36E1A_ae = 3;
            autoD3D36E1A_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (autoD3D36E1A_ai >= 0 && lv_regionCounter <= autoD3D36E1A_ae) || (autoD3D36E1A_ai <= 0 && lv_regionCounter >= autoD3D36E1A_ae) ) ; lv_regionCounter += autoD3D36E1A_ai ) {
                autoCB0A5133_ae = 2;
                autoCB0A5133_ai = 1;
                lv_beastCounter = 1;
                for ( ; ( (autoCB0A5133_ai >= 0 && lv_beastCounter <= autoCB0A5133_ae) || (autoCB0A5133_ai <= 0 && lv_beastCounter >= autoCB0A5133_ae) ) ; lv_beastCounter += autoCB0A5133_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomBeastGenerator = RandomInt(1, 100);
                    if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 55))) {
                        lv_randomBeastGenerator = 0;
                    }

                    if (((lv_randomBeastGenerator >= 56) && (lv_randomBeastGenerator <= 80))) {
                        lv_randomBeastGenerator = 1;
                    }

                    if (((lv_randomBeastGenerator >= 81) && (lv_randomBeastGenerator <= 90))) {
                        lv_randomBeastGenerator = 2;
                    }

                    if (((lv_randomBeastGenerator >= 91) && (lv_randomBeastGenerator <= 95))) {
                        lv_randomBeastGenerator = 3;
                    }

                    if (((lv_randomBeastGenerator >= 96) && (lv_randomBeastGenerator <= 100))) {
                        lv_randomBeastGenerator = 4;
                    }

                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 15) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 60) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                        lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                        }
                        else {
                            while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                            }
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                        }
                        lv_karakSpawnPoint = null;
                    }
                    else {
                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                            UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy2", UnitLastCreated(), 1);
                        }
                        else {
                            if ((UnitGroupCount(UnitGroup("KarakMale", 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup("KarakMale", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                            }

                        }
                    }
                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 660.0)) {
                auto4E7FBFBE_ae = 3;
                auto4E7FBFBE_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (auto4E7FBFBE_ai >= 0 && lv_regionCounter <= auto4E7FBFBE_ae) || (auto4E7FBFBE_ai <= 0 && lv_regionCounter >= auto4E7FBFBE_ae) ) ; lv_regionCounter += auto4E7FBFBE_ai ) {
                    auto360463D8_ae = 2;
                    auto360463D8_ai = 1;
                    lv_beastCounter = 1;
                    for ( ; ( (auto360463D8_ai >= 0 && lv_beastCounter <= auto360463D8_ae) || (auto360463D8_ai <= 0 && lv_beastCounter >= auto360463D8_ae) ) ; lv_beastCounter += auto360463D8_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomBeastGenerator = RandomInt(1, 100);
                        if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 45))) {
                            lv_randomBeastGenerator = 0;
                        }

                        if (((lv_randomBeastGenerator >= 46) && (lv_randomBeastGenerator <= 65))) {
                            lv_randomBeastGenerator = 1;
                        }

                        if (((lv_randomBeastGenerator >= 66) && (lv_randomBeastGenerator <= 82))) {
                            lv_randomBeastGenerator = 2;
                        }

                        if (((lv_randomBeastGenerator >= 83) && (lv_randomBeastGenerator <= 92))) {
                            lv_randomBeastGenerator = 3;
                        }

                        if (((lv_randomBeastGenerator >= 93) && (lv_randomBeastGenerator <= 97))) {
                            lv_randomBeastGenerator = 4;
                        }

                        if (((lv_randomBeastGenerator >= 98) && (lv_randomBeastGenerator <= 100))) {
                            lv_randomBeastGenerator = 5;
                        }

                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 15) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 60) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                            }
                            else {
                                while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 11.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                                }
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                            }
                            lv_karakSpawnPoint = null;
                        }
                        else {
                            if (((lv_randomBeastGenerator == 4) || (lv_randomBeastGenerator == 5)) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 3)) {
                                if (((lv_region[lv_regionCounter] == RegionFromId(39)) || (lv_region[lv_regionCounter] == RegionFromId(38)))) {
                                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                        UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy2", UnitLastCreated(), 1);
                                    }
                                    else {
                                        if ((UnitGroupCount(UnitGroup("KarakMale", 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup("KarakMale", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
                                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                        }

                                    }
                                }
                                else {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy2", UnitLastCreated(), 1);
                                }
                            }
                            else {
                                if ((lv_randomBeastGenerator != 4) && (lv_randomBeastGenerator != 5) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10)) {
                                    if ((lv_randomBeastGenerator == 0)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    }
                                    else {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                        UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy2", UnitLastCreated(), 1);
                                    }
                                }
                                else {
                                    if ((UnitGroupCount(UnitGroup("KarakMale", 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20) && (UnitGroupCount(UnitGroup("KarakMale", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 80)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KarakMale", 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    }

                                }
                            }
                        }
                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdvanceBeastSpawn_Init () {
    gt_AdvanceBeastSpawn = TriggerCreate("gt_AdvanceBeastSpawn_Func");
    TriggerEnable(gt_AdvanceBeastSpawn, false);
    TriggerAddEventTimePeriodic(gt_AdvanceBeastSpawn, 360.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hardcore Beast Spawn
//--------------------------------------------------------------------------------------------------
bool gt_HardcoreBeastSpawn_Func (bool testConds, bool runActions) {
    int auto59D0048A_ae;
    int auto59D0048A_ai;
    int auto77815173_ae;
    int auto77815173_ai;
    int autoBB69004B_ae;
    int autoBB69004B_ai;
    int autoC1B5F4B2_ae;
    int autoC1B5F4B2_ai;
    int auto71D07451_ae;
    int auto71D07451_ai;
    int autoDE234893_ae;
    int autoDE234893_ai;

    // Variable Declarations
    int lv_regionCounter;
    region[4] lv_region;
    int lv_beastCounter;
    int lv_randomBeastGenerator;
    string[7] lv_beast;
    int lv_instanceCounter;
    point lv_karakSpawnPoint;

    // Variable Initialization
    lv_beastCounter = 1;
    lv_randomBeastGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_beast[0] = "KarakMale";
    lv_beast[1] = "Mutalisk";
    lv_beast[2] = "Lyote";
    lv_beast[3] = "SpaceCowSmall";
    lv_beast[4] = "Lurker";
    lv_beast[5] = "Predator";
    if ((GameGetMissionTime() <= 360.0)) {
        auto71D07451_ae = 3;
        auto71D07451_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (auto71D07451_ai >= 0 && lv_regionCounter <= auto71D07451_ae) || (auto71D07451_ai <= 0 && lv_regionCounter >= auto71D07451_ae) ) ; lv_regionCounter += auto71D07451_ai ) {
            autoDE234893_ae = 2;
            autoDE234893_ai = 1;
            lv_beastCounter = 1;
            for ( ; ( (autoDE234893_ai >= 0 && lv_beastCounter <= autoDE234893_ae) || (autoDE234893_ai <= 0 && lv_beastCounter >= autoDE234893_ae) ) ; lv_beastCounter += autoDE234893_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomBeastGenerator = RandomInt(1, 100);
                if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 65))) {
                    lv_randomBeastGenerator = 0;
                }

                if (((lv_randomBeastGenerator >= 66) && (lv_randomBeastGenerator <= 100))) {
                    lv_randomBeastGenerator = 1;
                }

                if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 40) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                    }
                    else {
                        while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                        }
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                    }
                    lv_karakSpawnPoint = null;
                }
                else {
                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                        UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
                    }

                }
            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 360.0) && (GameGetMissionTime() <= 900.0)) {
            autoBB69004B_ae = 3;
            autoBB69004B_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (autoBB69004B_ai >= 0 && lv_regionCounter <= autoBB69004B_ae) || (autoBB69004B_ai <= 0 && lv_regionCounter >= autoBB69004B_ae) ) ; lv_regionCounter += autoBB69004B_ai ) {
                autoC1B5F4B2_ae = 2;
                autoC1B5F4B2_ai = 1;
                lv_beastCounter = 1;
                for ( ; ( (autoC1B5F4B2_ai >= 0 && lv_beastCounter <= autoC1B5F4B2_ae) || (autoC1B5F4B2_ai <= 0 && lv_beastCounter >= autoC1B5F4B2_ae) ) ; lv_beastCounter += autoC1B5F4B2_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomBeastGenerator = RandomInt(1, 100);
                    if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 55))) {
                        lv_randomBeastGenerator = 0;
                    }

                    if (((lv_randomBeastGenerator >= 56) && (lv_randomBeastGenerator <= 80))) {
                        lv_randomBeastGenerator = 1;
                    }

                    if (((lv_randomBeastGenerator >= 81) && (lv_randomBeastGenerator <= 90))) {
                        lv_randomBeastGenerator = 2;
                    }

                    if (((lv_randomBeastGenerator >= 91) && (lv_randomBeastGenerator <= 95))) {
                        lv_randomBeastGenerator = 3;
                    }

                    if (((lv_randomBeastGenerator >= 96) && (lv_randomBeastGenerator <= 100))) {
                        lv_randomBeastGenerator = 4;
                    }

                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 40) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                        lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                        }
                        else {
                            while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                            }
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                        }
                        lv_karakSpawnPoint = null;
                    }
                    else {
                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                            UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
                        }

                    }
                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 900.0)) {
                auto59D0048A_ae = 3;
                auto59D0048A_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (auto59D0048A_ai >= 0 && lv_regionCounter <= auto59D0048A_ae) || (auto59D0048A_ai <= 0 && lv_regionCounter >= auto59D0048A_ae) ) ; lv_regionCounter += auto59D0048A_ai ) {
                    auto77815173_ae = 2;
                    auto77815173_ai = 1;
                    lv_beastCounter = 1;
                    for ( ; ( (auto77815173_ai >= 0 && lv_beastCounter <= auto77815173_ae) || (auto77815173_ai <= 0 && lv_beastCounter >= auto77815173_ae) ) ; lv_beastCounter += auto77815173_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomBeastGenerator = RandomInt(1, 100);
                        if (((lv_randomBeastGenerator >= 1) && (lv_randomBeastGenerator <= 45))) {
                            lv_randomBeastGenerator = 0;
                        }

                        if (((lv_randomBeastGenerator >= 46) && (lv_randomBeastGenerator <= 65))) {
                            lv_randomBeastGenerator = 1;
                        }

                        if (((lv_randomBeastGenerator >= 66) && (lv_randomBeastGenerator <= 82))) {
                            lv_randomBeastGenerator = 2;
                        }

                        if (((lv_randomBeastGenerator >= 83) && (lv_randomBeastGenerator <= 92))) {
                            lv_randomBeastGenerator = 3;
                        }

                        if (((lv_randomBeastGenerator >= 93) && (lv_randomBeastGenerator <= 97))) {
                            lv_randomBeastGenerator = 4;
                        }

                        if (((lv_randomBeastGenerator >= 98) && (lv_randomBeastGenerator <= 100))) {
                            lv_randomBeastGenerator = 5;
                        }

                        if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 10) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 40) && ((lv_randomBeastGenerator == 0) || (lv_randomBeastGenerator == 1))) {
                            lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                            }
                            else {
                                while ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionCircle(lv_karakSpawnPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                    lv_karakSpawnPoint = RegionRandomPoint(lv_region[lv_regionCounter]);
                                }
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, lv_karakSpawnPoint);
                            }
                            lv_karakSpawnPoint = null;
                        }
                        else {
                            if (((lv_randomBeastGenerator == 4) || (lv_randomBeastGenerator == 5)) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 15)) {
                                if (((lv_region[lv_regionCounter] == RegionFromId(39)) || (lv_region[lv_regionCounter] == RegionFromId(38)))) {
                                    if ((UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 7) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], c_playerAny, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 8)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                        UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
                                    }

                                }
                                else {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
                                }
                            }
                            else {
                                if ((lv_randomBeastGenerator != 4) && (lv_randomBeastGenerator != 5) && (UnitGroupCount(UnitGroup(lv_beast[lv_randomBeastGenerator], 15, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 20)) {
                                    if ((lv_randomBeastGenerator == 0)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                    }
                                    else {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_beast[lv_randomBeastGenerator], 0, 15, RegionRandomPoint(lv_region[lv_regionCounter]));
                                        UnitBehaviorAdd(UnitLastCreated(), "HardcoreEnemy", UnitLastCreated(), 1);
                                    }
                                }

                            }
                        }
                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HardcoreBeastSpawn_Init () {
    gt_HardcoreBeastSpawn = TriggerCreate("gt_HardcoreBeastSpawn_Func");
    TriggerEnable(gt_HardcoreBeastSpawn, false);
    TriggerAddEventTimePeriodic(gt_HardcoreBeastSpawn, 360.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BasicItemSpawn_Func (bool testConds, bool runActions) {
    int auto4BC0E4A9_ae;
    int auto4BC0E4A9_ai;
    int auto3F049DAA_ae;
    int auto3F049DAA_ai;
    int auto01D31554_ae;
    int auto01D31554_ai;
    int auto29DD9E97_ae;
    int auto29DD9E97_ai;
    int autoDB7DD59B_ae;
    int autoDB7DD59B_ai;
    int auto3D3BE1ED_ae;
    int auto3D3BE1ED_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    region[4] lv_region;
    int lv_itemCounter;
    int lv_randomItemGenerator;
    string[8] lv_item;
    int lv_instanceCounter;

    // Variable Initialization
    lv_itemCounter = 1;
    lv_randomItemGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_item[0] = "Mineral";
    lv_item[1] = "Emberthorn";
    lv_item[2] = "BanelingDust";
    lv_item[3] = "Relic";
    lv_item[4] = "Rock";
    lv_item[5] = "MushroomItem";
    lv_item[6] = "Magic";
    lv_item[7] = "VoidCrystal";
    if ((GameGetMissionTime() <= 180.0)) {
        autoDB7DD59B_ae = 3;
        autoDB7DD59B_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (autoDB7DD59B_ai >= 0 && lv_regionCounter <= autoDB7DD59B_ae) || (autoDB7DD59B_ai <= 0 && lv_regionCounter >= autoDB7DD59B_ae) ) ; lv_regionCounter += autoDB7DD59B_ai ) {
            auto3D3BE1ED_ae = 2;
            auto3D3BE1ED_ai = 1;
            lv_itemCounter = 1;
            for ( ; ( (auto3D3BE1ED_ai >= 0 && lv_itemCounter <= auto3D3BE1ED_ae) || (auto3D3BE1ED_ai <= 0 && lv_itemCounter >= auto3D3BE1ED_ae) ) ; lv_itemCounter += auto3D3BE1ED_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomItemGenerator = RandomInt(1, 100);
                if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 20))) {
                    lv_randomItemGenerator = 0;
                }

                if (((lv_randomItemGenerator >= 21) && (lv_randomItemGenerator <= 40))) {
                    lv_randomItemGenerator = 1;
                }

                if (((lv_randomItemGenerator >= 41) && (lv_randomItemGenerator <= 57))) {
                    lv_randomItemGenerator = 2;
                }

                if (((lv_randomItemGenerator >= 58) && (lv_randomItemGenerator <= 74))) {
                    lv_randomItemGenerator = 3;
                }

                if (((lv_randomItemGenerator >= 75) && (lv_randomItemGenerator <= 91))) {
                    lv_randomItemGenerator = 4;
                }

                if (((lv_randomItemGenerator >= 92) && (lv_randomItemGenerator <= 96))) {
                    lv_randomItemGenerator = 5;
                }

                if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                    lv_randomItemGenerator = 6;
                }

                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
                while ((lv_nearbyItem == true)) {
                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                }
                if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                }

            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 180.0) && (GameGetMissionTime() <= 300.0)) {
            auto01D31554_ae = 3;
            auto01D31554_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (auto01D31554_ai >= 0 && lv_regionCounter <= auto01D31554_ae) || (auto01D31554_ai <= 0 && lv_regionCounter >= auto01D31554_ae) ) ; lv_regionCounter += auto01D31554_ai ) {
                auto29DD9E97_ae = 2;
                auto29DD9E97_ai = 1;
                lv_itemCounter = 1;
                for ( ; ( (auto29DD9E97_ai >= 0 && lv_itemCounter <= auto29DD9E97_ae) || (auto29DD9E97_ai <= 0 && lv_itemCounter >= auto29DD9E97_ae) ) ; lv_itemCounter += auto29DD9E97_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomItemGenerator = RandomInt(1, 100);
                    if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                        lv_randomItemGenerator = 0;
                    }

                    if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 32))) {
                        lv_randomItemGenerator = 1;
                    }

                    if (((lv_randomItemGenerator >= 33) && (lv_randomItemGenerator <= 48))) {
                        lv_randomItemGenerator = 2;
                    }

                    if (((lv_randomItemGenerator >= 49) && (lv_randomItemGenerator <= 66))) {
                        lv_randomItemGenerator = 3;
                    }

                    if (((lv_randomItemGenerator >= 67) && (lv_randomItemGenerator <= 84))) {
                        lv_randomItemGenerator = 4;
                    }

                    if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 89))) {
                        lv_randomItemGenerator = 5;
                    }

                    if (((lv_randomItemGenerator >= 90) && (lv_randomItemGenerator <= 95))) {
                        lv_randomItemGenerator = 6;
                    }

                    if (((lv_randomItemGenerator >= 96) && (lv_randomItemGenerator <= 100))) {
                        lv_randomItemGenerator = 7;
                    }

                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                    while ((lv_nearbyItem == true)) {
                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                    }
                    if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                    }

                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 300.0)) {
                auto4BC0E4A9_ae = 3;
                auto4BC0E4A9_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (auto4BC0E4A9_ai >= 0 && lv_regionCounter <= auto4BC0E4A9_ae) || (auto4BC0E4A9_ai <= 0 && lv_regionCounter >= auto4BC0E4A9_ae) ) ; lv_regionCounter += auto4BC0E4A9_ai ) {
                    auto3F049DAA_ae = 2;
                    auto3F049DAA_ai = 1;
                    lv_itemCounter = 1;
                    for ( ; ( (auto3F049DAA_ai >= 0 && lv_itemCounter <= auto3F049DAA_ae) || (auto3F049DAA_ai <= 0 && lv_itemCounter >= auto3F049DAA_ae) ) ; lv_itemCounter += auto3F049DAA_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomItemGenerator = RandomInt(1, 100);
                        if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                            lv_randomItemGenerator = 0;
                        }

                        if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 30))) {
                            lv_randomItemGenerator = 1;
                        }

                        if (((lv_randomItemGenerator >= 31) && (lv_randomItemGenerator <= 45))) {
                            lv_randomItemGenerator = 2;
                        }

                        if (((lv_randomItemGenerator >= 46) && (lv_randomItemGenerator <= 61))) {
                            lv_randomItemGenerator = 3;
                        }

                        if (((lv_randomItemGenerator >= 62) && (lv_randomItemGenerator <= 79))) {
                            lv_randomItemGenerator = 4;
                        }

                        if (((lv_randomItemGenerator >= 80) && (lv_randomItemGenerator <= 84))) {
                            lv_randomItemGenerator = 5;
                        }

                        if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 94))) {
                            lv_randomItemGenerator = 6;
                        }

                        if (((lv_randomItemGenerator >= 95) && (lv_randomItemGenerator <= 100))) {
                            lv_randomItemGenerator = 7;
                        }

                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                        while ((lv_nearbyItem == true)) {
                            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                    lv_nearbyItem = true;
                                }
                                else {
                                    lv_nearbyItem = false;
                                }
                            }
                        }
                        if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                        }

                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicItemSpawn_Init () {
    gt_BasicItemSpawn = TriggerCreate("gt_BasicItemSpawn_Func");
    TriggerEnable(gt_BasicItemSpawn, false);
    TriggerAddEventTimePeriodic(gt_BasicItemSpawn, FixedToInt(gv_basicItemSpawnTime), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Standard Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_StandardItemSpawn_Func (bool testConds, bool runActions) {
    int auto2EADF447_ae;
    int auto2EADF447_ai;
    int auto52C15483_ae;
    int auto52C15483_ai;
    int auto34E94424_ae;
    int auto34E94424_ai;
    int autoC7036898_ae;
    int autoC7036898_ai;
    int auto5436CC26_ae;
    int auto5436CC26_ai;
    int auto2534AA32_ae;
    int auto2534AA32_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    region[4] lv_region;
    int lv_itemCounter;
    int lv_randomItemGenerator;
    string[8] lv_item;
    int lv_instanceCounter;

    // Variable Initialization
    lv_itemCounter = 1;
    lv_randomItemGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_item[0] = "Mineral";
    lv_item[1] = "Emberthorn";
    lv_item[2] = "BanelingDust";
    lv_item[3] = "Relic";
    lv_item[4] = "Rock";
    lv_item[5] = "MushroomItem";
    lv_item[6] = "Magic";
    lv_item[7] = "VoidCrystal";
    if ((GameGetMissionTime() <= 180.0)) {
        auto5436CC26_ae = 3;
        auto5436CC26_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (auto5436CC26_ai >= 0 && lv_regionCounter <= auto5436CC26_ae) || (auto5436CC26_ai <= 0 && lv_regionCounter >= auto5436CC26_ae) ) ; lv_regionCounter += auto5436CC26_ai ) {
            auto2534AA32_ae = 2;
            auto2534AA32_ai = 1;
            lv_itemCounter = 1;
            for ( ; ( (auto2534AA32_ai >= 0 && lv_itemCounter <= auto2534AA32_ae) || (auto2534AA32_ai <= 0 && lv_itemCounter >= auto2534AA32_ae) ) ; lv_itemCounter += auto2534AA32_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomItemGenerator = RandomInt(1, 100);
                if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 20))) {
                    lv_randomItemGenerator = 0;
                }

                if (((lv_randomItemGenerator >= 21) && (lv_randomItemGenerator <= 40))) {
                    lv_randomItemGenerator = 1;
                }

                if (((lv_randomItemGenerator >= 41) && (lv_randomItemGenerator <= 57))) {
                    lv_randomItemGenerator = 2;
                }

                if (((lv_randomItemGenerator >= 58) && (lv_randomItemGenerator <= 74))) {
                    lv_randomItemGenerator = 3;
                }

                if (((lv_randomItemGenerator >= 75) && (lv_randomItemGenerator <= 91))) {
                    lv_randomItemGenerator = 4;
                }

                if (((lv_randomItemGenerator >= 92) && (lv_randomItemGenerator <= 96))) {
                    lv_randomItemGenerator = 5;
                }

                if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                    lv_randomItemGenerator = 6;
                }

                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
                while ((lv_nearbyItem == true)) {
                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                }
                if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                }

            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 180.0) && (GameGetMissionTime() <= 660.0)) {
            auto34E94424_ae = 3;
            auto34E94424_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (auto34E94424_ai >= 0 && lv_regionCounter <= auto34E94424_ae) || (auto34E94424_ai <= 0 && lv_regionCounter >= auto34E94424_ae) ) ; lv_regionCounter += auto34E94424_ai ) {
                autoC7036898_ae = 2;
                autoC7036898_ai = 1;
                lv_itemCounter = 1;
                for ( ; ( (autoC7036898_ai >= 0 && lv_itemCounter <= autoC7036898_ae) || (autoC7036898_ai <= 0 && lv_itemCounter >= autoC7036898_ae) ) ; lv_itemCounter += autoC7036898_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomItemGenerator = RandomInt(1, 100);
                    if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                        lv_randomItemGenerator = 0;
                    }

                    if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 32))) {
                        lv_randomItemGenerator = 1;
                    }

                    if (((lv_randomItemGenerator >= 33) && (lv_randomItemGenerator <= 48))) {
                        lv_randomItemGenerator = 2;
                    }

                    if (((lv_randomItemGenerator >= 49) && (lv_randomItemGenerator <= 66))) {
                        lv_randomItemGenerator = 3;
                    }

                    if (((lv_randomItemGenerator >= 67) && (lv_randomItemGenerator <= 84))) {
                        lv_randomItemGenerator = 4;
                    }

                    if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 89))) {
                        lv_randomItemGenerator = 5;
                    }

                    if (((lv_randomItemGenerator >= 90) && (lv_randomItemGenerator <= 96))) {
                        lv_randomItemGenerator = 6;
                    }

                    if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                        lv_randomItemGenerator = 7;
                    }

                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                    while ((lv_nearbyItem == true)) {
                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                    }
                    if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                    }

                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 660.0)) {
                auto2EADF447_ae = 3;
                auto2EADF447_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (auto2EADF447_ai >= 0 && lv_regionCounter <= auto2EADF447_ae) || (auto2EADF447_ai <= 0 && lv_regionCounter >= auto2EADF447_ae) ) ; lv_regionCounter += auto2EADF447_ai ) {
                    auto52C15483_ae = 2;
                    auto52C15483_ai = 1;
                    lv_itemCounter = 1;
                    for ( ; ( (auto52C15483_ai >= 0 && lv_itemCounter <= auto52C15483_ae) || (auto52C15483_ai <= 0 && lv_itemCounter >= auto52C15483_ae) ) ; lv_itemCounter += auto52C15483_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomItemGenerator = RandomInt(1, 100);
                        if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                            lv_randomItemGenerator = 0;
                        }

                        if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 30))) {
                            lv_randomItemGenerator = 1;
                        }

                        if (((lv_randomItemGenerator >= 31) && (lv_randomItemGenerator <= 45))) {
                            lv_randomItemGenerator = 2;
                        }

                        if (((lv_randomItemGenerator >= 46) && (lv_randomItemGenerator <= 61))) {
                            lv_randomItemGenerator = 3;
                        }

                        if (((lv_randomItemGenerator >= 62) && (lv_randomItemGenerator <= 79))) {
                            lv_randomItemGenerator = 4;
                        }

                        if (((lv_randomItemGenerator >= 80) && (lv_randomItemGenerator <= 84))) {
                            lv_randomItemGenerator = 5;
                        }

                        if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 95))) {
                            lv_randomItemGenerator = 6;
                        }

                        if (((lv_randomItemGenerator >= 96) && (lv_randomItemGenerator <= 100))) {
                            lv_randomItemGenerator = 7;
                        }

                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                        while ((lv_nearbyItem == true)) {
                            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                    lv_nearbyItem = true;
                                }
                                else {
                                    lv_nearbyItem = false;
                                }
                            }
                        }
                        if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                        }

                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StandardItemSpawn_Init () {
    gt_StandardItemSpawn = TriggerCreate("gt_StandardItemSpawn_Func");
    TriggerEnable(gt_StandardItemSpawn, false);
    TriggerAddEventTimePeriodic(gt_StandardItemSpawn, FixedToInt(gv_standardItemSpawnTime), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_AdvancedItemSpawn_Func (bool testConds, bool runActions) {
    int autoB2ED3BD2_ae;
    int autoB2ED3BD2_ai;
    int autoDCC0B1B9_ae;
    int autoDCC0B1B9_ai;
    int auto5A4DAD2C_ae;
    int auto5A4DAD2C_ai;
    int autoA7001CFC_ae;
    int autoA7001CFC_ai;
    int autoBDA0BF8F_ae;
    int autoBDA0BF8F_ai;
    int auto2F7B5E47_ae;
    int auto2F7B5E47_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    region[4] lv_region;
    int lv_itemCounter;
    int lv_randomItemGenerator;
    string[8] lv_item;
    int lv_instanceCounter;

    // Variable Initialization
    lv_itemCounter = 1;
    lv_randomItemGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_item[0] = "Mineral";
    lv_item[1] = "Emberthorn";
    lv_item[2] = "BanelingDust";
    lv_item[3] = "Relic";
    lv_item[4] = "Rock";
    lv_item[5] = "MushroomItem";
    lv_item[6] = "Magic";
    lv_item[7] = "VoidCrystal";
    if ((GameGetMissionTime() <= 180.0)) {
        autoBDA0BF8F_ae = 3;
        autoBDA0BF8F_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (autoBDA0BF8F_ai >= 0 && lv_regionCounter <= autoBDA0BF8F_ae) || (autoBDA0BF8F_ai <= 0 && lv_regionCounter >= autoBDA0BF8F_ae) ) ; lv_regionCounter += autoBDA0BF8F_ai ) {
            auto2F7B5E47_ae = 2;
            auto2F7B5E47_ai = 1;
            lv_itemCounter = 1;
            for ( ; ( (auto2F7B5E47_ai >= 0 && lv_itemCounter <= auto2F7B5E47_ae) || (auto2F7B5E47_ai <= 0 && lv_itemCounter >= auto2F7B5E47_ae) ) ; lv_itemCounter += auto2F7B5E47_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomItemGenerator = RandomInt(1, 100);
                if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 20))) {
                    lv_randomItemGenerator = 0;
                }

                if (((lv_randomItemGenerator >= 21) && (lv_randomItemGenerator <= 40))) {
                    lv_randomItemGenerator = 1;
                }

                if (((lv_randomItemGenerator >= 41) && (lv_randomItemGenerator <= 57))) {
                    lv_randomItemGenerator = 2;
                }

                if (((lv_randomItemGenerator >= 58) && (lv_randomItemGenerator <= 74))) {
                    lv_randomItemGenerator = 3;
                }

                if (((lv_randomItemGenerator >= 75) && (lv_randomItemGenerator <= 91))) {
                    lv_randomItemGenerator = 4;
                }

                if (((lv_randomItemGenerator >= 92) && (lv_randomItemGenerator <= 96))) {
                    lv_randomItemGenerator = 5;
                }

                if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                    lv_randomItemGenerator = 6;
                }

                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
                while ((lv_nearbyItem == true)) {
                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                }
                if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                }

            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 180.0) && (GameGetMissionTime() <= 960.0)) {
            auto5A4DAD2C_ae = 3;
            auto5A4DAD2C_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (auto5A4DAD2C_ai >= 0 && lv_regionCounter <= auto5A4DAD2C_ae) || (auto5A4DAD2C_ai <= 0 && lv_regionCounter >= auto5A4DAD2C_ae) ) ; lv_regionCounter += auto5A4DAD2C_ai ) {
                autoA7001CFC_ae = 2;
                autoA7001CFC_ai = 1;
                lv_itemCounter = 1;
                for ( ; ( (autoA7001CFC_ai >= 0 && lv_itemCounter <= autoA7001CFC_ae) || (autoA7001CFC_ai <= 0 && lv_itemCounter >= autoA7001CFC_ae) ) ; lv_itemCounter += autoA7001CFC_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomItemGenerator = RandomInt(1, 100);
                    if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                        lv_randomItemGenerator = 0;
                    }

                    if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 32))) {
                        lv_randomItemGenerator = 1;
                    }

                    if (((lv_randomItemGenerator >= 33) && (lv_randomItemGenerator <= 48))) {
                        lv_randomItemGenerator = 2;
                    }

                    if (((lv_randomItemGenerator >= 49) && (lv_randomItemGenerator <= 66))) {
                        lv_randomItemGenerator = 3;
                    }

                    if (((lv_randomItemGenerator >= 67) && (lv_randomItemGenerator <= 84))) {
                        lv_randomItemGenerator = 4;
                    }

                    if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 89))) {
                        lv_randomItemGenerator = 5;
                    }

                    if (((lv_randomItemGenerator >= 90) && (lv_randomItemGenerator <= 96))) {
                        lv_randomItemGenerator = 6;
                    }

                    if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                        lv_randomItemGenerator = 7;
                    }

                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                    while ((lv_nearbyItem == true)) {
                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                    }
                    if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                    }

                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 960.0)) {
                autoB2ED3BD2_ae = 3;
                autoB2ED3BD2_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (autoB2ED3BD2_ai >= 0 && lv_regionCounter <= autoB2ED3BD2_ae) || (autoB2ED3BD2_ai <= 0 && lv_regionCounter >= autoB2ED3BD2_ae) ) ; lv_regionCounter += autoB2ED3BD2_ai ) {
                    autoDCC0B1B9_ae = 2;
                    autoDCC0B1B9_ai = 1;
                    lv_itemCounter = 1;
                    for ( ; ( (autoDCC0B1B9_ai >= 0 && lv_itemCounter <= autoDCC0B1B9_ae) || (autoDCC0B1B9_ai <= 0 && lv_itemCounter >= autoDCC0B1B9_ae) ) ; lv_itemCounter += autoDCC0B1B9_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomItemGenerator = RandomInt(1, 100);
                        if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                            lv_randomItemGenerator = 0;
                        }

                        if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 30))) {
                            lv_randomItemGenerator = 1;
                        }

                        if (((lv_randomItemGenerator >= 31) && (lv_randomItemGenerator <= 45))) {
                            lv_randomItemGenerator = 2;
                        }

                        if (((lv_randomItemGenerator >= 46) && (lv_randomItemGenerator <= 61))) {
                            lv_randomItemGenerator = 3;
                        }

                        if (((lv_randomItemGenerator >= 62) && (lv_randomItemGenerator <= 79))) {
                            lv_randomItemGenerator = 4;
                        }

                        if (((lv_randomItemGenerator >= 80) && (lv_randomItemGenerator <= 84))) {
                            lv_randomItemGenerator = 5;
                        }

                        if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 95))) {
                            lv_randomItemGenerator = 6;
                        }

                        if (((lv_randomItemGenerator >= 96) && (lv_randomItemGenerator <= 100))) {
                            lv_randomItemGenerator = 7;
                        }

                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                        while ((lv_nearbyItem == true)) {
                            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                    lv_nearbyItem = true;
                                }
                                else {
                                    lv_nearbyItem = false;
                                }
                            }
                        }
                        if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                        }

                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdvancedItemSpawn_Init () {
    gt_AdvancedItemSpawn = TriggerCreate("gt_AdvancedItemSpawn_Func");
    TriggerEnable(gt_AdvancedItemSpawn, false);
    TriggerAddEventTimePeriodic(gt_AdvancedItemSpawn, FixedToInt(gv_advancedItemSpawnTime), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hardcore Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_HardcoreItemSpawn_Func (bool testConds, bool runActions) {
    int auto23F31AB3_ae;
    int auto23F31AB3_ai;
    int auto680E8C4B_ae;
    int auto680E8C4B_ai;
    int autoF79D0BCE_ae;
    int autoF79D0BCE_ai;
    int auto6BC1754E_ae;
    int auto6BC1754E_ai;
    int autoA1C93EF5_ae;
    int autoA1C93EF5_ai;
    int auto4B91EAF6_ae;
    int auto4B91EAF6_ai;

    // Variable Declarations
    point lv_tempItemSpawnRegion;
    bool lv_nearbyItem;
    int lv_regionCounter;
    region[4] lv_region;
    int lv_itemCounter;
    int lv_randomItemGenerator;
    string[8] lv_item;
    int lv_instanceCounter;

    // Variable Initialization
    lv_itemCounter = 1;
    lv_randomItemGenerator = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_region[0] = RegionFromId(37);
    lv_region[2] = RegionFromId(40);
    lv_region[3] = RegionFromId(36);
    lv_item[0] = "Mineral";
    lv_item[1] = "Emberthorn";
    lv_item[2] = "BanelingDust";
    lv_item[3] = "Relic";
    lv_item[4] = "Rock";
    lv_item[5] = "MushroomItem";
    lv_item[6] = "Magic";
    lv_item[7] = "VoidCrystal";
    if ((GameGetMissionTime() <= 180.0)) {
        autoA1C93EF5_ae = 3;
        autoA1C93EF5_ai = 1;
        lv_regionCounter = 0;
        for ( ; ( (autoA1C93EF5_ai >= 0 && lv_regionCounter <= autoA1C93EF5_ae) || (autoA1C93EF5_ai <= 0 && lv_regionCounter >= autoA1C93EF5_ae) ) ; lv_regionCounter += autoA1C93EF5_ai ) {
            auto4B91EAF6_ae = 2;
            auto4B91EAF6_ai = 1;
            lv_itemCounter = 1;
            for ( ; ( (auto4B91EAF6_ai >= 0 && lv_itemCounter <= auto4B91EAF6_ae) || (auto4B91EAF6_ai <= 0 && lv_itemCounter >= auto4B91EAF6_ae) ) ; lv_itemCounter += auto4B91EAF6_ai ) {
                if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                    lv_region[1] = RegionFromId(38);
                }
                else {
                    lv_region[1] = RegionFromId(39);
                }
                lv_randomItemGenerator = RandomInt(1, 100);
                if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 20))) {
                    lv_randomItemGenerator = 0;
                }

                if (((lv_randomItemGenerator >= 21) && (lv_randomItemGenerator <= 40))) {
                    lv_randomItemGenerator = 1;
                }

                if (((lv_randomItemGenerator >= 41) && (lv_randomItemGenerator <= 57))) {
                    lv_randomItemGenerator = 2;
                }

                if (((lv_randomItemGenerator >= 58) && (lv_randomItemGenerator <= 74))) {
                    lv_randomItemGenerator = 3;
                }

                if (((lv_randomItemGenerator >= 75) && (lv_randomItemGenerator <= 91))) {
                    lv_randomItemGenerator = 4;
                }

                if (((lv_randomItemGenerator >= 92) && (lv_randomItemGenerator <= 96))) {
                    lv_randomItemGenerator = 5;
                }

                if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                    lv_randomItemGenerator = 6;
                }

                lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                    lv_nearbyItem = true;
                }
                else {
                    if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        lv_nearbyItem = false;
                    }
                }
                while ((lv_nearbyItem == true)) {
                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 4.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) != 0)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                }
                if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                }

            }
            lv_instanceCounter = (lv_instanceCounter + 1);
        }
    }
    else {
        if ((GameGetMissionTime() > 180.0) && (GameGetMissionTime() <= 1260.0)) {
            autoF79D0BCE_ae = 3;
            autoF79D0BCE_ai = 1;
            lv_regionCounter = 0;
            for ( ; ( (autoF79D0BCE_ai >= 0 && lv_regionCounter <= autoF79D0BCE_ae) || (autoF79D0BCE_ai <= 0 && lv_regionCounter >= autoF79D0BCE_ae) ) ; lv_regionCounter += autoF79D0BCE_ai ) {
                auto6BC1754E_ae = 2;
                auto6BC1754E_ai = 1;
                lv_itemCounter = 1;
                for ( ; ( (auto6BC1754E_ai >= 0 && lv_itemCounter <= auto6BC1754E_ae) || (auto6BC1754E_ai <= 0 && lv_itemCounter >= auto6BC1754E_ae) ) ; lv_itemCounter += auto6BC1754E_ai ) {
                    if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                        lv_region[1] = RegionFromId(38);
                    }
                    else {
                        lv_region[1] = RegionFromId(39);
                    }
                    lv_randomItemGenerator = RandomInt(1, 100);
                    if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                        lv_randomItemGenerator = 0;
                    }

                    if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 32))) {
                        lv_randomItemGenerator = 1;
                    }

                    if (((lv_randomItemGenerator >= 33) && (lv_randomItemGenerator <= 48))) {
                        lv_randomItemGenerator = 2;
                    }

                    if (((lv_randomItemGenerator >= 49) && (lv_randomItemGenerator <= 66))) {
                        lv_randomItemGenerator = 3;
                    }

                    if (((lv_randomItemGenerator >= 67) && (lv_randomItemGenerator <= 84))) {
                        lv_randomItemGenerator = 4;
                    }

                    if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 89))) {
                        lv_randomItemGenerator = 5;
                    }

                    if (((lv_randomItemGenerator >= 90) && (lv_randomItemGenerator <= 97))) {
                        lv_randomItemGenerator = 6;
                    }

                    if (((lv_randomItemGenerator >= 98) && (lv_randomItemGenerator <= 100))) {
                        lv_randomItemGenerator = 7;
                    }

                    lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                    if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                        lv_nearbyItem = true;
                    }
                    else {
                        if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            lv_nearbyItem = false;
                        }
                    }
                    while ((lv_nearbyItem == true)) {
                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                    }
                    if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                    }

                }
                lv_instanceCounter = (lv_instanceCounter + 1);
            }
        }
        else {
            if ((GameGetMissionTime() > 1260.0)) {
                auto23F31AB3_ae = 3;
                auto23F31AB3_ai = 1;
                lv_regionCounter = 0;
                for ( ; ( (auto23F31AB3_ai >= 0 && lv_regionCounter <= auto23F31AB3_ae) || (auto23F31AB3_ai <= 0 && lv_regionCounter >= auto23F31AB3_ae) ) ; lv_regionCounter += auto23F31AB3_ai ) {
                    auto680E8C4B_ae = 2;
                    auto680E8C4B_ai = 1;
                    lv_itemCounter = 1;
                    for ( ; ( (auto680E8C4B_ai >= 0 && lv_itemCounter <= auto680E8C4B_ae) || (auto680E8C4B_ai <= 0 && lv_itemCounter >= auto680E8C4B_ae) ) ; lv_itemCounter += auto680E8C4B_ai ) {
                        if ((lv_instanceCounter == 1) && (RandomInt(1, 3) <= 2)) {
                            lv_region[1] = RegionFromId(38);
                        }
                        else {
                            lv_region[1] = RegionFromId(39);
                        }
                        lv_randomItemGenerator = RandomInt(1, 100);
                        if (((lv_randomItemGenerator >= 1) && (lv_randomItemGenerator <= 16))) {
                            lv_randomItemGenerator = 0;
                        }

                        if (((lv_randomItemGenerator >= 17) && (lv_randomItemGenerator <= 30))) {
                            lv_randomItemGenerator = 1;
                        }

                        if (((lv_randomItemGenerator >= 31) && (lv_randomItemGenerator <= 45))) {
                            lv_randomItemGenerator = 2;
                        }

                        if (((lv_randomItemGenerator >= 46) && (lv_randomItemGenerator <= 61))) {
                            lv_randomItemGenerator = 3;
                        }

                        if (((lv_randomItemGenerator >= 62) && (lv_randomItemGenerator <= 79))) {
                            lv_randomItemGenerator = 4;
                        }

                        if (((lv_randomItemGenerator >= 80) && (lv_randomItemGenerator <= 84))) {
                            lv_randomItemGenerator = 5;
                        }

                        if (((lv_randomItemGenerator >= 85) && (lv_randomItemGenerator <= 96))) {
                            lv_randomItemGenerator = 6;
                        }

                        if (((lv_randomItemGenerator >= 97) && (lv_randomItemGenerator <= 100))) {
                            lv_randomItemGenerator = 7;
                        }

                        lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                            lv_nearbyItem = true;
                        }
                        else {
                            if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                lv_nearbyItem = false;
                            }
                        }
                        while ((lv_nearbyItem == true)) {
                            lv_tempItemSpawnRegion = RegionRandomPoint(lv_region[lv_regionCounter]);
                            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(Point(PointGetX(lv_tempItemSpawnRegion), PointGetY(lv_tempItemSpawnRegion)), 3.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                                lv_nearbyItem = true;
                            }
                            else {
                                if ((PointPathingPassable(lv_tempItemSpawnRegion) == false)) {
                                    lv_nearbyItem = true;
                                }
                                else {
                                    lv_nearbyItem = false;
                                }
                            }
                        }
                        if ((UnitGroupCount(UnitGroup(lv_item[lv_randomItemGenerator], 0, lv_region[lv_regionCounter], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 10)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomItemGenerator], 0, 0, lv_tempItemSpawnRegion);
                        }

                    }
                    lv_instanceCounter = (lv_instanceCounter + 1);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HardcoreItemSpawn_Init () {
    gt_HardcoreItemSpawn = TriggerCreate("gt_HardcoreItemSpawn_Func");
    TriggerEnable(gt_HardcoreItemSpawn, false);
    TriggerAddEventTimePeriodic(gt_HardcoreItemSpawn, FixedToInt(gv_hardcoreItemSpawnTime), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Basic Karak
//--------------------------------------------------------------------------------------------------
bool gt_BasicKarak_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KarakMale"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 3.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 105.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 105.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BasicKarak_Init () {
    gt_BasicKarak = TriggerCreate("gt_BasicKarak_Func");
    TriggerEnable(gt_BasicKarak, false);
    TriggerAddEventUnitRegion(gt_BasicKarak, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Karak
//--------------------------------------------------------------------------------------------------
bool gt_AdvancedKarak_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KarakMale"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 3.65);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 150.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 150.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdvancedKarak_Init () {
    gt_AdvancedKarak = TriggerCreate("gt_AdvancedKarak_Func");
    TriggerEnable(gt_AdvancedKarak, false);
    TriggerAddEventUnitRegion(gt_AdvancedKarak, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hardcore Karak
//--------------------------------------------------------------------------------------------------
bool gt_HardcoreKarak_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KarakMale"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 3.75);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 170.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 170.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HardcoreKarak_Init () {
    gt_HardcoreKarak = TriggerCreate("gt_HardcoreKarak_Func");
    TriggerEnable(gt_HardcoreKarak, false);
    TriggerAddEventUnitRegion(gt_HardcoreKarak, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neutral Catcher Southwest
//--------------------------------------------------------------------------------------------------
bool gt_NeutralCatcherSouthwest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "KarakMale") || (UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "SpaceCowSmall") || (UnitGetType(EventUnit()) == "Predator") || (UnitGetType(EventUnit()) == "Lurker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(36)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NeutralCatcherSouthwest_Init () {
    gt_NeutralCatcherSouthwest = TriggerCreate("gt_NeutralCatcherSouthwest_Func");
    TriggerAddEventUnitRegion(gt_NeutralCatcherSouthwest, null, RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_NeutralCatcherSouthwest, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neutral Catcher Northwest
//--------------------------------------------------------------------------------------------------
bool gt_NeutralCatcherNorthwest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "KarakMale") || (UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "SpaceCowSmall") || (UnitGetType(EventUnit()) == "Predator") || (UnitGetType(EventUnit()) == "Lurker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(37)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NeutralCatcherNorthwest_Init () {
    gt_NeutralCatcherNorthwest = TriggerCreate("gt_NeutralCatcherNorthwest_Func");
    TriggerAddEventUnitRegion(gt_NeutralCatcherNorthwest, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neutral Catcher Southeast
//--------------------------------------------------------------------------------------------------
bool gt_NeutralCatcherSoutheast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "KarakMale") || (UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "SpaceCowSmall") || (UnitGetType(EventUnit()) == "Predator") || (UnitGetType(EventUnit()) == "Lurker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(40)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NeutralCatcherSoutheast_Init () {
    gt_NeutralCatcherSoutheast = TriggerCreate("gt_NeutralCatcherSoutheast_Func");
    TriggerAddEventUnitRegion(gt_NeutralCatcherSoutheast, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Noob Time
//--------------------------------------------------------------------------------------------------
bool gt_NoobTime_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    TimerStart(gv_noobTime, gv_noobTimeDuration, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/D80AE898"), true, false);
    gv_noobTimerWindow = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_noobTimerWindow, c_anchorTop, 0, -35);
    TimerWindowSetStyle(gv_noobTimerWindow, c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowShow(gv_noobTimerWindow, PlayerGroupAll(), false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 70);
    DialogCreate(50, 50, c_anchorTop, 120, 5, true);
    gv_voidTime = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/2E137E7B"), StringToText(""), "");
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(gv_voidTime, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoobTime_Init () {
    gt_NoobTime = TriggerCreate("gt_NoobTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Noob Death
//--------------------------------------------------------------------------------------------------
bool gt_NoobDeath_Func (bool testConds, bool runActions) {
    int auto3B4F7A9D_ae;
    int auto3B4F7A9D_ai;
    int auto4CC644FD_ae;
    int auto4CC644FD_ai;

    // Variable Declarations
    int lv_counter;
    int lv_counter2;
    int lv_bounty;
    bool lv_bountyTargetFound;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "QuitHero") == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_noobTime) != 0.0))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_playerstatus[UnitGetOwner(EventUnit())], StringExternal("Param/Value/EF8380EF"), PlayerGroupAll());
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(EventUnit()) == "PreserverC") || (UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "Thief") || (UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "Techie") || (UnitGetType(EventUnit()) == "Voidmancer"))) {
            if ((gv_acceleratedModeEnabled == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 200.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 2);
                TextTagCreate(StringExternal("Param/Value/2D616D80"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            else {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 100.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 1);
                TextTagCreate(StringExternal("Param/Value/1E569C71"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            gv_kills[UnitGetOwner(UnitGroupLoopCurrent())] += 1;
            libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(UnitGroupLoopCurrent())], (IntToText(gv_kills[UnitGetOwner(UnitGroupLoopCurrent())]) + (StringExternal("Param/Value/FE3DC93F") + IntToText(gv_deaths[UnitGetOwner(UnitGroupLoopCurrent())]))), PlayerGroupAll());
        }
        else {
            gv_kills[UnitGetOwner(UnitGroupLoopCurrent())] += 1;
            libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(UnitGroupLoopCurrent())], (IntToText(gv_kills[UnitGetOwner(UnitGroupLoopCurrent())]) + (StringExternal("Param/Value/B356F88B") + IntToText(gv_deaths[UnitGetOwner(UnitGroupLoopCurrent())]))), PlayerGroupAll());
            if ((gv_acceleratedModeEnabled == true)) {
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 6);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 500.0)));
                TextTagCreate(StringExternal("Param/Value/7DC6F36C"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            else {
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 3);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 250.0)));
                TextTagCreate(StringExternal("Param/Value/636BD326"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
        }
    }
    UnitGroupLoopEnd();
    auto3B4F7A9D_ae = 12;
    auto3B4F7A9D_ai = 1;
    lv_counter = 1;
    for ( ; ( (auto3B4F7A9D_ai >= 0 && lv_counter <= auto3B4F7A9D_ae) || (auto3B4F7A9D_ai <= 0 && lv_counter >= auto3B4F7A9D_ae) ) ; lv_counter += auto3B4F7A9D_ai ) {
        if ((EventUnit() == gv_bountyTarget[lv_counter])) {
            lv_bountyTargetFound = true;
            UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(gv_assassin[lv_counter]), c_unitAllianceAlly, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 25);
                if ((UnitGroupLoopCurrent() == gv_assassin[lv_counter])) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 50);
                }

            }
            UnitGroupLoopEnd();
        }

    }
    if ((lv_bountyTargetFound == false)) {
        auto4CC644FD_ae = 12;
        auto4CC644FD_ai = 1;
        lv_counter2 = 1;
        for ( ; ( (auto4CC644FD_ai >= 0 && lv_counter2 <= auto4CC644FD_ae) || (auto4CC644FD_ai <= 0 && lv_counter2 >= auto4CC644FD_ae) ) ; lv_counter2 += auto4CC644FD_ai ) {
            if ((EventUnit() == gv_bountyTarget2[lv_counter2])) {
                UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(gv_assassin[lv_counter2]), c_unitAllianceAlly, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 50);
                    if ((UnitGroupLoopCurrent() == gv_assassin[lv_counter2])) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 100);
                    }

                }
                UnitGroupLoopEnd();
            }

        }
    }

    libNtve_gf_MakeUnitInvulnerable(gv_hero[EventPlayer()], true);
    libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], false);
    UnitRevive(gv_hero[EventPlayer()]);
    UnitSetPropertyFixed(gv_hero[EventPlayer()], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hero[EventPlayer()], c_unitPropEnergyPercent, 100.0);
    UnitXPGainEnable(gv_hero[EventPlayer()], null, false);
    UnitBehaviorAdd(gv_hero[EventPlayer()], "DeadHero", gv_hero[EventPlayer()], 1);
    gv_deaths[UnitGetOwner(EventUnit())] += 1;
    libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(EventUnit())], (IntToText(gv_kills[UnitGetOwner(EventUnit())]) + (StringExternal("Param/Value/CEAD60B1") + IntToText(gv_deaths[UnitGetOwner(EventUnit())]))), PlayerGroupAll());
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/8EB5F50D"));
    TimerStart(gv_noobResurrectionTimer[EventPlayer()], 12.0, false, c_timeGame);
    gv_noobResurrectionTimer[EventPlayer()] = TimerLastStarted();
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/BE33D545"), true, false);
    gv_noobResurrectionTimerWindow[EventPlayer()] = TimerWindowLastCreated();
    TimerWindowSetAnchor(gv_noobResurrectionTimerWindow[EventPlayer()], c_anchorCenter, 0, 0);
    TimerWindowShow(gv_noobResurrectionTimerWindow[EventPlayer()], PlayerGroupAll(), false);
    TimerWindowShow(gv_noobResurrectionTimerWindow[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoobDeath_Init () {
    gt_NoobDeath = TriggerCreate("gt_NoobDeath_Func");
    TriggerAddEventUnitDied(gt_NoobDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Noob Resurrection Time
//--------------------------------------------------------------------------------------------------
bool gt_NoobResurrectionTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_spawnPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventTimer() == gv_noobResurrectionTimer[1]) || (EventTimer() == gv_noobResurrectionTimer[2]) || (EventTimer() == gv_noobResurrectionTimer[3]) || (EventTimer() == gv_noobResurrectionTimer[4]) || (EventTimer() == gv_noobResurrectionTimer[5]) || (EventTimer() == gv_noobResurrectionTimer[6]) || (EventTimer() == gv_noobResurrectionTimer[7]) || (EventTimer() == gv_noobResurrectionTimer[8]) || (EventTimer() == gv_noobResurrectionTimer[9]) || (EventTimer() == gv_noobResurrectionTimer[10]) || (EventTimer() == gv_noobResurrectionTimer[11]) || (EventTimer() == gv_noobResurrectionTimer[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == gv_noobResurrectionTimer[1])) {
        lv_player = 1;
    }
    else {
        if ((EventTimer() == gv_noobResurrectionTimer[2])) {
            lv_player = 2;
        }
        else {
            if ((EventTimer() == gv_noobResurrectionTimer[3])) {
                lv_player = 3;
            }
            else {
                if ((EventTimer() == gv_noobResurrectionTimer[4])) {
                    lv_player = 4;
                }

                if ((EventTimer() == gv_noobResurrectionTimer[5])) {
                    lv_player = 5;
                }
                else {
                    if ((EventTimer() == gv_noobResurrectionTimer[6])) {
                        lv_player = 6;
                    }
                    else {
                        if ((EventTimer() == gv_noobResurrectionTimer[7])) {
                            lv_player = 7;
                        }
                        else {
                            if ((EventTimer() == gv_noobResurrectionTimer[8])) {
                                lv_player = 8;
                            }
                            else {
                                if ((EventTimer() == gv_noobResurrectionTimer[9])) {
                                    lv_player = 9;
                                }
                                else {
                                    if ((EventTimer() == gv_noobResurrectionTimer[10])) {
                                        lv_player = 10;
                                    }
                                    else {
                                        if ((EventTimer() == gv_noobResurrectionTimer[11])) {
                                            lv_player = 11;
                                        }
                                        else {
                                            if ((EventTimer() == gv_noobResurrectionTimer[12])) {
                                                lv_player = 12;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    TimerWindowDestroy(gv_noobResurrectionTimerWindow[lv_player]);
    libNtve_gf_MakeUnitInvulnerable(gv_hero[lv_player], false);
    UnitSetPropertyFixed(gv_hero[lv_player], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hero[lv_player], c_unitPropEnergyPercent, 100.0);
    PlayerModifyPropertyInt(lv_player, c_playerPropVespene, c_playerPropOperSetTo, 100);
    UnitBehaviorAdd(gv_hero[lv_player], "XelNagasWill", gv_hero[lv_player], 1);
    libNtve_gf_ShowHideUnit(gv_hero[lv_player], true);
    if ((lv_player == PlayerGroupPlayer(gv_p1, 1))) {
        lv_spawnPoint = PointFromId(5858);
    }
    else {
        if ((lv_player == PlayerGroupPlayer(gv_p2, 1))) {
            lv_spawnPoint = PointFromId(10);
        }
        else {
            if ((lv_player == PlayerGroupPlayer(gv_p3, 1))) {
                lv_spawnPoint = PointFromId(477);
            }
            else {
                if ((lv_player == PlayerGroupPlayer(gv_p4, 1))) {
                    lv_spawnPoint = PointFromId(1357);
                }
                else {
                    if ((lv_player == PlayerGroupPlayer(gv_p5, 1))) {
                        lv_spawnPoint = PointFromId(1399);
                    }
                    else {
                        if ((lv_player == PlayerGroupPlayer(gv_p6, 1))) {
                            lv_spawnPoint = PointFromId(5841);
                        }
                        else {
                            if ((lv_player == PlayerGroupPlayer(gv_p7, 1))) {
                                lv_spawnPoint = PointFromId(5842);
                            }
                            else {
                                if ((lv_player == PlayerGroupPlayer(gv_p8, 1))) {
                                    lv_spawnPoint = PointFromId(5843);
                                }
                                else {
                                    if ((lv_player == PlayerGroupPlayer(gv_p9, 1))) {
                                        lv_spawnPoint = PointFromId(5844);
                                    }
                                    else {
                                        if ((lv_player == PlayerGroupPlayer(gv_p10, 1))) {
                                            lv_spawnPoint = PointFromId(5845);
                                        }
                                        else {
                                            if ((lv_player == PlayerGroupPlayer(gv_p11, 1))) {
                                                lv_spawnPoint = PointFromId(5846);
                                            }
                                            else {
                                                if ((lv_player == PlayerGroupPlayer(gv_p12, 1))) {
                                                    lv_spawnPoint = PointFromId(5847);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    UnitSetPosition(gv_hero[lv_player], lv_spawnPoint, false);
    UnitBehaviorRemove(gv_hero[lv_player], "DeadHero", 1);
    UnitXPGainEnable(gv_hero[lv_player], null, true);
    UnitBehaviorAdd(gv_hero[lv_player], "RawMeatCounter0", gv_hero[lv_player], 1);
    CameraPan(lv_player, UnitGetPosition(gv_hero[lv_player]), 1.0, -1, 10.0, false);
    libNtve_gf_SetDialogItemText(gv_playerstatus[lv_player], StringExternal("Param/Value/9D5B99AA"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoobResurrectionTime_Init () {
    gt_NoobResurrectionTime = TriggerCreate("gt_NoobResurrectionTime_Func");
    TriggerAddEventTimer(gt_NoobResurrectionTime, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Noob TIme
//--------------------------------------------------------------------------------------------------
bool gt_EndNoobTIme_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowDestroy(gv_noobTimerWindow);
    DialogDestroy(gv_voidTime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndNoobTIme_Init () {
    gt_EndNoobTIme = TriggerCreate("gt_EndNoobTIme_Func");
    TriggerAddEventTimer(gt_EndNoobTIme, gv_noobTime);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tips
//--------------------------------------------------------------------------------------------------
bool gt_Tips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialog;
    int lv_label;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_label = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorTop, 0, 100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 400, c_anchorCenter, 0, 0, (StringExternal("Param/Value/A5FD2CD6") + (FixedToText(gv_version, 2) + StringExternal("Param/Value/E8A6D58F"))), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_label = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(lv_label, PlayerGroupAll(), 7.5, 100.0);
    Wait(7.5, c_timeGame);
    DialogDestroy(lv_dialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tips_Init () {
    gt_Tips = TriggerCreate("gt_Tips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Morph 1
//--------------------------------------------------------------------------------------------------
bool gt_TreeMorph1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("TreeMorphToNoRadius", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeMorph1_Init () {
    gt_TreeMorph1 = TriggerCreate("gt_TreeMorph1_Func");
    TriggerAddEventUnitBehaviorChange(gt_TreeMorph1, null, "TreeRevival2", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tree Morph 2
//--------------------------------------------------------------------------------------------------
bool gt_TreeMorph2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("TreeMorphToRegular", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TreeMorph2_Init () {
    gt_TreeMorph2 = TriggerCreate("gt_TreeMorph2_Func");
    TriggerAddEventUnitBehaviorChange(gt_TreeMorph2, null, "TreeRevival22", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generate Base Herbs
//--------------------------------------------------------------------------------------------------
bool gt_GenerateBaseHerbs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mushroom")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "MushroomItem");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "ThistleBush")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "Thistle");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Butsu")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "ButsuItem");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Aquee")) {
            if (((RandomInt(1, 100) >= 1) && (RandomInt(1, 100) <= 50))) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                UnitInventoryCreate(UnitGroupLoopCurrent(), "RiverRoot");
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
            }
            else {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                UnitInventoryCreate(UnitGroupLoopCurrent(), "RiverStem");
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
            }
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenerateBaseHerbs_Init () {
    gt_GenerateBaseHerbs = TriggerCreate("gt_GenerateBaseHerbs_Func");
    TriggerAddEventTimePeriodic(gt_GenerateBaseHerbs, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generate Special Herbs
//--------------------------------------------------------------------------------------------------
bool gt_GenerateSpecialHerbs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThorn")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "ShadowsThornItem");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "StormLeaf")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "StormLeafItem");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "OceansBreathe")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "OceansBreatheItem");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "InfernoRoot")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.01);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
            UnitInventoryCreate(UnitGroupLoopCurrent(), "InfernoRootItem");
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenerateSpecialHerbs_Init () {
    gt_GenerateSpecialHerbs = TriggerCreate("gt_GenerateSpecialHerbs_Func");
    TriggerAddEventTimePeriodic(gt_GenerateSpecialHerbs, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trade Ship Stop 2
//--------------------------------------------------------------------------------------------------
bool gt_TradeShipStop2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(5863)) || (EventUnit() == UnitFromId(5868)) || (EventUnit() == UnitFromId(1055))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "move", false);
    UnitSetState(EventUnit(), c_unitStateMoveSuppressed, false);
    UnitAbilityEnable(EventUnit(), "ShareControl", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TradeShipStop2_Init () {
    gt_TradeShipStop2 = TriggerCreate("gt_TradeShipStop2_Func");
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(119), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(107), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(106), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(123), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(105), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(104), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(103), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(102), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(101), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(100), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(99), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(98), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(97), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(96), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(95), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(124), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop2, null, RegionFromId(93), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trade Ship Stop
//--------------------------------------------------------------------------------------------------
bool gt_TradeShipStop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == UnitFromId(1056)) || (EventUnit() == UnitFromId(5864)) || (EventUnit() == UnitFromId(5860))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "move", false);
    UnitSetState(EventUnit(), c_unitStateMoveSuppressed, false);
    UnitAbilityEnable(EventUnit(), "ShareControl", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TradeShipStop_Init () {
    gt_TradeShipStop = TriggerCreate("gt_TradeShipStop_Func");
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(94), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(122), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(121), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(118), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(117), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(116), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(115), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(114), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(113), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(112), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(111), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(110), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(109), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(108), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(49), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(46), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(44), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(43), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(42), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_TradeShipStop, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Trade Ships
//--------------------------------------------------------------------------------------------------
bool gt_MoveTradeShips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_route1Counter;
    int lv_route2Counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_tradeShipsRoute1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_tradeShipRoute1PathID[lv_route1Counter] = (gv_tradeShipRoute1PathID[lv_route1Counter] + 1);
        if ((gv_tradeShipRoute1PathID[lv_route1Counter] > 27)) {
            gv_tradeShipRoute1PathID[lv_route1Counter] = 0;
        }

        UnitAbilityEnable(UnitGroupLoopCurrent(), "ShareControl", false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, true);
        UnitAbilityEnable(UnitGroupLoopCurrent(), "move", true);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_tradeShipRoute1Path[gv_tradeShipRoute1PathID[lv_route1Counter]])), c_orderQueueReplace);
        lv_route1Counter = (lv_route1Counter + 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_tradeShipsRoute2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_tradeShipRoute2PathID[lv_route2Counter] = (gv_tradeShipRoute2PathID[lv_route2Counter] + 1);
        if ((gv_tradeShipRoute2PathID[lv_route2Counter] > 27)) {
            gv_tradeShipRoute2PathID[lv_route2Counter] = 0;
        }

        UnitAbilityEnable(UnitGroupLoopCurrent(), "ShareControl", false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, true);
        UnitAbilityEnable(UnitGroupLoopCurrent(), "move", true);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_tradeShipRoute2Path[gv_tradeShipRoute2PathID[lv_route2Counter]])), c_orderQueueReplace);
        lv_route2Counter = (lv_route2Counter + 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveTradeShips_Init () {
    gt_MoveTradeShips = TriggerCreate("gt_MoveTradeShips_Func");
    TriggerAddEventTimePeriodic(gt_MoveTradeShips, 45.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Trade Ships
//--------------------------------------------------------------------------------------------------
bool gt_SetTradeShips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_tradeShipsRoute1, UnitFromId(5864));
    UnitGroupAdd(gv_tradeShipsRoute1, UnitFromId(5860));
    UnitGroupAdd(gv_tradeShipsRoute1, UnitFromId(1056));
    UnitGroupAdd(gv_tradeShipsRoute2, UnitFromId(5863));
    UnitGroupAdd(gv_tradeShipsRoute2, UnitFromId(5868));
    UnitGroupAdd(gv_tradeShipsRoute2, UnitFromId(1055));
    UnitGroupLoopBegin(gv_tradeShipsRoute1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "ShareControl", true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, false);
        UnitAbilityEnable(UnitGroupLoopCurrent(), "move", false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_tradeShipsRoute2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "ShareControl", true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, false);
        UnitAbilityEnable(UnitGroupLoopCurrent(), "move", false);
    }
    UnitGroupLoopEnd();
    gv_tradeShipRoute1Path[0] = RegionFromId(3);
    gv_tradeShipRoute1Path[1] = RegionFromId(15);
    gv_tradeShipRoute1Path[2] = RegionFromId(41);
    gv_tradeShipRoute1Path[3] = RegionFromId(42);
    gv_tradeShipRoute1Path[4] = RegionFromId(43);
    gv_tradeShipRoute1Path[5] = RegionFromId(44);
    gv_tradeShipRoute1Path[6] = RegionFromId(45);
    gv_tradeShipRoute1Path[7] = RegionFromId(46);
    gv_tradeShipRoute1Path[8] = RegionFromId(47);
    gv_tradeShipRoute1Path[9] = RegionFromId(6);
    gv_tradeShipRoute1Path[10] = RegionFromId(7);
    gv_tradeShipRoute1Path[11] = RegionFromId(48);
    gv_tradeShipRoute1Path[12] = RegionFromId(49);
    gv_tradeShipRoute1Path[13] = RegionFromId(108);
    gv_tradeShipRoute1Path[14] = RegionFromId(109);
    gv_tradeShipRoute1Path[15] = RegionFromId(110);
    gv_tradeShipRoute1Path[16] = RegionFromId(111);
    gv_tradeShipRoute1Path[17] = RegionFromId(112);
    gv_tradeShipRoute1Path[18] = RegionFromId(113);
    gv_tradeShipRoute1Path[19] = RegionFromId(114);
    gv_tradeShipRoute1Path[20] = RegionFromId(115);
    gv_tradeShipRoute1Path[21] = RegionFromId(116);
    gv_tradeShipRoute1Path[22] = RegionFromId(117);
    gv_tradeShipRoute1Path[23] = RegionFromId(118);
    gv_tradeShipRoute1Path[24] = RegionFromId(121);
    gv_tradeShipRoute1Path[25] = RegionFromId(122);
    gv_tradeShipRoute1Path[26] = RegionFromId(16);
    gv_tradeShipRoute1Path[27] = RegionFromId(94);
    gv_tradeShipRoute2Path[0] = RegionFromId(93);
    gv_tradeShipRoute2Path[1] = RegionFromId(11);
    gv_tradeShipRoute2Path[2] = RegionFromId(17);
    gv_tradeShipRoute2Path[3] = RegionFromId(18);
    gv_tradeShipRoute2Path[4] = RegionFromId(19);
    gv_tradeShipRoute2Path[5] = RegionFromId(20);
    gv_tradeShipRoute2Path[6] = RegionFromId(21);
    gv_tradeShipRoute2Path[7] = RegionFromId(4);
    gv_tradeShipRoute2Path[8] = RegionFromId(22);
    gv_tradeShipRoute2Path[9] = RegionFromId(5);
    gv_tradeShipRoute2Path[10] = RegionFromId(23);
    gv_tradeShipRoute2Path[11] = RegionFromId(124);
    gv_tradeShipRoute2Path[12] = RegionFromId(9);
    gv_tradeShipRoute2Path[13] = RegionFromId(95);
    gv_tradeShipRoute2Path[14] = RegionFromId(96);
    gv_tradeShipRoute2Path[15] = RegionFromId(97);
    gv_tradeShipRoute2Path[16] = RegionFromId(98);
    gv_tradeShipRoute2Path[17] = RegionFromId(99);
    gv_tradeShipRoute2Path[18] = RegionFromId(100);
    gv_tradeShipRoute2Path[19] = RegionFromId(101);
    gv_tradeShipRoute2Path[20] = RegionFromId(102);
    gv_tradeShipRoute2Path[21] = RegionFromId(103);
    gv_tradeShipRoute2Path[22] = RegionFromId(104);
    gv_tradeShipRoute2Path[23] = RegionFromId(105);
    gv_tradeShipRoute2Path[24] = RegionFromId(123);
    gv_tradeShipRoute2Path[25] = RegionFromId(106);
    gv_tradeShipRoute2Path[26] = RegionFromId(107);
    gv_tradeShipRoute2Path[27] = RegionFromId(119);
    gv_tradeShipRoute1PathID[0] = 0;
    gv_tradeShipRoute1PathID[1] = 4;
    gv_tradeShipRoute1PathID[2] = 24;
    gv_tradeShipRoute2PathID[0] = 7;
    gv_tradeShipRoute2PathID[1] = 11;
    gv_tradeShipRoute2PathID[2] = 15;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetTradeShips_Init () {
    gt_SetTradeShips = TriggerCreate("gt_SetTradeShips_Func");
    TriggerAddEventMapInit(gt_SetTradeShips);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Select Time
//--------------------------------------------------------------------------------------------------
bool gt_EndSelectTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_selectedMode;
    int lv_chance;

    // Variable Initialization
    lv_selectedMode = 1;
    lv_chance = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RunSelectHero, false);
    if ((gv_acceleratedMode > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        gv_acceleratedModeEnabled = true;
    }

    if ((gv_basicModeVotes > gv_standardModeVotes) && (gv_basicModeVotes > gv_advancedModeVotes) && (gv_basicModeVotes > gv_hardcoreModeVotes)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/EA2386D2"));
        lv_selectedMode = 0;
        gv_noobTimeDuration = 1200.0;
        TriggerEnable(gt_HeroPostNoobDeath, true);
        TriggerEnable(gt_BasicKarak, true);
        TriggerEnable(gt_BasicItemSpawn, true);
        TriggerEnable(gt_BasicInitialItemsBeasts, true);
        TriggerEnable(gt_StandardBeastSpawn, true);
        TriggerExecute(gt_BasicInitialItemsBeasts, true, false);
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "EasyEnemy", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    else {
        if ((gv_advancedModeVotes > gv_basicModeVotes) && (gv_advancedModeVotes > gv_standardModeVotes) && (gv_advancedModeVotes > gv_hardcoreModeVotes)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/08E5C22F"));
            lv_selectedMode = 2;
            gv_noobTimeDuration = 300.0;
            TriggerEnable(gt_HeroPostNoobDeath, true);
            TriggerEnable(gt_AdvancedKarak, true);
            TriggerEnable(gt_AdvancedItemSpawn, true);
            TriggerEnable(gt_AdvanceBeastSpawn, true);
            TriggerEnable(gt_StandardInitialItemsBeasts, true);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "HardcoreEnemy2", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
            TriggerExecute(gt_StandardInitialItemsBeasts, true, false);
        }
        else {
            if ((gv_hardcoreModeVotes > gv_basicModeVotes) && (gv_hardcoreModeVotes > gv_standardModeVotes) && (gv_hardcoreModeVotes > gv_advancedModeVotes)) {
                lv_selectedMode = 3;
                gv_noobTimeDuration = 1.0;
                TriggerEnable(gt_HeroPostNoobDeathHardcore, true);
                TriggerEnable(gt_HardcoreKarak, true);
                TriggerEnable(gt_HardcoreItemSpawn, true);
                TriggerEnable(gt_HardcoreInitialItemsBeasts, true);
                TriggerEnable(gt_HardcoreBeastSpawn, true);
                UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "HardcoreEnemy", UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_HardcoreInitialItemsBeasts, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9F386049"));
            }
            else {
                if ((gv_standardModeVotes > gv_basicModeVotes) && (gv_standardModeVotes > gv_advancedModeVotes) && (gv_standardModeVotes > gv_hardcoreModeVotes)) {
                    TriggerEnable(gt_HeroPostNoobDeath, true);
                    TriggerEnable(gt_StandardItemSpawn, true);
                    TriggerEnable(gt_StandardInitialItemsBeasts, true);
                    TriggerEnable(gt_StandardBeastSpawn, true);
                    TriggerExecute(gt_StandardInitialItemsBeasts, true, false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/DE4FC1D5"));
                }
                else {
                    TriggerEnable(gt_HeroPostNoobDeath, true);
                    TriggerEnable(gt_StandardItemSpawn, true);
                    TriggerEnable(gt_StandardInitialItemsBeasts, true);
                    TriggerEnable(gt_StandardBeastSpawn, true);
                    TriggerExecute(gt_StandardInitialItemsBeasts, true, false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D712C082"));
                }
            }
        }
    }
    TriggerExecute(gt_NoobTime, true, false);
    DialogSetVisible(gv_menu, PlayerGroupAll(), false);
    TimerWindowDestroy(gv_selectionTimerWindow);
    PlayerGroupLoopBegin(gv_noHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_chance = RandomInt(1, 7);
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            if ((lv_chance == 1)) {
                gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Probe";
            }
            else {
                if ((lv_chance == 2)) {
                    gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Zealot";
                }
                else {
                    if ((lv_chance == 3)) {
                        gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "HighTemplar";
                    }
                    else {
                        if ((lv_chance == 4)) {
                            gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "PreserverC";
                        }
                        else {
                            if ((lv_chance == 5)) {
                                gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Thief";
                            }
                            else {
                                if ((lv_chance == 6)) {
                                    gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Techie";
                                }
                                else {
                                    gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Voidmancer";
                                }
                            }
                        }
                    }
                }
            }
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }
                                        else {
                                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p9, 1))) {
                                                lv_spawnPoint = PointFromId(5844);
                                            }
                                            else {
                                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p10, 1))) {
                                                    lv_spawnPoint = PointFromId(5845);
                                                }
                                                else {
                                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p11, 1))) {
                                                        lv_spawnPoint = PointFromId(5846);
                                                    }
                                                    else {
                                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p12, 1))) {
                                                            lv_spawnPoint = PointFromId(5847);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            if ((lv_selectedMode == 3)) {
                UnitBehaviorAdd(UnitLastCreated(), "HardcoreDeath2", UnitLastCreated(), 1);
            }
            else {
                if ((lv_selectedMode == 2)) {
                    UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay", UnitLastCreated(), 1);
                }
                else {
                    if ((lv_selectedMode == 0)) {
                        UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay2", UnitLastCreated(), 1);
                    }

                }
            }
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            if ((gv_acceleratedModeEnabled == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "AcceleratedMode", UnitLastCreated(), 1);
            }

            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 100);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            PlayerGroupRemove(gv_noHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_selectedHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }
                                        else {
                                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p9, 1))) {
                                                lv_spawnPoint = PointFromId(5844);
                                            }
                                            else {
                                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p10, 1))) {
                                                    lv_spawnPoint = PointFromId(5845);
                                                }
                                                else {
                                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p11, 1))) {
                                                        lv_spawnPoint = PointFromId(5846);
                                                    }
                                                    else {
                                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p12, 1))) {
                                                            lv_spawnPoint = PointFromId(5847);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            if ((lv_selectedMode == 3)) {
                UnitBehaviorAdd(UnitLastCreated(), "HardcoreDeath2", UnitLastCreated(), 1);
            }
            else {
                if ((lv_selectedMode == 2)) {
                    UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay", UnitLastCreated(), 1);
                }
                else {
                    if ((lv_selectedMode == 0)) {
                        UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay2", UnitLastCreated(), 1);
                    }

                }
            }
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            if ((gv_acceleratedModeEnabled == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "AcceleratedMode", UnitLastCreated(), 1);
            }

            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 100);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            PlayerGroupRemove(gv_selectedHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    TimerWindowShow(gv_noobTimerWindow, PlayerGroupAll(), true);
    if ((lv_selectedMode == 3)) {
        TriggerEnable(gt_HardcoreApplyColdDepleteVespene, true);
    }
    else {
        if ((lv_selectedMode == 2)) {
            TriggerEnable(gt_AdvanceApplyColdDepleteVespene, true);
        }
        else {
            TriggerEnable(gt_ApplyColdDepleteVespene, true);
        }
    }
    TriggerEnable(gt_ApplyHungerDepleteTerrazine, true);
    TriggerEnable(gt_Hypothermia, true);
    TriggerEnable(gt_Starvation, true);
    TriggerEnable(gt_Insomnia, true);
    TriggerEnable(gt_HeatCap, true);
    TriggerEnable(gt_LoseCheck, true);
    TriggerEnable(gt_VictoryCheck, true);
    TriggerExecute(gt_Tips, true, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    DialogSetVisible(gv_heroPickDialog[1], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[2], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[3], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[4], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[5], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[6], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[7], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[8], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[9], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[10], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[11], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[12], PlayerGroupActive(), false);
    DialogSetVisible(gv_hidescoreboardbox, PlayerGroupActive(), true);
    DialogSetVisible(gv_scoreboardscreen, PlayerGroupActive(), true);
    if ((gv_victoryEnabled > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/93246834"));
        gv_victoryBoolean = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/59B49436"));
    }
    if ((gv_airShipsEnabled > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        TriggerEnable(gt_AirShipsBehavior, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/C0E22DF9"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/8FACBAB4"));
    }
    if ((gv_acceleratedMode > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/94AFFE74"));
        gv_basicItemSpawnTime = 14.0;
        gv_standardItemSpawnTime = 24.5;
        gv_advancedItemSpawnTime = 38.5;
        gv_hardcoreItemSpawnTime = 52.5;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/648C5C4F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndSelectTime_Init () {
    gt_EndSelectTime = TriggerCreate("gt_EndSelectTime_Func");
    TriggerAddEventTimer(gt_EndSelectTime, gv_selectionTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force End Select Time
//--------------------------------------------------------------------------------------------------
bool gt_ForceEndSelectTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_selectedMode;
    int lv_chance;

    // Variable Initialization
    lv_selectedMode = 1;
    lv_chance = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RunSelectHero, false);
    if ((gv_acceleratedMode > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        gv_acceleratedModeEnabled = true;
    }

    if ((gv_basicModeVotes > gv_standardModeVotes) && (gv_basicModeVotes > gv_advancedModeVotes) && (gv_basicModeVotes > gv_hardcoreModeVotes)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E22ED083"));
        lv_selectedMode = 0;
        gv_noobTimeDuration = 1200.0;
        TriggerEnable(gt_HeroPostNoobDeath, true);
        TriggerEnable(gt_BasicKarak, true);
        TriggerEnable(gt_BasicItemSpawn, true);
        TriggerEnable(gt_BasicInitialItemsBeasts, true);
        TriggerEnable(gt_StandardBeastSpawn, true);
        TriggerExecute(gt_BasicInitialItemsBeasts, true, false);
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "EasyEnemy", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    else {
        if ((gv_advancedModeVotes > gv_basicModeVotes) && (gv_advancedModeVotes > gv_standardModeVotes) && (gv_advancedModeVotes > gv_hardcoreModeVotes)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F0D8B9BF"));
            lv_selectedMode = 2;
            gv_noobTimeDuration = 300.0;
            TriggerEnable(gt_HeroPostNoobDeath, true);
            TriggerEnable(gt_AdvancedKarak, true);
            TriggerEnable(gt_AdvancedItemSpawn, true);
            TriggerEnable(gt_AdvanceBeastSpawn, true);
            TriggerEnable(gt_StandardInitialItemsBeasts, true);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "HardcoreEnemy2", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
            TriggerExecute(gt_StandardInitialItemsBeasts, true, false);
        }
        else {
            if ((gv_hardcoreModeVotes > gv_basicModeVotes) && (gv_hardcoreModeVotes > gv_standardModeVotes) && (gv_hardcoreModeVotes > gv_advancedModeVotes)) {
                lv_selectedMode = 3;
                gv_noobTimeDuration = 1.0;
                TriggerEnable(gt_HeroPostNoobDeathHardcore, true);
                TriggerEnable(gt_HardcoreKarak, true);
                TriggerEnable(gt_HardcoreItemSpawn, true);
                TriggerEnable(gt_HardcoreBeastSpawn, true);
                TriggerEnable(gt_HardcoreInitialItemsBeasts, true);
                UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "HardcoreEnemy", UnitGroupLoopCurrent(), 1);
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_HardcoreInitialItemsBeasts, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F7DABE3E"));
            }
            else {
                if ((gv_standardModeVotes > gv_basicModeVotes) && (gv_standardModeVotes > gv_advancedModeVotes) && (gv_standardModeVotes > gv_hardcoreModeVotes)) {
                    TriggerEnable(gt_HeroPostNoobDeath, true);
                    TriggerEnable(gt_StandardItemSpawn, true);
                    TriggerEnable(gt_StandardInitialItemsBeasts, true);
                    TriggerEnable(gt_StandardBeastSpawn, true);
                    TriggerExecute(gt_StandardInitialItemsBeasts, true, false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/BA0C8466"));
                }
                else {
                    TriggerEnable(gt_HeroPostNoobDeath, true);
                    TriggerEnable(gt_StandardItemSpawn, true);
                    TriggerEnable(gt_StandardInitialItemsBeasts, true);
                    TriggerEnable(gt_StandardBeastSpawn, true);
                    TriggerExecute(gt_StandardInitialItemsBeasts, true, false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B8B9D7C0"));
                }
            }
        }
    }
    TriggerExecute(gt_NoobTime, true, false);
    DialogSetVisible(gv_menu, PlayerGroupAll(), false);
    TimerWindowDestroy(gv_selectionTimerWindow);
    lv_chance = RandomInt(1, 7);
    PlayerGroupLoopBegin(gv_noHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            if ((lv_chance == 1)) {
                gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Probe";
            }
            else {
                if ((lv_chance == 2)) {
                    gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Zealot";
                }
                else {
                    if ((lv_chance == 3)) {
                        gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "HighTemplar";
                    }
                    else {
                        if ((lv_chance == 4)) {
                            gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "PreserverC";
                        }
                        else {
                            if ((lv_chance == 5)) {
                                gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Thief";
                            }
                            else {
                                if ((lv_chance == 6)) {
                                    gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Techie";
                                }
                                else {
                                    gv_heroTypeSelection[PlayerGroupLoopCurrent()] = "Voidmancer";
                                }
                            }
                        }
                    }
                }
            }
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }
                                        else {
                                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p9, 1))) {
                                                lv_spawnPoint = PointFromId(5844);
                                            }
                                            else {
                                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p10, 1))) {
                                                    lv_spawnPoint = PointFromId(5845);
                                                }
                                                else {
                                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p11, 1))) {
                                                        lv_spawnPoint = PointFromId(5846);
                                                    }
                                                    else {
                                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p12, 1))) {
                                                            lv_spawnPoint = PointFromId(5847);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            if ((lv_selectedMode == 3)) {
                UnitBehaviorAdd(UnitLastCreated(), "HardcoreDeath2", UnitLastCreated(), 1);
            }
            else {
                if ((lv_selectedMode == 2)) {
                    UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay", UnitLastCreated(), 1);
                }
                else {
                    if ((lv_selectedMode == 0)) {
                        UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay2", UnitLastCreated(), 1);
                    }

                }
            }
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            if ((gv_acceleratedModeEnabled == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "AcceleratedMode", UnitLastCreated(), 1);
            }

            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 100);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            PlayerGroupRemove(gv_noHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_selectedHero);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), PlayerGroupLoopCurrent()) == true)) {
            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p1, 1))) {
                lv_spawnPoint = PointFromId(5858);
            }
            else {
                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p2, 1))) {
                    lv_spawnPoint = PointFromId(10);
                }
                else {
                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p3, 1))) {
                        lv_spawnPoint = PointFromId(477);
                    }
                    else {
                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p4, 1))) {
                            lv_spawnPoint = PointFromId(1357);
                        }
                        else {
                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p5, 1))) {
                                lv_spawnPoint = PointFromId(1399);
                            }
                            else {
                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p6, 1))) {
                                    lv_spawnPoint = PointFromId(5841);
                                }
                                else {
                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p7, 1))) {
                                        lv_spawnPoint = PointFromId(5842);
                                    }
                                    else {
                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p8, 1))) {
                                            lv_spawnPoint = PointFromId(5843);
                                        }
                                        else {
                                            if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p9, 1))) {
                                                lv_spawnPoint = PointFromId(5844);
                                            }
                                            else {
                                                if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p10, 1))) {
                                                    lv_spawnPoint = PointFromId(5845);
                                                }
                                                else {
                                                    if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p11, 1))) {
                                                        lv_spawnPoint = PointFromId(5846);
                                                    }
                                                    else {
                                                        if ((PlayerGroupLoopCurrent() == PlayerGroupPlayer(gv_p12, 1))) {
                                                            lv_spawnPoint = PointFromId(5847);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_heroTypeSelection[PlayerGroupLoopCurrent()], 0, PlayerGroupLoopCurrent(), lv_spawnPoint);
            if ((lv_selectedMode == 3)) {
                UnitBehaviorAdd(UnitLastCreated(), "HardcoreDeath2", UnitLastCreated(), 1);
            }
            else {
                if ((lv_selectedMode == 2)) {
                    UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay", UnitLastCreated(), 1);
                }
                else {
                    if ((lv_selectedMode == 0)) {
                        UnitBehaviorAdd(UnitLastCreated(), "AdvanceDecay2", UnitLastCreated(), 1);
                    }

                }
            }
            gv_hero[PlayerGroupLoopCurrent()] = UnitLastCreated();
            if ((gv_acceleratedModeEnabled == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "AcceleratedMode", UnitLastCreated(), 1);
            }

            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 100);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 0, true);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 0, false);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            PlayerGroupRemove(gv_selectedHero, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    TimerWindowShow(gv_noobTimerWindow, PlayerGroupAll(), true);
    if ((lv_selectedMode == 3)) {
        TriggerEnable(gt_HardcoreApplyColdDepleteVespene, true);
    }
    else {
        if ((lv_selectedMode == 2)) {
            TriggerEnable(gt_AdvanceApplyColdDepleteVespene, true);
        }
        else {
            TriggerEnable(gt_ApplyColdDepleteVespene, true);
        }
    }
    TriggerEnable(gt_ApplyHungerDepleteTerrazine, true);
    TriggerEnable(gt_Hypothermia, true);
    TriggerEnable(gt_Starvation, true);
    TriggerEnable(gt_Insomnia, true);
    TriggerEnable(gt_HeatCap, true);
    TriggerEnable(gt_LoseCheck, true);
    TriggerEnable(gt_VictoryCheck, true);
    TriggerExecute(gt_Tips, true, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    DialogSetVisible(gv_heroPickDialog[1], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[2], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[3], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[4], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[5], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[6], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[7], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[8], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[9], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[10], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[11], PlayerGroupActive(), false);
    DialogSetVisible(gv_heroPickDialog[12], PlayerGroupActive(), false);
    DialogSetVisible(gv_hidescoreboardbox, PlayerGroupActive(), true);
    DialogSetVisible(gv_scoreboardscreen, PlayerGroupActive(), true);
    if ((gv_victoryEnabled > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        gv_victoryBoolean = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/69922B28"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/8ADAA488"));
    }
    if ((gv_airShipsEnabled > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        TriggerEnable(gt_AirShipsBehavior, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/2CB0FF09"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B7C90FA1"));
    }
    if ((gv_acceleratedMode > (PlayerGroupCount(PlayerGroupActive()) / 2))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/2EF80E70"));
        gv_basicItemSpawnTime = 14.0;
        gv_standardItemSpawnTime = 24.5;
        gv_advancedItemSpawnTime = 38.5;
        gv_hardcoreItemSpawnTime = 52.5;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CA818731"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceEndSelectTime_Init () {
    gt_ForceEndSelectTime = TriggerCreate("gt_ForceEndSelectTime_Func");
    TriggerEnable(gt_ForceEndSelectTime, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Select Hero
//--------------------------------------------------------------------------------------------------
bool gt_RunSelectHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_choose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_forager.dds", PlayerGroupAll());
    PlayerGroupRemove(gv_noHero, EventPlayer());
    PlayerGroupAdd(gv_selectedHero, EventPlayer());
    DialogControlSetEnabled(gv_choose, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_heroTypeSelection[EventPlayer()] == "Probe")) {
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\probeportrait_static.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/481F32DD"), PlayerGroupAll());
    }
    else {
        if ((gv_heroTypeSelection[EventPlayer()] == "PreserverC")) {
            libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\preserver3portrait_static.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/0C4C49AB"), PlayerGroupAll());
        }
        else {
            if ((gv_heroTypeSelection[EventPlayer()] == "Zealot")) {
                libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\zealotportrait_static.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/F125FE4D"), PlayerGroupAll());
            }
            else {
                if ((gv_heroTypeSelection[EventPlayer()] == "Thief")) {
                    libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\darktemplar2portrait_static.dds", PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/DD269414"), PlayerGroupAll());
                }
                else {
                    if ((gv_heroTypeSelection[EventPlayer()] == "HighTemplar")) {
                        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\hightemplarportrait_static.dds", PlayerGroupAll());
                        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/695643F2"), PlayerGroupAll());
                    }
                    else {
                        if ((gv_heroTypeSelection[EventPlayer()] == "Voidmancer")) {
                            libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\taldarimhightemplarportrait_static.dds", PlayerGroupAll());
                            libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/505D6394"), PlayerGroupAll());
                        }
                        else {
                            if ((gv_heroTypeSelection[EventPlayer()] == "Techie")) {
                                libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\adeptportrait_static.dds", PlayerGroupAll());
                                libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/3E9BFFAC"), PlayerGroupAll());
                            }

                        }
                    }
                }
            }
        }
    }
    if ((EventPlayer() == PlayerGroupPlayer(gv_p1, 1))) {
        lv_spawnPoint = PointFromId(5858);
    }
    else {
        if ((EventPlayer() == PlayerGroupPlayer(gv_p2, 1))) {
            lv_spawnPoint = PointFromId(10);
        }
        else {
            if ((EventPlayer() == PlayerGroupPlayer(gv_p3, 1))) {
                lv_spawnPoint = PointFromId(477);
            }
            else {
                if ((EventPlayer() == PlayerGroupPlayer(gv_p4, 1))) {
                    lv_spawnPoint = PointFromId(1357);
                }
                else {
                    if ((EventPlayer() == PlayerGroupPlayer(gv_p5, 1))) {
                        lv_spawnPoint = PointFromId(1399);
                    }
                    else {
                        if ((EventPlayer() == PlayerGroupPlayer(gv_p6, 1))) {
                            lv_spawnPoint = PointFromId(5841);
                        }
                        else {
                            if ((EventPlayer() == PlayerGroupPlayer(gv_p7, 1))) {
                                lv_spawnPoint = PointFromId(5842);
                            }
                            else {
                                if ((EventPlayer() == PlayerGroupPlayer(gv_p8, 1))) {
                                    lv_spawnPoint = PointFromId(5843);
                                }
                                else {
                                    if ((EventPlayer() == PlayerGroupPlayer(gv_p9, 1))) {
                                        lv_spawnPoint = PointFromId(5844);
                                    }
                                    else {
                                        if ((EventPlayer() == PlayerGroupPlayer(gv_p10, 1))) {
                                            lv_spawnPoint = PointFromId(5845);
                                        }
                                        else {
                                            if ((EventPlayer() == PlayerGroupPlayer(gv_p11, 1))) {
                                                lv_spawnPoint = PointFromId(5846);
                                            }
                                            else {
                                                if ((EventPlayer() == PlayerGroupPlayer(gv_p12, 1))) {
                                                    lv_spawnPoint = PointFromId(5847);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((PlayerGroupCount(gv_selectedHero) == PlayerGroupCount(PlayerGroupActive()))) {
        TriggerEnable(gt_EndSelectTime, false);
        TriggerEnable(gt_ForceEndSelectTime, true);
        TriggerExecute(gt_ForceEndSelectTime, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunSelectHero_Init () {
    gt_RunSelectHero = TriggerCreate("gt_RunSelectHero_Func");
    TriggerAddEventDialogControl(gt_RunSelectHero, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_RunSelectHero, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Forager
//--------------------------------------------------------------------------------------------------
bool gt_ChooseForager_Func (bool testConds, bool runActions) {
    int auto4C64E2D3_ae;
    int auto4C64E2D3_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "Probe";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_forager.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/8FC51B5E"), PlayerGroupAll());
    }

    auto4C64E2D3_ae = 18;
    auto4C64E2D3_ai = 1;
    lv_start = 0;
    for ( ; ( (auto4C64E2D3_ai >= 0 && lv_start <= auto4C64E2D3_ae) || (auto4C64E2D3_ai <= 0 && lv_start >= auto4C64E2D3_ae) ) ; lv_start += auto4C64E2D3_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("ForagerSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseForager_Init () {
    gt_ChooseForager = TriggerCreate("gt_ChooseForager_Func");
    TriggerAddEventDialogControl(gt_ChooseForager, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseForager, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Warrior
//--------------------------------------------------------------------------------------------------
bool gt_ChooseWarrior_Func (bool testConds, bool runActions) {
    int auto8AA2AB89_ae;
    int auto8AA2AB89_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "Zealot";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_warrior.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/F4F6A8A6"), PlayerGroupAll());
    }

    auto8AA2AB89_ae = 18;
    auto8AA2AB89_ai = 1;
    lv_start = 0;
    for ( ; ( (auto8AA2AB89_ai >= 0 && lv_start <= auto8AA2AB89_ae) || (auto8AA2AB89_ai <= 0 && lv_start >= auto8AA2AB89_ae) ) ; lv_start += auto8AA2AB89_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("WarriorSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseWarrior_Init () {
    gt_ChooseWarrior = TriggerCreate("gt_ChooseWarrior_Func");
    TriggerAddEventDialogControl(gt_ChooseWarrior, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseWarrior, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Thief
//--------------------------------------------------------------------------------------------------
bool gt_ChooseThief_Func (bool testConds, bool runActions) {
    int auto2CE4FD6B_ae;
    int auto2CE4FD6B_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "Thief";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_thief.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/AA3E89A2"), PlayerGroupAll());
    }

    auto2CE4FD6B_ae = 18;
    auto2CE4FD6B_ai = 1;
    lv_start = 0;
    for ( ; ( (auto2CE4FD6B_ai >= 0 && lv_start <= auto2CE4FD6B_ae) || (auto2CE4FD6B_ai <= 0 && lv_start >= auto2CE4FD6B_ae) ) ; lv_start += auto2CE4FD6B_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("ThiefSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseThief_Init () {
    gt_ChooseThief = TriggerCreate("gt_ChooseThief_Func");
    TriggerAddEventDialogControl(gt_ChooseThief, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseThief, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Templar
//--------------------------------------------------------------------------------------------------
bool gt_ChooseTemplar_Func (bool testConds, bool runActions) {
    int auto843CD27B_ae;
    int auto843CD27B_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "HighTemplar";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_templar.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/B075397F"), PlayerGroupAll());
    }

    auto843CD27B_ae = 18;
    auto843CD27B_ai = 1;
    lv_start = 0;
    for ( ; ( (auto843CD27B_ai >= 0 && lv_start <= auto843CD27B_ae) || (auto843CD27B_ai <= 0 && lv_start >= auto843CD27B_ae) ) ; lv_start += auto843CD27B_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("TemplarSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseTemplar_Init () {
    gt_ChooseTemplar = TriggerCreate("gt_ChooseTemplar_Func");
    TriggerAddEventDialogControl(gt_ChooseTemplar, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTemplar, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Beast Hunter
//--------------------------------------------------------------------------------------------------
bool gt_ChooseBeastHunter_Func (bool testConds, bool runActions) {
    int autoB1F5F54A_ae;
    int autoB1F5F54A_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "PreserverC";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_beasthunter.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/A7274725"), PlayerGroupAll());
    }

    autoB1F5F54A_ae = 18;
    autoB1F5F54A_ai = 1;
    lv_start = 0;
    for ( ; ( (autoB1F5F54A_ai >= 0 && lv_start <= autoB1F5F54A_ae) || (autoB1F5F54A_ai <= 0 && lv_start >= autoB1F5F54A_ae) ) ; lv_start += autoB1F5F54A_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("BeastHunterSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseBeastHunter_Init () {
    gt_ChooseBeastHunter = TriggerCreate("gt_ChooseBeastHunter_Func");
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseBeastHunter, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Techie
//--------------------------------------------------------------------------------------------------
bool gt_ChooseTechie_Func (bool testConds, bool runActions) {
    int auto9FF98E8F_ae;
    int auto9FF98E8F_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "Techie";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_techie.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/466CE968"), PlayerGroupAll());
    }

    auto9FF98E8F_ae = 18;
    auto9FF98E8F_ai = 1;
    lv_start = 0;
    for ( ; ( (auto9FF98E8F_ai >= 0 && lv_start <= auto9FF98E8F_ae) || (auto9FF98E8F_ai <= 0 && lv_start >= auto9FF98E8F_ae) ) ; lv_start += auto9FF98E8F_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("TechieSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseTechie_Init () {
    gt_ChooseTechie = TriggerCreate("gt_ChooseTechie_Func");
    TriggerAddEventDialogControl(gt_ChooseTechie, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseTechie, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Voidmancer
//--------------------------------------------------------------------------------------------------
bool gt_ChooseVoidmancer_Func (bool testConds, bool runActions) {
    int auto32CD450A_ae;
    int auto32CD450A_ai;

    // Variable Declarations
    int lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_heroChoice[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_noHero, EventPlayer()) == true)) {
        gv_heroTypeSelection[EventPlayer()] = "Voidmancer";
        libNtve_gf_SetDialogItemImage(gv_currentheroselectionimage[EventPlayer()], "Assets\\Textures\\selection_voidmancer.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_currentheroselectionlabel[EventPlayer()], StringExternal("Param/Value/DE78308D"), PlayerGroupAll());
    }

    auto32CD450A_ae = 18;
    auto32CD450A_ai = 1;
    lv_start = 0;
    for ( ; ( (auto32CD450A_ai >= 0 && lv_start <= auto32CD450A_ae) || (auto32CD450A_ai <= 0 && lv_start >= auto32CD450A_ae) ) ; lv_start += auto32CD450A_ai ) {
        DialogControlSetVisible(gv_foragerInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warriorInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_thiefInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_templarInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_beastHunterInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_techieInfo[lv_start], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_voidmancerInfo[lv_start], PlayerGroupSingle(EventPlayer()), true);
    }
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryVoice);
    SoundPlayForPlayer(SoundLink("VoidmancerSelected", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    DialogControlSetVisible(gv_dialogportrait[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_dialogportrait[6], PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseVoidmancer_Init () {
    gt_ChooseVoidmancer = TriggerCreate("gt_ChooseVoidmancer_Func");
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 4, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 5, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 6, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 7, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 8, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 9, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 10, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 11, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 12, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 13, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 14, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ChooseVoidmancer, 15, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fall Back Hide Info
//--------------------------------------------------------------------------------------------------
bool gt_FallBackHideInfo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_menu, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_menu, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FallBackHideInfo_Init () {
    gt_FallBackHideInfo = TriggerCreate("gt_FallBackHideInfo_Func");
    TriggerAddEventTimeElapsed(gt_FallBackHideInfo, 61.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunger Warning
//--------------------------------------------------------------------------------------------------
bool gt_HungerWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 5) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) <= 6)))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[EventPlayer()], "HungerWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FB11E53F"));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "HungerWarned", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HungerWarning_Init () {
    gt_HungerWarning = TriggerCreate("gt_HungerWarning_Func");
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunger Warning 2
//--------------------------------------------------------------------------------------------------
bool gt_HungerWarning2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 8) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) <= 9)))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[EventPlayer()], "HungerWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/32104619"));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "HungerWarned", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HungerWarning2_Init () {
    gt_HungerWarning2 = TriggerCreate("gt_HungerWarning2_Func");
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HungerWarning2, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Warning
//--------------------------------------------------------------------------------------------------
bool gt_VespeneWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 40) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) <= 55)))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[EventPlayer()], "HeatWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/8FE4DE7F"));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "HeatWarned", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneWarning_Init () {
    gt_VespeneWarning = TriggerCreate("gt_VespeneWarning_Func");
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Warning 2
//--------------------------------------------------------------------------------------------------
bool gt_VespeneWarning2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 25) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) <= 35)))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[EventPlayer()], "HeatWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A39C8D3A"));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "HeatWarned", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneWarning2_Init () {
    gt_VespeneWarning2 = TriggerCreate("gt_VespeneWarning2_Func");
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning2, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Warning 3
//--------------------------------------------------------------------------------------------------
bool gt_VespeneWarning3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 10) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) <= 20)))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[EventPlayer()], "HeatWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/52D3E4D7"));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "HeatWarned", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneWarning3_Init () {
    gt_VespeneWarning3 = TriggerCreate("gt_VespeneWarning3_Func");
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_VespeneWarning3, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Warning
//--------------------------------------------------------------------------------------------------
bool gt_EnergyWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 65.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 50.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "EnergyWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0CD4A22C"));
        UnitBehaviorAdd(EventUnit(), "EnergyWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyWarning_Init () {
    gt_EnergyWarning = TriggerCreate("gt_EnergyWarning_Func");
    TriggerAddEventUnitProperty(gt_EnergyWarning, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Warning 2
//--------------------------------------------------------------------------------------------------
bool gt_EnergyWarning2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 35.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 25.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "EnergyWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3083C90F"));
        UnitBehaviorAdd(EventUnit(), "EnergyWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyWarning2_Init () {
    gt_EnergyWarning2 = TriggerCreate("gt_EnergyWarning2_Func");
    TriggerAddEventUnitProperty(gt_EnergyWarning2, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Warning 3
//--------------------------------------------------------------------------------------------------
bool gt_EnergyWarning3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 20.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 10.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "EnergyWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FAAE090A"));
        UnitBehaviorAdd(EventUnit(), "EnergyWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyWarning3_Init () {
    gt_EnergyWarning3 = TriggerCreate("gt_EnergyWarning3_Func");
    TriggerAddEventUnitProperty(gt_EnergyWarning3, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health Warning
//--------------------------------------------------------------------------------------------------
bool gt_HealthWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 65.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) > 50.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealthWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/78C347DF"));
        UnitBehaviorAdd(EventUnit(), "HealthWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealthWarning_Init () {
    gt_HealthWarning = TriggerCreate("gt_HealthWarning_Func");
    TriggerAddEventUnitProperty(gt_HealthWarning, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health Warning 2
//--------------------------------------------------------------------------------------------------
bool gt_HealthWarning2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 45.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) > 25.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealthWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0FA4B3CF"));
        UnitBehaviorAdd(EventUnit(), "HealthWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealthWarning2_Init () {
    gt_HealthWarning2 = TriggerCreate("gt_HealthWarning2_Func");
    TriggerAddEventUnitProperty(gt_HealthWarning2, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health Warning 3
//--------------------------------------------------------------------------------------------------
bool gt_HealthWarning3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) < 20.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) > 10.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealthWarned") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BE3F7F57"));
        UnitBehaviorAdd(EventUnit(), "HealthWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealthWarning3_Init () {
    gt_HealthWarning3 = TriggerCreate("gt_HealthWarning3_Func");
    TriggerAddEventUnitProperty(gt_HealthWarning3, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Attacked Warning
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskAttackedWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > 60.0))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "UltraliskWarned") == false)) {
        SoundPlay(SoundLink("UltraliskWarning", -1), PlayerGroupAll(), 150.0, 0.0);
        UnitBehaviorAdd(EventUnit(), "UltraliskWarned", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskAttackedWarning_Init () {
    gt_UltraliskAttackedWarning = TriggerCreate("gt_UltraliskAttackedWarning_Func");
    TriggerAddEventUnitProperty(gt_UltraliskAttackedWarning, UnitRefFromUnit(UnitFromId(36)), c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Ships Behavior
//--------------------------------------------------------------------------------------------------
bool gt_AirShipsBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TechFacilityBuilt"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "AirShipsEnabled", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirShipsBehavior_Init () {
    gt_AirShipsBehavior = TriggerCreate("gt_AirShipsBehavior_Func");
    TriggerEnable(gt_AirShipsBehavior, false);
    TriggerAddEventUnitCreated(gt_AirShipsBehavior, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Cargo Ship
//--------------------------------------------------------------------------------------------------
bool gt_NewCargoShip_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "WarpPrism"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_boats, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewCargoShip_Init () {
    gt_NewCargoShip = TriggerCreate("gt_NewCargoShip_Func");
    TriggerAddEventUnitCreated(gt_NewCargoShip, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transport Ship Death
//--------------------------------------------------------------------------------------------------
bool gt_TransportShipDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[9] lv_randomshipwreck;
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CreepIsPresent(UnitGetPosition(EventUnit())) == false)) {
        if ((PointGetX(UnitGetPosition(EventUnit())) >= 128.0) && (PointGetX(UnitGetPosition(EventUnit())) <= 256.0) && (PointGetY(UnitGetPosition(EventUnit())) >= 128.0) && (PointGetY(UnitGetPosition(EventUnit())) <= 256.0)) {
            lv_randomshipwreck[0] = RegionFromId(172);
            lv_randomshipwreck[1] = RegionFromId(243);
            lv_randomshipwreck[2] = RegionFromId(244);
            lv_randomshipwreck[3] = RegionFromId(245);
            lv_randomshipwreck[4] = RegionFromId(246);
            UnitGroupLoopBegin(UnitCargoGroup(EventUnit()));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Fatigue", UnitGroupLoopCurrent(), 1);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) * 0.7));
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) * 0.7));
                lv_rng = RandomInt(0, 4);
                UnitSetPosition(UnitGroupLoopCurrent(), RegionGetCenter(lv_randomshipwreck[lv_rng]), false);
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeSummoned) == false)) {
                    CameraPan(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()), 0.5, -1, 10.0, false);
                    SoundPlayOnUnitForPlayer(SoundLink("WashAshoreCrash", -1), c_maxPlayers, PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
                }

            }
            UnitGroupLoopEnd();
            UnitKill(EventUnit());
        }

        if ((PointGetX(UnitGetPosition(EventUnit())) >= 0.0) && (PointGetX(UnitGetPosition(EventUnit())) < 128.0) && (PointGetY(UnitGetPosition(EventUnit())) >= 128.0) && (PointGetY(UnitGetPosition(EventUnit())) <= 256.0)) {
            lv_randomshipwreck[0] = RegionFromId(231);
            lv_randomshipwreck[1] = RegionFromId(239);
            lv_randomshipwreck[2] = RegionFromId(240);
            lv_randomshipwreck[3] = RegionFromId(241);
            lv_randomshipwreck[4] = RegionFromId(242);
            UnitGroupLoopBegin(UnitCargoGroup(EventUnit()));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Fatigue", UnitGroupLoopCurrent(), 1);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) * 0.7));
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) * 0.7));
                lv_rng = RandomInt(0, 4);
                UnitSetPosition(UnitGroupLoopCurrent(), RegionGetCenter(lv_randomshipwreck[lv_rng]), false);
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeSummoned) == false)) {
                    CameraPan(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()), 0.5, -1, 10.0, false);
                    SoundPlayOnUnitForPlayer(SoundLink("WashAshoreCrash", -1), c_maxPlayers, PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
                }

            }
            UnitGroupLoopEnd();
            UnitKill(EventUnit());
        }

        if ((PointGetX(UnitGetPosition(EventUnit())) >= 128.0) && (PointGetX(UnitGetPosition(EventUnit())) <= 256.0) && (PointGetY(UnitGetPosition(EventUnit())) >= 0.0) && (PointGetY(UnitGetPosition(EventUnit())) < 128.0)) {
            lv_randomshipwreck[0] = RegionFromId(229);
            lv_randomshipwreck[1] = RegionFromId(237);
            lv_randomshipwreck[2] = RegionFromId(238);
            lv_randomshipwreck[3] = RegionFromId(247);
            lv_randomshipwreck[4] = RegionFromId(248);
            UnitGroupLoopBegin(UnitCargoGroup(EventUnit()));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Fatigue", UnitGroupLoopCurrent(), 1);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) * 0.7));
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) * 0.7));
                lv_rng = RandomInt(0, 4);
                UnitSetPosition(UnitGroupLoopCurrent(), RegionGetCenter(lv_randomshipwreck[lv_rng]), false);
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeSummoned) == false)) {
                    CameraPan(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()), 0.5, -1, 10.0, false);
                    SoundPlayOnUnitForPlayer(SoundLink("WashAshoreCrash", -1), c_maxPlayers, PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
                }

            }
            UnitGroupLoopEnd();
            UnitKill(EventUnit());
        }

        if ((PointGetX(UnitGetPosition(EventUnit())) >= 0.0) && (PointGetX(UnitGetPosition(EventUnit())) < 128.0) && (PointGetY(UnitGetPosition(EventUnit())) >= 0.0) && (PointGetY(UnitGetPosition(EventUnit())) < 128.0)) {
            lv_randomshipwreck[0] = RegionFromId(230);
            lv_randomshipwreck[1] = RegionFromId(232);
            lv_randomshipwreck[2] = RegionFromId(228);
            lv_randomshipwreck[3] = RegionFromId(233);
            lv_randomshipwreck[4] = RegionFromId(234);
            lv_randomshipwreck[5] = RegionFromId(235);
            lv_randomshipwreck[6] = RegionFromId(236);
            UnitGroupLoopBegin(UnitCargoGroup(EventUnit()));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Fatigue", UnitGroupLoopCurrent(), 1);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) * 0.7));
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) * 0.7));
                lv_rng = RandomInt(0, 6);
                UnitSetPosition(UnitGroupLoopCurrent(), RegionGetCenter(lv_randomshipwreck[lv_rng]), false);
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeSummoned) == false)) {
                    CameraPan(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()), 0.5, -1, 10.0, false);
                    SoundPlayOnUnitForPlayer(SoundLink("WashAshoreCrash", -1), c_maxPlayers, PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
                }

            }
            UnitGroupLoopEnd();
            UnitKill(EventUnit());
        }

    }
    else {
        UnitKill(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransportShipDeath_Init () {
    gt_TransportShipDeath = TriggerCreate("gt_TransportShipDeath_Func");
    TriggerAddEventUnitBehaviorChange(gt_TransportShipDeath, null, "ShipWreck2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Cargo Tile
//--------------------------------------------------------------------------------------------------
bool gt_CheckCargoTile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFilter(null, c_playerAny, gv_boats, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            if ((TerrainTexture(UnitGetPosition(UnitGroupLoopCurrent())) == "UlaanSand")) {
                gv_boatorigin[lv_counter] = UnitGetPosition(UnitGroupLoopCurrent());
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, true);
            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitSetState(UnitGroupLoopCurrent(), c_unitStateMoveSuppressed, false);
                UnitSetPosition(UnitGroupLoopCurrent(), gv_boatorigin[lv_counter], false);
            }
        }

        lv_counter = (lv_counter + 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckCargoTile_Init () {
    gt_CheckCargoTile = TriggerCreate("gt_CheckCargoTile_Func");
    TriggerAddEventTimePeriodic(gt_CheckCargoTile, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hypothermia
//--------------------------------------------------------------------------------------------------
bool gt_Hypothermia_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false) && (UnitHasBehavior2(gv_hero[EventPlayer()], "Hypothermia") == false)) {
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A7A23349"));
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Hypothermia", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hypothermia_Init () {
    gt_Hypothermia = TriggerCreate("gt_Hypothermia_Func");
    TriggerEnable(gt_Hypothermia, false);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Hypothermia, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starvation
//--------------------------------------------------------------------------------------------------
bool gt_Starvation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false) && (UnitHasBehavior2(gv_hero[EventPlayer()], "Starved") == false)) {
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_UnitIsHidden(gv_hero[EventPlayer()]) == false)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0BE7EC02"));
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Starved", UnitGroupLoopCurrent(), 1);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Starvation_Init () {
    gt_Starvation = TriggerCreate("gt_Starvation_Func");
    TriggerEnable(gt_Starvation, false);
    TriggerAddEventPlayerPropChange(gt_Starvation, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Starvation, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Insomnia
//--------------------------------------------------------------------------------------------------
bool gt_Insomnia_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) == 0.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(gv_hero[UnitGetOwner(EventUnit())], "Exhaustion") == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0951CFEC"));
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Exhaustion", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Insomnia_Init () {
    gt_Insomnia = TriggerCreate("gt_Insomnia_Func");
    TriggerEnable(gt_Insomnia, false);
    TriggerAddEventUnitProperty(gt_Insomnia, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slain Death
//--------------------------------------------------------------------------------------------------
bool gt_SlainDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == null))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != null))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(libNtve_gf_KillingUnit()) == 15)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/091F5F1F"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, (StringExternal("Param/Value/386ED581") + (IntToText(UnitGetOwner(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/44D26A09"))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlainDeath_Init () {
    gt_SlainDeath = TriggerCreate("gt_SlainDeath_Func");
    TriggerAddEventUnitDied(gt_SlainDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Max Hunger
//--------------------------------------------------------------------------------------------------
bool gt_MaxHunger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxhunger;

    // Variable Initialization
    lv_maxhunger = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropTerrazine) > lv_maxhunger)) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropTerrazine, c_playerPropOperSetTo, 10);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxHunger_Init () {
    gt_MaxHunger = TriggerCreate("gt_MaxHunger_Func");
    TriggerAddEventTimePeriodic(gt_MaxHunger, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Hunger (Deplete Terrazine)
//--------------------------------------------------------------------------------------------------
bool gt_ApplyHungerDepleteTerrazine_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((PlayerGetPropertyFixed(PlayerGroupLoopCurrent(), c_playerPropTerrazine) + 1.0) < 10.0)) {
            if ((UnitIsAlive(gv_hero[PlayerGroupLoopCurrent()]) == true) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "WellFed") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "DeadHero") == false) && (gv_deadHero[PlayerGroupLoopCurrent()] == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "MortalGrasp") == false)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, 1);
            }

        }
        else {
            if ((UnitIsAlive(gv_hero[PlayerGroupLoopCurrent()]) == true) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "WellFed") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "DeadHero") == false) && (gv_deadHero[PlayerGroupLoopCurrent()] == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "MortalGrasp") == false)) {
                PlayerModifyPropertyFixed(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 10.0);
            }

        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyHungerDepleteTerrazine_Init () {
    gt_ApplyHungerDepleteTerrazine = TriggerCreate("gt_ApplyHungerDepleteTerrazine_Func");
    TriggerEnable(gt_ApplyHungerDepleteTerrazine, false);
    TriggerAddEventTimePeriodic(gt_ApplyHungerDepleteTerrazine, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add to Heat Cap
//--------------------------------------------------------------------------------------------------
bool gt_AddtoHeatCap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_maxHeat[UnitGetOwner(EventUnit())] += 25;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddtoHeatCap_Init () {
    gt_AddtoHeatCap = TriggerCreate("gt_AddtoHeatCap_Func");
    TriggerAddEventUnitBehaviorChange(gt_AddtoHeatCap, null, "UltralisksRightKaiserBlade", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Subtract from Heat Cap
//--------------------------------------------------------------------------------------------------
bool gt_SubtractfromHeatCap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_subtractedheat;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene) > 100)) {
        lv_subtractedheat = (PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene) - 100);
        if ((lv_subtractedheat > 25)) {
            lv_subtractedheat = 25;
        }

        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSubtract, lv_subtractedheat);
    }

    gv_maxHeat[UnitGetOwner(EventUnit())] -= 25;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubtractfromHeatCap_Init () {
    gt_SubtractfromHeatCap = TriggerCreate("gt_SubtractfromHeatCap_Func");
    TriggerAddEventUnitBehaviorChange(gt_SubtractfromHeatCap, null, "UltralisksRightKaiserBlade", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heat Cap
//--------------------------------------------------------------------------------------------------
bool gt_HeatCap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heatCap;

    // Variable Initialization
    lv_heatCap = 100;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[EventPlayer()], "UltralisksRightKaiserBlade") == true)) {
        lv_heatCap = 125;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > lv_heatCap)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, lv_heatCap);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeatCap_Init () {
    gt_HeatCap = TriggerCreate("gt_HeatCap_Func");
    TriggerEnable(gt_HeatCap, false);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_HeatCap, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COAT HEAT REDUCTION
//--------------------------------------------------------------------------------------------------
bool gt_COATHEATREDUCTION_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "KarakCoat") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 2);
        }

        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "LyoteCoat") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 4);
        }

        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "QuilgorCoat") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BoneCoat") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "PhaseCoatArmor") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "DeathsEmbrace") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "DeathsEmbrace1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "DeathsEmbrace2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "DeathsEmbrace3") == true)) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 6);
        }

        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "ArmoroftheGods") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ArmoroftheGods1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ArmoroftheGods2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ArmoroftheGods3") == true)) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 8);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COATHEATREDUCTION_Init () {
    gt_COATHEATREDUCTION = TriggerCreate("gt_COATHEATREDUCTION_Func");
    TriggerAddEventTimePeriodic(gt_COATHEATREDUCTION, 105.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GLOVES/BOOTS HEAT REDUCTION
//--------------------------------------------------------------------------------------------------
bool gt_GLOVESBOOTSHEATREDUCTION_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "KarakGloves") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 1);
        }

        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "KarakBoots") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 1);
        }

        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "LyoteGloves") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 2);
        }

        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "LyoteBoots") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 2);
        }

        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "UrsadakGloves") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BoneGloves") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "GlovesofInsanity") == true)) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 3);
        }

        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "QuilgorBoots") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BoneBoots") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "HydroBoots") == true)) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 3);
        }

        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "ShadowsStep") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ShadowsStep1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ShadowsStep2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ShadowsStep3") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BootsoftheTraveler") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BootsoftheTraveler1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BootsoftheTraveler2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "BootsoftheTraveler3") == true)) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 4);
        }

        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "ChaoticGauntlets") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ChaoticGauntlets1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ChaoticGauntlets2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ChaoticGauntlets3") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ClawsofAnguish") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ClawsofAnguish1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ClawsofAnguish2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ClawsofAnguish3") == true)) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < gv_maxHeat[UnitGetOwner(UnitGroupLoopCurrent())])) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 4);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GLOVESBOOTSHEATREDUCTION_Init () {
    gt_GLOVESBOOTSHEATREDUCTION = TriggerCreate("gt_GLOVESBOOTSHEATREDUCTION_Func");
    TriggerAddEventTimePeriodic(gt_GLOVESBOOTSHEATREDUCTION, 65.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Max Heat
//--------------------------------------------------------------------------------------------------
bool gt_MaxHeat_Func (bool testConds, bool runActions) {
    int autoB96F4101_ae;
    int autoB96F4101_ai;
    int auto83A11BC4_ae;
    int auto83A11BC4_ai;

    // Variable Declarations
    int lv_vespene;
    int lv_lowerValue;
    int lv_magicFireLowerValue;
    int lv_addedVespene;
    int lv_maxheat;

    // Variable Initialization
    lv_vespene = 93;
    lv_lowerValue = 93;
    lv_magicFireLowerValue = 85;
    lv_addedVespene = 8;
    lv_maxheat = 100;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "UltralisksRightKaiserBlade") == true)) {
            lv_maxheat = 125;
            lv_vespene = 118;
            lv_lowerValue = 118;
            lv_magicFireLowerValue = 110;
        }

        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "HeatBuff") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < lv_maxheat)) {
            if ((PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) > (lv_maxheat - 8))) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Toasty", UnitGroupLoopCurrent(), 1);
                auto83A11BC4_ae = lv_maxheat;
                auto83A11BC4_ai = 1;
                lv_vespene = lv_lowerValue;
                for ( ; ( (auto83A11BC4_ai >= 0 && lv_vespene <= auto83A11BC4_ae) || (auto83A11BC4_ai <= 0 && lv_vespene >= auto83A11BC4_ae) ) ; lv_vespene += auto83A11BC4_ai ) {
                    if ((PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < lv_maxheat) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) == lv_vespene)) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, lv_addedVespene);
                    }
                    else {
                        lv_addedVespene = (lv_addedVespene - 1);
                    }
                }
            }
            else {
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 9);
            }
        }
        else {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "HeatBuffMageFire") == true) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == true) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < lv_maxheat)) {
                if ((PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) > (lv_maxheat - 16))) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Toasty", UnitGroupLoopCurrent(), 1);
                    autoB96F4101_ae = lv_maxheat;
                    autoB96F4101_ai = 1;
                    lv_vespene = lv_magicFireLowerValue;
                    for ( ; ( (autoB96F4101_ai >= 0 && lv_vespene <= autoB96F4101_ae) || (autoB96F4101_ai <= 0 && lv_vespene >= autoB96F4101_ae) ) ; lv_vespene += autoB96F4101_ai ) {
                        if ((PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) < lv_maxheat) && (PlayerGetPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene) == lv_vespene)) {
                            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, lv_addedVespene);
                        }
                        else {
                            lv_addedVespene = (lv_addedVespene - 1);
                        }
                    }
                }
                else {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, 17);
                }
            }

        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxHeat_Init () {
    gt_MaxHeat = TriggerCreate("gt_MaxHeat_Func");
    TriggerAddEventTimePeriodic(gt_MaxHeat, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Cold (Deplete Vespene)
//--------------------------------------------------------------------------------------------------
bool gt_ApplyColdDepleteVespene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_hero[PlayerGroupLoopCurrent()]) == true) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Toasty") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "HeatBuff") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "HeatBuffMageFire") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "DeadHero") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "MortalGrasp") == false) && (gv_deadHero[PlayerGroupLoopCurrent()] == false) && (libNtve_gf_UnitIsInsideUnitTransport(gv_hero[PlayerGroupLoopCurrent()]) == false)) {
            if ((UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Starved") == true)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
            }

            if ((UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Exhaustion") == true)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
            }

            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyColdDepleteVespene_Init () {
    gt_ApplyColdDepleteVespene = TriggerCreate("gt_ApplyColdDepleteVespene_Func");
    TriggerEnable(gt_ApplyColdDepleteVespene, false);
    TriggerAddEventTimePeriodic(gt_ApplyColdDepleteVespene, 3.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advance Apply Cold (Deplete Vespene)
//--------------------------------------------------------------------------------------------------
bool gt_AdvanceApplyColdDepleteVespene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_hero[PlayerGroupLoopCurrent()]) == true) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Toasty") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "HeatBuff") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "HeatBuffMageFire") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "DeadHero") == false) && (gv_deadHero[PlayerGroupLoopCurrent()] == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "MortalGrasp") == false) && (libNtve_gf_UnitIsInsideUnitTransport(gv_hero[PlayerGroupLoopCurrent()]) == false)) {
            if ((UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Starved") == true)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
            }

            if ((UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Exhaustion") == true)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
            }

            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdvanceApplyColdDepleteVespene_Init () {
    gt_AdvanceApplyColdDepleteVespene = TriggerCreate("gt_AdvanceApplyColdDepleteVespene_Func");
    TriggerEnable(gt_AdvanceApplyColdDepleteVespene, false);
    TriggerAddEventTimePeriodic(gt_AdvanceApplyColdDepleteVespene, 2.1775, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hardcore Apply Cold (Deplete Vespene)
//--------------------------------------------------------------------------------------------------
bool gt_HardcoreApplyColdDepleteVespene_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_hero[PlayerGroupLoopCurrent()]) == true) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Toasty") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "HeatBuff") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "HeatBuffMageFire") == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "DeadHero") == false) && (gv_deadHero[PlayerGroupLoopCurrent()] == false) && (UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "MortalGrasp") == false) && (libNtve_gf_UnitIsInsideUnitTransport(gv_hero[PlayerGroupLoopCurrent()]) == false)) {
            if ((UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Starved") == true)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
            }

            if ((UnitHasBehavior(gv_hero[PlayerGroupLoopCurrent()], "Exhaustion") == true)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
            }

            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, 1);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HardcoreApplyColdDepleteVespene_Init () {
    gt_HardcoreApplyColdDepleteVespene = TriggerCreate("gt_HardcoreApplyColdDepleteVespene_Func");
    TriggerEnable(gt_HardcoreApplyColdDepleteVespene, false);
    TriggerAddEventTimePeriodic(gt_HardcoreApplyColdDepleteVespene, 1.55, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evade
//--------------------------------------------------------------------------------------------------
bool gt_Evade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate((StringExternal("Param/Value/C0086B7A") + StringExternal("Param/Value/502B32E9")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evade_Init () {
    gt_Evade = TriggerCreate("gt_Evade_Func");
    TriggerAddEventUnitBehaviorChange(gt_Evade, null, "DummyEvasion", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Block
//--------------------------------------------------------------------------------------------------
bool gt_Block_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate((StringExternal("Param/Value/E8204618") + StringExternal("Param/Value/FB523987")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(150*100/255,150*100/255,30*100/255));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Block_Init () {
    gt_Block = TriggerCreate("gt_Block_Func");
    TriggerAddEventUnitBehaviorChange(gt_Block, null, "DummyBlock", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boom
//--------------------------------------------------------------------------------------------------
bool gt_Boom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 3);
    if ((lv_rng == 0)) {
        TextTagCreate((StringExternal("Param/Value/EBC24E98") + StringExternal("Param/Value/CB105BAB")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    }
    else {
        if ((lv_rng == 1)) {
            TextTagCreate((StringExternal("Param/Value/74A24D45") + StringExternal("Param/Value/DFD50095")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
        }
        else {
            if ((lv_rng == 2)) {
                TextTagCreate((StringExternal("Param/Value/38CE9DC9") + StringExternal("Param/Value/50B01838")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
            }
            else {
                TextTagCreate((StringExternal("Param/Value/427051D5") + StringExternal("Param/Value/C6C3ED8F")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
            }
        }
    }
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 32.55, 32.55));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boom_Init () {
    gt_Boom = TriggerCreate("gt_Boom_Func");
    TriggerAddEventUnitBehaviorChange(gt_Boom, null, "HydroExplodeVisual", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Post Stun Hostility
//--------------------------------------------------------------------------------------------------
bool gt_PostStunHostility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "KarakMale"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.01, 0.0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostStunHostility_Init () {
    gt_PostStunHostility = TriggerCreate("gt_PostStunHostility_Func");
    TriggerAddEventUnitBehaviorChange(gt_PostStunHostility, null, "PostStunHostility", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_PostStunHostility, null, "GravitonBeam4", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_PostStunHostility, null, "GravitonBeam4", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Revive
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxHeat;

    // Variable Initialization
    lv_maxHeat = 100;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(gv_hero[UnitGetOwner(EventUnit())], "UltralisksRightKaiserBlade") == true)) {
        lv_maxHeat = 125;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeartoftheUltralisk")) {
            UnitInventoryRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, lv_maxHeat);
    UnitBehaviorRemove(EventUnit(), "Revived", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskRevive_Init () {
    gt_UltraliskRevive = TriggerCreate("gt_UltraliskRevive_Func");
    TriggerAddEventUnitBehaviorChange(gt_UltraliskRevive, null, "Revived", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair
//--------------------------------------------------------------------------------------------------
bool gt_Repair_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitTargetUnit(), "EMP", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "SystemShockwave1", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "SystemShockwaveLevel2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "Deactivated", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "Deactivated2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "SequenceOverride", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "SequenceOverride2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "AnnihilationCannon1", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "AnnihilationCannon2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "AnnihilationCannon3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Repair_Init () {
    gt_Repair = TriggerCreate("gt_Repair_Func");
    TriggerAddEventUnitAbility(gt_Repair, null, AbilityCommand("ReinforceLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Repair, null, AbilityCommand("ReinforceLevel2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Repair, null, AbilityCommand("TinkerLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Repair, null, AbilityCommand("TinkerLevel2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Repair, null, AbilityCommand("TinkerLevel3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Max
//--------------------------------------------------------------------------------------------------
bool gt_ReinforceMax_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "Reinforced") == 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ReinforcedBonus", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforceMax_Init () {
    gt_ReinforceMax = TriggerCreate("gt_ReinforceMax_Func");
    TriggerAddEventUnitBehaviorChange(gt_ReinforceMax, null, "Reinforced", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Offspring Spawn
//--------------------------------------------------------------------------------------------------
bool gt_OffspringSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offspringIntercourse;
    int lv_offspringChance;

    // Variable Initialization
    lv_offspringIntercourse = 1;
    lv_offspringChance = 20;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "KarakMale") || (UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "SpaceCowSmall") || (UnitGetType(EventUnit()) == "Predator") || (UnitGetType(EventUnit()) == "Ultralisk")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_offspringIntercourse = RandomInt(1, 100);
    if (((UnitHasBehavior(libNtve_gf_KillingUnit(), "SpiritoftheBeastEffectLevel1") == true) || (UnitHasBehavior(EventUnit(), "SpiritoftheBeastEnemyLevel1") == true))) {
        lv_offspringChance = (lv_offspringChance + 5);
        if ((lv_offspringIntercourse <= lv_offspringChance)) {
            if ((UnitGetType(EventUnit()) == "KarakMale")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "YoungKarak", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
            }
            else {
                if ((UnitGetType(EventUnit()) == "Lyote")) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LyotePup", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                }
                else {
                    if ((UnitGetType(EventUnit()) == "SpaceCowSmall")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "QuilgorCalf", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                    }
                    else {
                        if ((UnitGetType(EventUnit()) == "Predator")) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PanthorCub", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                        }
                        else {
                            if ((UnitGetType(EventUnit()) == "Ultralisk")) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                            }

                        }
                    }
                }
            }
        }

    }
    else {
        if (((UnitHasBehavior(libNtve_gf_KillingUnit(), "SpiritoftheBeastEffectLevel2") == true) || (UnitHasBehavior(EventUnit(), "SpiritoftheBeastEnemyEffectLevel2") == true))) {
            lv_offspringChance = (lv_offspringChance + 10);
            if ((lv_offspringIntercourse <= lv_offspringChance)) {
                if ((UnitGetType(EventUnit()) == "KarakMale")) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "YoungKarak", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                }
                else {
                    if ((UnitGetType(EventUnit()) == "Lyote")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LyotePup", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                    }
                    else {
                        if ((UnitGetType(EventUnit()) == "SpaceCowSmall")) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "QuilgorCalf", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                        }
                        else {
                            if ((UnitGetType(EventUnit()) == "Predator")) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PanthorCub", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                            }
                            else {
                                if ((UnitGetType(EventUnit()) == "Ultralisk")) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                    if ((RandomInt(0, 4) == 0)) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                    }

                                }

                            }
                        }
                    }
                }
            }

        }
        else {
            if (((UnitHasBehavior(EventUnit(), "SpiritoftheBeastEnemyEffectLevel3") == true) || (UnitHasBehavior(libNtve_gf_KillingUnit(), "SpiritoftheBeastEffectLevel3") == true) || (UnitHasBehavior(EventUnit(), "HuntersPrideLevel12") == true) || (UnitHasBehavior(libNtve_gf_KillingUnit(), "HuntersPrideLevel13") == true) || (UnitHasBehavior(EventUnit(), "HuntersPrideLevel2Enemy") == true) || (UnitHasBehavior(libNtve_gf_KillingUnit(), "HuntersPrideLevel22") == true) || (UnitHasBehavior(EventUnit(), "HuntersPrideLevel3Enemy") == true) || (UnitHasBehavior(libNtve_gf_KillingUnit(), "HuntersPrideLevel32") == true))) {
                lv_offspringChance = (lv_offspringChance + 15);
                if ((lv_offspringIntercourse <= lv_offspringChance)) {
                    if ((UnitGetType(EventUnit()) == "KarakMale")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "YoungKarak", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                    }
                    else {
                        if ((UnitGetType(EventUnit()) == "Lyote")) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LyotePup", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                        }
                        else {
                            if ((UnitGetType(EventUnit()) == "SpaceCowSmall")) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "QuilgorCalf", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                            }
                            else {
                                if ((UnitGetType(EventUnit()) == "Predator")) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PanthorCub", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                }
                                else {
                                    if ((UnitGetType(EventUnit()) == "Ultralisk")) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                        if ((RandomInt(0, 3) == 0)) {
                                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                        }

                                    }

                                }
                            }
                        }
                    }
                }

            }
            else {
                if ((lv_offspringIntercourse <= lv_offspringChance)) {
                    if ((UnitGetType(EventUnit()) == "KarakMale")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "YoungKarak", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                    }
                    else {
                        if ((UnitGetType(EventUnit()) == "Lyote")) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LyotePup", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                        }
                        else {
                            if ((UnitGetType(EventUnit()) == "SpaceCowSmall")) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "QuilgorCalf", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                            }
                            else {
                                if ((UnitGetType(EventUnit()) == "Predator")) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PanthorCub", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                }
                                else {
                                    if ((UnitGetType(EventUnit()) == "Ultralisk")) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                        if ((RandomInt(0, 2) == 0)) {
                                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultraling", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
                                        }

                                    }

                                }
                            }
                        }
                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OffspringSpawn_Init () {
    gt_OffspringSpawn = TriggerCreate("gt_OffspringSpawn_Func");
    TriggerAddEventUnitDied(gt_OffspringSpawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Master and Beast
//--------------------------------------------------------------------------------------------------
bool gt_SetMasterandBeast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_master[EventPlayer()] = EventUnit();
    gv_beast[EventPlayer()] = EventUnitTargetUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetMasterandBeast_Init () {
    gt_SetMasterandBeast = TriggerCreate("gt_SetMasterandBeast_Func");
    TriggerAddEventUnitAbility(gt_SetMasterandBeast, null, AbilityCommand("Domination", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_SetMasterandBeast, null, AbilityCommand("TameBeast", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tamed Beast EXP
//--------------------------------------------------------------------------------------------------
bool gt_TamedBeastEXP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "YoungKarak") || (UnitGetType(libNtve_gf_KillingUnit()) == "LyotePup") || (UnitGetType(libNtve_gf_KillingUnit()) == "QuilgorCalf") || (UnitGetType(libNtve_gf_KillingUnit()) == "PanthorCub") || (UnitGetType(libNtve_gf_KillingUnit()) == "Karak") || (UnitGetType(libNtve_gf_KillingUnit()) == "Panthor") || (UnitGetType(libNtve_gf_KillingUnit()) == "LyoteMid") || (UnitGetType(libNtve_gf_KillingUnit()) == "Quilgor") || (UnitGetType(libNtve_gf_KillingUnit()) == "MatureKarak") || (UnitGetType(libNtve_gf_KillingUnit()) == "MatureLyote") || (UnitGetType(libNtve_gf_KillingUnit()) == "UpgradedPanthor") || (UnitGetType(libNtve_gf_KillingUnit()) == "UltraliskMid") || (UnitGetType(libNtve_gf_KillingUnit()) == "Megalisk") || (UnitGetType(libNtve_gf_KillingUnit()) == "Ultraling") || (UnitGetType(libNtve_gf_KillingUnit()) == "MatureQuilgor") || (UnitGetType(libNtve_gf_KillingUnit()) == "Mutaling") || (UnitGetType(libNtve_gf_KillingUnit()) == "MutaliskBroodlord") || (UnitGetType(libNtve_gf_KillingUnit()) == "PrimalMutalisk") || (UnitGetType(libNtve_gf_KillingUnit()) == "Megalisk")))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Bone") || (UnitGetType(EventUnit()) == "ItemMedkit")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "ItemMedkit")) {
        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, c_unitPropCurrent) + 2.0));
        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, c_unitPropCurrent) + (FixedToInt(UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLifeMax, c_unitPropCurrent)) * 0.1)));
        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, c_unitPropCurrent) + 5.0));
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "WellTamed", libNtve_gf_KillingUnit(), 1);
    }
    else {
        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, c_unitPropCurrent) + 4.0));
        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, c_unitPropCurrent) + (FixedToInt(UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLifeMax, c_unitPropCurrent)) * 0.15)));
        UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLife, c_unitPropCurrent) + 10.0));
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "WellTamed", libNtve_gf_KillingUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TamedBeastEXP_Init () {
    gt_TamedBeastEXP = TriggerCreate("gt_TamedBeastEXP_Func");
    TriggerAddEventUnitDied(gt_TamedBeastEXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evolve
//--------------------------------------------------------------------------------------------------
bool gt_Evolve_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_originalOwner;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "YoungKarak") || (UnitGetType(EventUnit()) == "LyotePup") || (UnitGetType(EventUnit()) == "PanthorCub") || (UnitGetType(EventUnit()) == "QuilgorCalf") || (UnitGetType(EventUnit()) == "Ultraling") || (UnitGetType(EventUnit()) == "Mutaling") || (UnitGetType(EventUnit()) == "Karak") || (UnitGetType(EventUnit()) == "LyoteMid") || (UnitGetType(EventUnit()) == "Quilgor") || (UnitGetType(EventUnit()) == "UltraliskMid") || (UnitGetType(EventUnit()) == "Panthor") || (UnitGetType(EventUnit()) == "MutaliskBroodlord")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalOwner = UnitGetOwner(EventUnit());
    UnitIssueOrder(gv_master[UnitGetOwner(EventUnit())], Order(AbilityCommand("ReleaseMinion", 0)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    if ((UnitGetType(EventUnit()) == "YoungKarak")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Karak", 0, 0, UnitGetPosition(EventUnit()));
    }
    else {
        if ((UnitGetType(EventUnit()) == "Karak")) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatureKarak", 0, 0, UnitGetPosition(EventUnit()));
        }
        else {
            if ((UnitGetType(EventUnit()) == "LyotePup")) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "LyoteMid", 0, 0, UnitGetPosition(EventUnit()));
            }
            else {
                if ((UnitGetType(EventUnit()) == "LyoteMid")) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatureLyote", 0, 0, UnitGetPosition(EventUnit()));
                }
                else {
                    if ((UnitGetType(EventUnit()) == "QuilgorCalf")) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Quilgor", 0, 0, UnitGetPosition(EventUnit()));
                    }
                    else {
                        if ((UnitGetType(EventUnit()) == "Quilgor")) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatureQuilgor", 0, 0, UnitGetPosition(EventUnit()));
                        }
                        else {
                            if ((UnitGetType(EventUnit()) == "PanthorCub")) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Panthor", 0, 0, UnitGetPosition(EventUnit()));
                            }
                            else {
                                if ((UnitGetType(EventUnit()) == "Panthor")) {
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UpgradedPanthor", 0, 0, UnitGetPosition(EventUnit()));
                                }
                                else {
                                    if ((UnitGetType(EventUnit()) == "UltraliskMid")) {
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Megalisk", 0, 0, UnitGetPosition(EventUnit()));
                                    }
                                    else {
                                        if ((UnitGetType(EventUnit()) == "Ultraling")) {
                                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskMid", 0, 0, UnitGetPosition(EventUnit()));
                                        }
                                        else {
                                            if ((UnitGetType(EventUnit()) == "Mutaling")) {
                                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutaliskBroodlord", 0, 0, UnitGetPosition(EventUnit()));
                                            }
                                            else {
                                                if ((UnitGetType(EventUnit()) == "MutaliskBroodlord")) {
                                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalMutalisk", 0, 0, UnitGetPosition(EventUnit()));
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((UnitGetType(gv_master[lv_originalOwner]) == "PreserverC")) {
        UnitIssueOrder(gv_master[lv_originalOwner], OrderTargetingUnit(AbilityCommand("Domination", 0), UnitLastCreated()), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_master[lv_originalOwner], OrderTargetingUnit(AbilityCommand("TameBeast", 0), UnitLastCreated()), c_orderQueueReplace);
    }
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evolve_Init () {
    gt_Evolve = TriggerCreate("gt_Evolve_Func");
    TriggerAddEventUnitGainLevel(gt_Evolve, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beast Turn
//--------------------------------------------------------------------------------------------------
bool gt_BeastTurn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnitOwnerOld() != 0))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "IsBeast") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_beast[EventUnitOwnerOld()] = null;
    if ((gv_subclassingBeastHunter[EventUnitOwnerOld()] == true)) {
        UnitSetOwner(EventUnit(), 0, true);
        gv_subclassingBeastHunter[EventUnitOwnerOld()] = false;
    }
    else {
        UnitSetOwner(EventUnit(), 15, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeastTurn_Init () {
    gt_BeastTurn = TriggerCreate("gt_BeastTurn_Func");
    TriggerAddEventUnitChangeOwner(gt_BeastTurn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critical Lyote
//--------------------------------------------------------------------------------------------------
bool gt_CriticalLyote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringdamage = EventUnitDamageAmount();
    TextTagCreate((IntToText(FixedToInt(lv_triggeringdamage)) + StringExternal("Param/Value/574A8431")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CriticalLyote_Init () {
    gt_CriticalLyote = TriggerCreate("gt_CriticalLyote_Func");
    TriggerAddEventUnitDamaged(gt_CriticalLyote, null, c_unitDamageTypeAny, c_unitDamageEither, "LyoteCriticalAnkleBite");
    TriggerAddEventUnitDamaged(gt_CriticalLyote, null, c_unitDamageTypeAny, c_unitDamageEither, "LyoteCritical");
    TriggerAddEventUnitDamaged(gt_CriticalLyote, null, c_unitDamageTypeAny, c_unitDamageEither, "LyoteCriticalRip");
    TriggerAddEventUnitDamaged(gt_CriticalLyote, null, c_unitDamageTypeAny, c_unitDamageEither, "LyoteCriticalShred");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Mineral
//--------------------------------------------------------------------------------------------------
bool gt_ScanMineral_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("Mineral", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(4.31, 50.20, 54.90, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanMineral_Init () {
    gt_ScanMineral = TriggerCreate("gt_ScanMineral_Func");
    TriggerAddEventUnitAbility(gt_ScanMineral, null, AbilityCommand("ScanMineral", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Emberthorn
//--------------------------------------------------------------------------------------------------
bool gt_ScanEmberthorn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("Emberthorn", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(54.51, 23.53, 4.71, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanEmberthorn_Init () {
    gt_ScanEmberthorn = TriggerCreate("gt_ScanEmberthorn_Func");
    TriggerAddEventUnitAbility(gt_ScanEmberthorn, null, AbilityCommand("ScanEmberthorn", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Baneling Dust
//--------------------------------------------------------------------------------------------------
bool gt_ScanBanelingDust_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("BanelingDust", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(14.12, 50.59, 8.63, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanBanelingDust_Init () {
    gt_ScanBanelingDust = TriggerCreate("gt_ScanBanelingDust_Func");
    TriggerAddEventUnitAbility(gt_ScanBanelingDust, null, AbilityCommand("ScanBanelingDust", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Relic
//--------------------------------------------------------------------------------------------------
bool gt_ScanRelic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("Relic", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 50.20, 25.10, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanRelic_Init () {
    gt_ScanRelic = TriggerCreate("gt_ScanRelic_Func");
    TriggerAddEventUnitAbility(gt_ScanRelic, null, AbilityCommand("ScanRelic", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Bone
//--------------------------------------------------------------------------------------------------
bool gt_ScanBone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("Bone", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(88.24, 84.31, 68.24, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanBone_Init () {
    gt_ScanBone = TriggerCreate("gt_ScanBone_Func");
    TriggerAddEventUnitAbility(gt_ScanBone, null, AbilityCommand("ScanBone", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Stone
//--------------------------------------------------------------------------------------------------
bool gt_ScanStone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("Rock", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 50.20, 50.20, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanStone_Init () {
    gt_ScanStone = TriggerCreate("gt_ScanStone_Func");
    TriggerAddEventUnitAbility(gt_ScanStone, null, AbilityCommand("ScanStone", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Cooked Meat
//--------------------------------------------------------------------------------------------------
bool gt_ScanCookedMeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("CookedMeat", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 50.20, 50.20, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanCookedMeat_Init () {
    gt_ScanCookedMeat = TriggerCreate("gt_ScanCookedMeat_Func");
    TriggerAddEventUnitAbility(gt_ScanCookedMeat, null, AbilityCommand("ScanCookedMeat", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Void Crystal
//--------------------------------------------------------------------------------------------------
bool gt_ScanVoidCrystal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("VoidCrystal", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(15.69, 100.00, 15.69, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanVoidCrystal_Init () {
    gt_ScanVoidCrystal = TriggerCreate("gt_ScanVoidCrystal_Func");
    TriggerAddEventUnitAbility(gt_ScanVoidCrystal, null, AbilityCommand("ScanVoidCrystal", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hide
//--------------------------------------------------------------------------------------------------
bool gt_ScanHide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scanarea;

    // Variable Initialization
    lv_scanarea = 50.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel1") == true)) {
        lv_scanarea = 75.0;
    }

    if ((UnitHasBehavior(EventUnit(), "ImprovedRadiusLevel2") == true)) {
        lv_scanarea = 100.0;
    }

    UnitGroupLoopBegin(UnitGroup("KarakHide", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(25.10, 0.00, 25.10, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("LyoteHide", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(64.31, 32.16, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("QuilgorHide", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scanarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHide_Init () {
    gt_ScanHide = TriggerCreate("gt_ScanHide_Func");
    TriggerAddEventUnitAbility(gt_ScanHide, null, AbilityCommand("ScanHide", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thief's Cloak
//--------------------------------------------------------------------------------------------------
bool gt_ThiefsCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ambushdamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "ThiefCloak") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "ThiefCloak2") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "ThiefCloak3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ambushdamage = EventUnitDamageAmount();
    TextTagCreate((IntToText(FixedToInt(lv_ambushdamage)) + StringExternal("Param/Value/B84DAD08")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ThiefCloak", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ThiefCloak2", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ThiefCloak3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThiefsCloak_Init () {
    gt_ThiefsCloak = TriggerCreate("gt_ThiefsCloak_Func");
    TriggerAddEventUnitDamaged(gt_ThiefsCloak, null, c_unitDamageTypeAny, c_unitDamageEither, "PsyDaggersDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cunning [Display]
//--------------------------------------------------------------------------------------------------
bool gt_CunningDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringdamage = EventUnitDamageAmount();
    if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(EventUnit())) == true)) {
        if ((EventUnitDamageAmount() <= 18.0)) {
        }
        else {
            TextTagCreate((IntToText(FixedToInt(lv_triggeringdamage)) + StringExternal("Param/Value/BD470BAA")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
    }
    else {
        TextTagCreate((IntToText(FixedToInt(lv_triggeringdamage)) + StringExternal("Param/Value/24FDAED2")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ThiefCloak", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ThiefCloak2", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ThiefCloak3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CunningDisplay_Init () {
    gt_CunningDisplay = TriggerCreate("gt_CunningDisplay_Func");
    TriggerAddEventUnitDamaged(gt_CunningDisplay, null, c_unitDamageTypeAny, c_unitDamageEither, "PsyDaggersCrit1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dragoon
//--------------------------------------------------------------------------------------------------
bool gt_Dragoon_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Stalker";
    gv_subclassingBeastHunter[EventPlayer()] = true;
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dragoon_Init () {
    gt_Dragoon = TriggerCreate("gt_Dragoon_Func");
    TriggerAddEventButtonPressed(gt_Dragoon, c_playerAny, "Dragoon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chosen Elder
//--------------------------------------------------------------------------------------------------
bool gt_ChosenElder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "ChosenElder";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChosenElder_Init () {
    gt_ChosenElder = TriggerCreate("gt_ChosenElder_Func");
    TriggerAddEventButtonPressed(gt_ChosenElder, c_playerAny, "ChosenElder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyborg
//--------------------------------------------------------------------------------------------------
bool gt_Cyborg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Cyborg";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cyborg_Init () {
    gt_Cyborg = TriggerCreate("gt_Cyborg_Func");
    TriggerAddEventButtonPressed(gt_Cyborg, c_playerAny, "Cyborg");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha-Annihilator
//--------------------------------------------------------------------------------------------------
bool gt_MechaAnnihilator_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "MechaAnnihilator";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechaAnnihilator_Init () {
    gt_MechaAnnihilator = TriggerCreate("gt_MechaAnnihilator_Func");
    TriggerAddEventButtonPressed(gt_MechaAnnihilator, c_playerAny, "MechaAnnihilator");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sacred One
//--------------------------------------------------------------------------------------------------
bool gt_SacredOne_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Archon";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SacredOne_Init () {
    gt_SacredOne = TriggerCreate("gt_SacredOne_Func");
    TriggerAddEventButtonPressed(gt_SacredOne, c_playerAny, "SacredOne");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seeker
//--------------------------------------------------------------------------------------------------
bool gt_Seeker_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Oracle";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Seeker_Init () {
    gt_Seeker = TriggerCreate("gt_Seeker_Func");
    TriggerAddEventButtonPressed(gt_Seeker, c_playerAny, "Seeker");
}

//--------------------------------------------------------------------------------------------------
// Trigger: True Form
//--------------------------------------------------------------------------------------------------
bool gt_TrueForm_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "DehakaMirrorImage";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrueForm_Init () {
    gt_TrueForm = TriggerCreate("gt_TrueForm_Func");
    TriggerAddEventButtonPressed(gt_TrueForm, c_playerAny, "TrueForm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tele-Gatherer
//--------------------------------------------------------------------------------------------------
bool gt_TeleGatherer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Sentry";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleGatherer_Init () {
    gt_TeleGatherer = TriggerCreate("gt_TeleGatherer_Func");
    TriggerAddEventButtonPressed(gt_TeleGatherer, c_playerAny, "TeleGatherer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin
//--------------------------------------------------------------------------------------------------
bool gt_Assassin_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Zeratul";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assassin_Init () {
    gt_Assassin = TriggerCreate("gt_Assassin_Func");
    TriggerAddEventButtonPressed(gt_Assassin, c_playerAny, "Assassin");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trickster
//--------------------------------------------------------------------------------------------------
bool gt_Trickster_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "DarkTemplar";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Trickster_Init () {
    gt_Trickster = TriggerCreate("gt_Trickster_Func");
    TriggerAddEventButtonPressed(gt_Trickster, c_playerAny, "Trickster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Champion
//--------------------------------------------------------------------------------------------------
bool gt_AiurChampion_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "AiurChampion";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurChampion_Init () {
    gt_AiurChampion = TriggerCreate("gt_AiurChampion_Func");
    TriggerAddEventButtonPressed(gt_AiurChampion, c_playerAny, "AiurChampion");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient
//--------------------------------------------------------------------------------------------------
bool gt_Ancient_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[7] lv_items;
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "StoneZealot";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ancient_Init () {
    gt_Ancient = TriggerCreate("gt_Ancient_Func");
    TriggerAddEventButtonPressed(gt_Ancient, c_playerAny, "AncientSubclass");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deathsayer
//--------------------------------------------------------------------------------------------------
bool gt_Deathsayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[7] lv_items;
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "Deathsayer";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Deathsayer_Init () {
    gt_Deathsayer = TriggerCreate("gt_Deathsayer_Func");
    TriggerAddEventButtonPressed(gt_Deathsayer, c_playerAny, "Deathsayer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Herald of Doom
//--------------------------------------------------------------------------------------------------
bool gt_HeraldofDoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[7] lv_items;
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selectedSubClassGlobal[EventPlayer()] = "HeraldofDoom";
    TriggerExecute(gt_SubSpawn, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeraldofDoom_Init () {
    gt_HeraldofDoom = TriggerCreate("gt_HeraldofDoom_Func");
    TriggerAddEventButtonPressed(gt_HeraldofDoom, c_playerAny, "HeraldofDoom");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sub Spawn
//--------------------------------------------------------------------------------------------------
bool gt_SubSpawn_Func (bool testConds, bool runActions) {
    int init_i;

    int auto01B6B373_ae;
    int auto01B6B373_ai;
    int auto28AF62FE_ae;
    int auto28AF62FE_ai;
    int auto0F9F6291_ae;
    int auto0F9F6291_ai;

    // Variable Declarations
    string lv_selectedSubClassLocal;
    int[12] lv_stackCount;
    int[12] lv_itemsmaxcharge;
    string[12] lv_chargelink;
    unit[12] lv_items;
    string[12] lv_itemType;
    int lv_counter;
    int lv_behaviorCounter;
    int lv_stackCounter;
    int lv_totalItems;
    fixed[12] lv_boneLife;

    // Variable Initialization
    for (init_i = 0; init_i <= 11; init_i += 1) {
        lv_chargelink[init_i] = "";
    }
    lv_behaviorCounter = 1;
    for (init_i = 0; init_i <= 11; init_i += 1) {
        lv_boneLife[init_i] = 5.0;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selectedSubClassLocal = gv_selectedSubClassGlobal[EventPlayer()];
    UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "IsArmorOrWeapon") == true)) {
            lv_items[lv_counter] = UnitGroupLoopCurrent();
            lv_itemType[lv_counter] = UnitGetType(UnitGroupLoopCurrent());
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "IsBoneArmor") == true)) {
                lv_boneLife[lv_counter] = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
            }

            lv_counter = (lv_counter + 1);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "MultiDimensionalSatchel") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrorsc") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors1c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors2c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors3c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchelc") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel1c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel2c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel3c"))) {
            lv_items[lv_counter] = UnitGroupLoopCurrent();
            lv_itemType[lv_counter] = UnitGetType(UnitGroupLoopCurrent());
            lv_counter = (lv_counter + 1);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "IsArmorOrWeapon") == false) && (UnitGetType(UnitGroupLoopCurrent()) != "MultiDimensionalSatchel") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrorsc") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors1c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors2c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors3c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchelc") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel1c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel2c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel3c")) {
            lv_items[lv_counter] = UnitGroupLoopCurrent();
            lv_itemType[lv_counter] = UnitGetType(UnitGroupLoopCurrent());
            lv_counter = (lv_counter + 1);
        }

    }
    UnitGroupLoopEnd();
    lv_totalItems = lv_counter;
    lv_counter = 0;
    auto01B6B373_ae = lv_totalItems;
    auto01B6B373_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto01B6B373_ai >= 0 && lv_counter <= auto01B6B373_ae) || (auto01B6B373_ai <= 0 && lv_counter >= auto01B6B373_ae) ) ; lv_counter += auto01B6B373_ai ) {
        if ((UnitHasBehavior(lv_items[lv_counter], "StackableItem") == true)) {
            lv_chargelink[lv_counter] = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(lv_items[lv_counter])), "EffectCost.Charge.Link", c_playerAny);
            lv_itemsmaxcharge[lv_counter] = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(lv_items[lv_counter])), "EffectCost.Charge.CountMax", c_playerAny));
            lv_stackCount[lv_counter] = (lv_itemsmaxcharge[lv_counter] - FixedToInt(UnitGetChargeUsed(lv_items[lv_counter], lv_chargelink[lv_counter])));
        }

    }
    UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_ReplaceUnit(gv_hero[EventPlayer()], lv_selectedSubClassLocal, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    gv_hero[EventPlayer()] = libNtve_gf_LastReplacedUnit();
    gv_bonecarrier[EventPlayer()] = gv_hero[EventPlayer()];
    if ((gv_acceleratedModeEnabled == true)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "AcceleratedMode", gv_hero[EventPlayer()], 1);
    }

    if ((gv_rawMeatCounter[EventPlayer()] == 0)) {
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter0", libNtve_gf_LastReplacedUnit(), 1);
    }
    else {
        if ((gv_rawMeatCounter[EventPlayer()] == 1)) {
            UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter1", libNtve_gf_LastReplacedUnit(), 1);
        }
        else {
            if ((gv_rawMeatCounter[EventPlayer()] == 2)) {
                UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter2", libNtve_gf_LastReplacedUnit(), 1);
            }
            else {
                if ((gv_rawMeatCounter[EventPlayer()] == 3)) {
                    UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter3", libNtve_gf_LastReplacedUnit(), 1);
                }
                else {
                    if ((gv_rawMeatCounter[EventPlayer()] == 4)) {
                        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter4", libNtve_gf_LastReplacedUnit(), 1);
                    }
                    else {
                        if ((gv_rawMeatCounter[EventPlayer()] == 5)) {
                            UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter5", libNtve_gf_LastReplacedUnit(), 1);
                        }
                        else {
                            if ((gv_rawMeatCounter[EventPlayer()] == 6)) {
                                UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter6", libNtve_gf_LastReplacedUnit(), 1);
                            }
                            else {
                                if ((gv_rawMeatCounter[EventPlayer()] == 7)) {
                                    UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter7", libNtve_gf_LastReplacedUnit(), 1);
                                }
                                else {
                                    if ((gv_rawMeatCounter[EventPlayer()] == 8)) {
                                        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RawMeatCounter8", libNtve_gf_LastReplacedUnit(), 1);
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    lv_counter = 0;
    auto28AF62FE_ae = lv_totalItems;
    auto28AF62FE_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto28AF62FE_ai >= 0 && lv_counter <= auto28AF62FE_ae) || (auto28AF62FE_ai <= 0 && lv_counter >= auto28AF62FE_ae) ) ; lv_counter += auto28AF62FE_ai ) {
        if ((UnitHasBehavior(lv_items[lv_counter], "StackableItem") == true)) {
            auto0F9F6291_ae = lv_stackCount[lv_counter];
            auto0F9F6291_ai = 1;
            lv_stackCounter = 1;
            for ( ; ( (auto0F9F6291_ai >= 0 && lv_stackCounter <= auto0F9F6291_ae) || (auto0F9F6291_ai <= 0 && lv_stackCounter >= auto0F9F6291_ae) ) ; lv_stackCounter += auto0F9F6291_ai ) {
                UnitInventoryCreate(gv_hero[EventPlayer()], lv_itemType[lv_counter]);
            }
        }
        else {
            UnitInventoryCreate(gv_hero[EventPlayer()], lv_itemType[lv_counter]);
            if ((UnitHasBehavior(lv_items[lv_counter], "IsBoneArmor") == true)) {
                UnitSetPropertyFixed(UnitInventoryLastCreated(), c_unitPropLife, lv_boneLife[lv_counter]);
            }

        }
    }
    if ((gv_empowerStr[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerStrength", gv_hero[EventPlayer()], gv_empowerStr[EventPlayer()]);
    }

    if ((gv_empowerInt[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerInt", gv_hero[EventPlayer()], gv_empowerInt[EventPlayer()]);
    }

    if ((gv_empowerAgi[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerAgility", gv_hero[EventPlayer()], gv_empowerAgi[EventPlayer()]);
    }

    if ((gv_empowerMagic[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerMagic", gv_hero[EventPlayer()], gv_empowerMagic[EventPlayer()]);
    }

    if ((gv_empowerFortitude[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerFortitude", gv_hero[EventPlayer()], gv_empowerFortitude[EventPlayer()]);
    }

    if ((gv_giftofAiur[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "GiftofAiur", gv_hero[EventPlayer()], gv_giftofAiur[EventPlayer()]);
    }

    if ((gv_giftofXelNaga[EventPlayer()] > 0)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "GiftofXelNaga", gv_hero[EventPlayer()], gv_giftofXelNaga[EventPlayer()]);
    }

    gv_heroLevel[EventPlayer()] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubSpawn_Init () {
    gt_SubSpawn = TriggerCreate("gt_SubSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whirling Axe [1] : Offensive
//--------------------------------------------------------------------------------------------------
bool gt_WhirlingAxe1Offensive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;
    int lv_chance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitTarget(), "WhirlingAxe1") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitTarget(), "WhirlingAxeTriggered") == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnitTarget(), null) > 1))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnitTarget(), null) <= 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringdamage = UnitWeaponDamage(EventUnitTarget(), 1, c_unitAttributeNone, false);
    lv_chance = 35;
    lv_triggeringdamage = (lv_triggeringdamage * 0.65);
    if ((RandomInt(1, 100) <= lv_chance)) {
        UnitBehaviorAdd(EventUnitTarget(), "WhirlingAxeTriggered", EventUnitTarget(), 1);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "VoidZealotWhirlwindSearchModel", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "VoidZealotWhirlwindLaunchSound", null, null, null);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnitTarget(), "TriggerDamageMeleeNoGain", UnitGroupLoopCurrent(), lv_triggeringdamage);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "WhirlwindAttackVisual", null, null, null);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "WhirlwindAttackSound", null, null, null);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhirlingAxe1Offensive_Init () {
    gt_WhirlingAxe1Offensive = TriggerCreate("gt_WhirlingAxe1Offensive_Func");
    TriggerAddEventUnitAttacked2(gt_WhirlingAxe1Offensive, null, "AxeofAiur");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whirling Axe [2] : Offensive
//--------------------------------------------------------------------------------------------------
bool gt_WhirlingAxe2Offensive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;
    int lv_chance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitTarget(), "WhirlingAxe2") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitTarget(), "WhirlingAxeTriggered") == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnitTarget(), null) >= 5))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnitTarget(), null) <= 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringdamage = UnitWeaponDamage(EventUnitTarget(), 1, c_unitAttributeNone, false);
    lv_chance = 40;
    lv_triggeringdamage = (lv_triggeringdamage * 0.75);
    if ((RandomInt(1, 100) <= lv_chance)) {
        UnitBehaviorAdd(EventUnitTarget(), "WhirlingAxeTriggered", EventUnitTarget(), 1);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "VoidZealotWhirlwindSearchModel", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "VoidZealotWhirlwindLaunchSound", null, null, null);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnitTarget(), "TriggerDamageMeleeNoGain", UnitGroupLoopCurrent(), lv_triggeringdamage);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "WhirlwindAttackVisual", null, null, null);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "WhirlwindAttackSound", null, null, null);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhirlingAxe2Offensive_Init () {
    gt_WhirlingAxe2Offensive = TriggerCreate("gt_WhirlingAxe2Offensive_Func");
    TriggerAddEventUnitAttacked2(gt_WhirlingAxe2Offensive, null, "AxeofAiur");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whirling Axe [3] : Offensive
//--------------------------------------------------------------------------------------------------
bool gt_WhirlingAxe3Offensive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;
    int lv_chance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitTarget(), "WhirlingAxe3") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitTarget(), "WhirlingAxeTriggered") == false))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnitTarget(), null) >= 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringdamage = UnitWeaponDamage(EventUnitTarget(), 1, c_unitAttributeNone, false);
    lv_chance = 45;
    lv_triggeringdamage = (lv_triggeringdamage * 0.85);
    if ((RandomInt(1, 100) <= lv_chance)) {
        UnitBehaviorAdd(EventUnitTarget(), "WhirlingAxeTriggered", EventUnitTarget(), 1);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "VoidZealotWhirlwindSearchModel", null, null, null);
        ActorCreate(ActorScopeFromUnit(EventUnitTarget()), "VoidZealotWhirlwindLaunchSound", null, null, null);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnitTarget()), 2.25), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                UnitDamage(EventUnitTarget(), "TriggerDamageMeleeNoGain", UnitGroupLoopCurrent(), lv_triggeringdamage);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "WhirlwindAttackVisual", null, null, null);
                ActorCreate(ActorScopeFromUnit(UnitGroupLoopCurrent()), "WhirlwindAttackSound", null, null, null);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhirlingAxe3Offensive_Init () {
    gt_WhirlingAxe3Offensive = TriggerCreate("gt_WhirlingAxe3Offensive_Func");
    TriggerAddEventUnitAttacked2(gt_WhirlingAxe3Offensive, null, "AxeofAiur");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Challenge: Battle
//--------------------------------------------------------------------------------------------------
bool gt_ChallengeBattle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitTargetUnit(), "Challenge1Uncommandable", EventUnit(), 1);
    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueReplace);
    UnitBehaviorAdd(EventUnit(), "Challenge1Uncommandable", EventUnit(), 1);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTargetUnit()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChallengeBattle_Init () {
    gt_ChallengeBattle = TriggerCreate("gt_ChallengeBattle_Func");
    TriggerAddEventUnitAbility(gt_ChallengeBattle, null, AbilityCommand("ChallengeLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Challenge: Battle 2
//--------------------------------------------------------------------------------------------------
bool gt_ChallengeBattle2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitTargetUnit(), "Challenge2Uncommandable", EventUnit(), 1);
    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueReplace);
    UnitBehaviorAdd(EventUnit(), "Challenge2Uncommandable", EventUnit(), 1);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTargetUnit()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChallengeBattle2_Init () {
    gt_ChallengeBattle2 = TriggerCreate("gt_ChallengeBattle2_Func");
    TriggerAddEventUnitAbility(gt_ChallengeBattle2, null, AbilityCommand("ChallengeLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Epoch Fist
//--------------------------------------------------------------------------------------------------
bool gt_EpochFist_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "EpochFist1") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "EpochFistLevel2") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "EpochFist3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "EpochFist1") == true)) {
        UnitBehaviorAdd(EventUnit(), "EpochFist1Effect", EventUnitDamageSourceUnit(), 1);
        UnitBehaviorRemove(EventUnitDamageSourceUnit(), "EpochFist1", 1);
    }

    if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "EpochFistLevel2") == true)) {
        UnitBehaviorAdd(EventUnit(), "EpochFist2Effect", EventUnitDamageSourceUnit(), 1);
        UnitBehaviorRemove(EventUnitDamageSourceUnit(), "EpochFistLevel2", 1);
    }

    if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "EpochFist3") == true)) {
        UnitBehaviorAdd(EventUnit(), "EpochFist3Effect", EventUnitDamageSourceUnit(), 1);
        UnitBehaviorRemove(EventUnitDamageSourceUnit(), "EpochFist3", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EpochFist_Init () {
    gt_EpochFist = TriggerCreate("gt_EpochFist_Func");
    TriggerAddEventUnitDamaged(gt_EpochFist, null, c_unitDamageTypeAny, c_unitDamageEither, "FistofStone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient's Call [1]
//--------------------------------------------------------------------------------------------------
bool gt_AncientsCall1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AncientsCall1", EventUnit(), 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientsCall1_Init () {
    gt_AncientsCall1 = TriggerCreate("gt_AncientsCall1_Func");
    TriggerAddEventUnitAbility(gt_AncientsCall1, null, AbilityCommand("ImmortalsCallLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient's Call [2]
//--------------------------------------------------------------------------------------------------
bool gt_AncientsCall2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AncientsCall2", EventUnit(), 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientsCall2_Init () {
    gt_AncientsCall2 = TriggerCreate("gt_AncientsCall2_Func");
    TriggerAddEventUnitAbility(gt_AncientsCall2, null, AbilityCommand("ImmortalsCallLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient Fusion (Set)
//--------------------------------------------------------------------------------------------------
bool gt_AncientFusionSet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_ancientFusionCaster[UnitGetOwner(EventUnit())] = EventUnit();
    gv_ancientFusionTarget[UnitGetOwner(EventUnit())] = EventUnitTargetUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientFusionSet_Init () {
    gt_AncientFusionSet = TriggerCreate("gt_AncientFusionSet_Func");
    TriggerAddEventUnitAbility(gt_AncientFusionSet, null, AbilityCommand("ImmortalFusionLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_AncientFusionSet, null, AbilityCommand("ImmortalFusionLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ancient Fusion (Incoming Damage)
//--------------------------------------------------------------------------------------------------
bool gt_AncientFusionIncomingDamage_Func (bool testConds, bool runActions) {
    int auto1088E4E5_ae;
    int auto1088E4E5_ai;
    int autoBE425431_ae;
    int autoBE425431_ai;

    // Variable Declarations
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "AncientFusion1") == true)) {
        auto1088E4E5_ae = 12;
        auto1088E4E5_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto1088E4E5_ai >= 0 && lv_counter <= auto1088E4E5_ae) || (auto1088E4E5_ai <= 0 && lv_counter >= auto1088E4E5_ae) ) ; lv_counter += auto1088E4E5_ai ) {
            if ((EventUnit() == gv_ancientFusionTarget[lv_counter])) {
                UnitDamage(EventUnit(), "ImmortalFusionDamage", gv_ancientFusionCaster[lv_counter], (EventUnitDamageAbsorbed() - EventUnitDamageAmount()));
            }

        }
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "AncientFusion2") == true)) {
            autoBE425431_ae = 12;
            autoBE425431_ai = 1;
            lv_counter = 0;
            for ( ; ( (autoBE425431_ai >= 0 && lv_counter <= autoBE425431_ae) || (autoBE425431_ai <= 0 && lv_counter >= autoBE425431_ae) ) ; lv_counter += autoBE425431_ai ) {
                if ((EventUnit() == gv_ancientFusionTarget[lv_counter])) {
                    UnitDamage(EventUnit(), "ImmortalFusionDamage", gv_ancientFusionCaster[lv_counter], (EventUnitDamageAbsorbed() - EventUnitDamageAmount()));
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AncientFusionIncomingDamage_Init () {
    gt_AncientFusionIncomingDamage = TriggerCreate("gt_AncientFusionIncomingDamage_Func");
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[3]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[4]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[5]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[6]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[8]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[9]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[10]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[11]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_AncientFusionIncomingDamage, UnitRefFromVariable("gv_ancientFusionTarget[12]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassins Touch
//--------------------------------------------------------------------------------------------------
bool gt_AssassinsTouch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringdamage = EventUnitDamageAmount();
    if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(EventUnit())) == true)) {
        if ((EventUnitDamageAmount() <= 20.0)) {
        }
        else {
            TextTagCreate((IntToText(FixedToInt(lv_triggeringdamage)) + StringExternal("Param/Value/A041843D")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
    }
    else {
        TextTagCreate((IntToText(FixedToInt(lv_triggeringdamage)) + StringExternal("Param/Value/C6938261")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "AssassinsCloakLevel1", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "AssassinsCloakLevel2", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "AssassinsCloakLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssassinsTouch_Init () {
    gt_AssassinsTouch = TriggerCreate("gt_AssassinsTouch_Func");
    TriggerAddEventUnitDamaged(gt_AssassinsTouch, null, c_unitDamageTypeAny, c_unitDamageEither, "MasterPsiBladesCritical1");
    TriggerAddEventUnitDamaged(gt_AssassinsTouch, null, c_unitDamageTypeAny, c_unitDamageEither, "MasterPsiBladesCritical2");
    TriggerAddEventUnitDamaged(gt_AssassinsTouch, null, c_unitDamageTypeAny, c_unitDamageEither, "MasterPsiBladesCritical3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stealth Strike
//--------------------------------------------------------------------------------------------------
bool gt_StealthStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ambushdamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "AssassinsCloakLevel1") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "AssassinsCloakLevel2") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "AssassinsCloakLevel3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ambushdamage = EventUnitDamageAmount();
    TextTagCreate((IntToText(FixedToInt(lv_ambushdamage)) + StringExternal("Param/Value/D0821DA6")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "AssassinsCloakLevel1", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "AssassinsCloakLevel2", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "AssassinsCloakLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StealthStrike_Init () {
    gt_StealthStrike = TriggerCreate("gt_StealthStrike_Func");
    TriggerAddEventUnitDamaged(gt_StealthStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "Zeratul");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smoke Cloud
//--------------------------------------------------------------------------------------------------
bool gt_SmokeCloud_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SmokeCloudDummy", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    UnitBehaviorAdd(UnitLastCreated(), "SmokeCloudTimed1", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmokeCloud_Init () {
    gt_SmokeCloud = TriggerCreate("gt_SmokeCloud_Func");
    TriggerAddEventUnitAbility(gt_SmokeCloud, null, AbilityCommand("SmokeBombLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smoke Cloud 2
//--------------------------------------------------------------------------------------------------
bool gt_SmokeCloud2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SmokeCloudDummy", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    UnitBehaviorAdd(UnitLastCreated(), "SmokeCloudTimed2", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmokeCloud2_Init () {
    gt_SmokeCloud2 = TriggerCreate("gt_SmokeCloud2_Func");
    TriggerAddEventUnitAbility(gt_SmokeCloud2, null, AbilityCommand("SmokeBombLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mark for Bounty
//--------------------------------------------------------------------------------------------------
bool gt_MarkforBounty_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitTargetUnit(), "MarkforBountyLevel2", 1);
    gv_assassin[UnitGetOwner(EventUnit())] = EventUnit();
    if ((gv_bountyTarget[UnitGetOwner(EventUnit())] != null)) {
        UnitBehaviorRemove(gv_bountyTarget[UnitGetOwner(EventUnit())], "MarkforBountyLevel1", 1);
        UnitBehaviorRemove(gv_bountyTarget[UnitGetOwner(EventUnit())], "MarkforBountyLevel2", 1);
    }

    gv_bountyTarget[UnitGetOwner(EventUnit())] = EventUnitTargetUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkforBounty_Init () {
    gt_MarkforBounty = TriggerCreate("gt_MarkforBounty_Func");
    TriggerAddEventUnitAbility(gt_MarkforBounty, null, AbilityCommand("MarkforBountyLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mark for Bounty 2
//--------------------------------------------------------------------------------------------------
bool gt_MarkforBounty2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitTargetUnit(), "MarkforBountyLevel1", 1);
    gv_assassin[UnitGetOwner(EventUnit())] = EventUnit();
    if ((gv_bountyTarget[UnitGetOwner(EventUnit())] != null)) {
        UnitBehaviorRemove(gv_bountyTarget[UnitGetOwner(EventUnit())], "MarkforBountyLevel1", 1);
        UnitBehaviorRemove(gv_bountyTarget[UnitGetOwner(EventUnit())], "MarkforBountyLevel2", 1);
    }

    gv_bountyTarget2[UnitGetOwner(EventUnit())] = EventUnitTargetUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkforBounty2_Init () {
    gt_MarkforBounty2 = TriggerCreate("gt_MarkforBounty2_Func");
    TriggerAddEventUnitAbility(gt_MarkforBounty2, null, AbilityCommand("MarkforBountyLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mark for Bounty Remove Rank 1
//--------------------------------------------------------------------------------------------------
bool gt_MarkforBountyRemoveRank1_Func (bool testConds, bool runActions) {
    int autoCBFE2D5F_ae;
    int autoCBFE2D5F_ai;

    // Variable Declarations
    int lv_counter;

    // Variable Initialization
    lv_counter = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCBFE2D5F_ae = 12;
    autoCBFE2D5F_ai = 1;
    lv_counter = 1;
    for ( ; ( (autoCBFE2D5F_ai >= 0 && lv_counter <= autoCBFE2D5F_ae) || (autoCBFE2D5F_ai <= 0 && lv_counter >= autoCBFE2D5F_ae) ) ; lv_counter += autoCBFE2D5F_ai ) {
        if ((EventUnit() == gv_bountyTarget[lv_counter])) {
            gv_bountyTarget[lv_counter] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkforBountyRemoveRank1_Init () {
    gt_MarkforBountyRemoveRank1 = TriggerCreate("gt_MarkforBountyRemoveRank1_Func");
    TriggerAddEventUnitBehaviorChange(gt_MarkforBountyRemoveRank1, null, "MarkforBountyLevel1", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_MarkforBountyRemoveRank1, null, "MarkforBountyLevel1", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mark for Bounty Remove Rank 2
//--------------------------------------------------------------------------------------------------
bool gt_MarkforBountyRemoveRank2_Func (bool testConds, bool runActions) {
    int auto24AC8147_ae;
    int auto24AC8147_ai;

    // Variable Declarations
    int lv_counter;

    // Variable Initialization
    lv_counter = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto24AC8147_ae = 12;
    auto24AC8147_ai = 1;
    lv_counter = 1;
    for ( ; ( (auto24AC8147_ai >= 0 && lv_counter <= auto24AC8147_ae) || (auto24AC8147_ai <= 0 && lv_counter >= auto24AC8147_ae) ) ; lv_counter += auto24AC8147_ai ) {
        if ((EventUnit() == gv_bountyTarget2[lv_counter])) {
            gv_bountyTarget2[lv_counter] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkforBountyRemoveRank2_Init () {
    gt_MarkforBountyRemoveRank2 = TriggerCreate("gt_MarkforBountyRemoveRank2_Func");
    TriggerAddEventUnitBehaviorChange(gt_MarkforBountyRemoveRank2, null, "MarkforBountyLevel2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_MarkforBountyRemoveRank2, null, "MarkforBountyLevel2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanse
//--------------------------------------------------------------------------------------------------
bool gt_Cleanse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitTargetUnit(), "SpineanPoisonDebuff", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "MarkofDoomLevel1", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "MarkofDoomLevel2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "ThrowPoisonSpear", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "SoulofKahvOcBehavior", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "ThrowRefinedPoisonSpear", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "ThrowUltraPoisonSpear", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "Sickness", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "Disruption1", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "Disruption2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "CurseofConfused", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "CurseoftheNoob", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "CurseoftheShattered", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "CurseoftheSloth", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "CurseofDarkness", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "CurseoftheHun", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "VenomousBiteLevel1", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "VenomousBiteLevel12", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "VenomousBiteLevel2", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "VenomousBiteLevel2Slow", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "VenomousBiteLevel3", 1);
    UnitBehaviorRemove(EventUnitTargetUnit(), "VenomousBiteLevel3Slow", 1);
    if ((UnitHasBehavior(EventUnitTargetUnit(), "MarkofDeathLevel1") == true)) {
        UnitBehaviorRemove(EventUnitTargetUnit(), "MarkofDeathLevel1", 1);
        UnitBehaviorAdd(EventUnitTargetUnit(), "ImpendingDoomLevel1Stun", EventUnit(), 1);
    }

    if ((UnitHasBehavior(EventUnitTargetUnit(), "MarkofDeathLevel2") == true)) {
        UnitBehaviorRemove(EventUnitTargetUnit(), "MarkofDeathLevel2", 1);
        UnitBehaviorAdd(EventUnitTargetUnit(), "ImpendingDoomLevel2Stun", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cleanse_Init () {
    gt_Cleanse = TriggerCreate("gt_Cleanse_Func");
    TriggerAddEventUnitAbility(gt_Cleanse, null, AbilityCommand("PurifyLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Cleanse, null, AbilityCommand("PurifyLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light of Aiur [1]
//--------------------------------------------------------------------------------------------------
bool gt_LightofAiur1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitBehaviorCount(EventUnit(), "IntIntellect") * 0.75)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightofAiur1_Init () {
    gt_LightofAiur1 = TriggerCreate("gt_LightofAiur1_Func");
    TriggerAddEventUnitAbility(gt_LightofAiur1, null, AbilityCommand("LightofAiurLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light of Aiur [2]
//--------------------------------------------------------------------------------------------------
bool gt_LightofAiur2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitBehaviorCount(EventUnit(), "IntIntellect") * 1.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightofAiur2_Init () {
    gt_LightofAiur2 = TriggerCreate("gt_LightofAiur2_Func");
    TriggerAddEventUnitAbility(gt_LightofAiur2, null, AbilityCommand("LightofAiurLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Light of Aiur [3]
//--------------------------------------------------------------------------------------------------
bool gt_LightofAiur3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitBehaviorCount(EventUnit(), "IntIntellect") * 1.25)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LightofAiur3_Init () {
    gt_LightofAiur3 = TriggerCreate("gt_LightofAiur3_Func");
    TriggerAddEventUnitAbility(gt_LightofAiur3, null, AbilityCommand("LightofAiurLevel3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stopped Casting Void
//--------------------------------------------------------------------------------------------------
bool gt_StoppedCastingVoid_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("AwakenfromVoidDummy", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoppedCastingVoid_Init () {
    gt_StoppedCastingVoid = TriggerCreate("gt_StoppedCastingVoid_Func");
    TriggerAddEventUnitBehaviorChange(gt_StoppedCastingVoid, null, "CastingAwakenfromVoid", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_StoppedCastingVoid, null, "CastingAwakenfromVoid2", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_StoppedCastingVoid, null, "CastingAwakenfromVoid", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_StoppedCastingVoid, null, "CastingAwakenfromVoid2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start casting Void [1]
//--------------------------------------------------------------------------------------------------
bool gt_StartcastingVoid1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AwakenfromVoidDummy", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, UnitGetFacing(EventUnit())));
    UnitBehaviorAdd(UnitLastCreated(), "AwakenfromVoidTimedLife1", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "CastingAwakenfromVoid", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartcastingVoid1_Init () {
    gt_StartcastingVoid1 = TriggerCreate("gt_StartcastingVoid1_Func");
    TriggerAddEventUnitAbility(gt_StartcastingVoid1, null, AbilityCommand("AwakenfromVoidLevel1", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start casting Void [2]
//--------------------------------------------------------------------------------------------------
bool gt_StartcastingVoid2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AwakenfromVoidDummy", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, UnitGetFacing(EventUnit())));
    UnitBehaviorAdd(UnitLastCreated(), "AwakenfromVoidTimedLife2", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "CastingAwakenfromVoid2", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartcastingVoid2_Init () {
    gt_StartcastingVoid2 = TriggerCreate("gt_StartcastingVoid2_Func");
    TriggerAddEventUnitAbility(gt_StartcastingVoid2, null, AbilityCommand("AwakenfromVoidLevel2", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awaken from Void [1]
//--------------------------------------------------------------------------------------------------
bool gt_AwakenfromVoid1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_resurrected;
    int lv_resurrectedHero;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "DeadHero") == true) && (gv_currentlyRessurectingHero[UnitGetOwner(UnitGroupLoopCurrent())] == false) && (lv_resurrected == false)) {
            UnitBehaviorRemove(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "DeadHero", 1);
            UnitXPGainEnable(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], null, true);
            UnitGroupRemove(gv_voidTowerInUse, UnitGroupLoopCurrent());
            UnitSetPropertyFixed(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], c_unitPropLifePercent, 45.0);
            UnitSetPropertyFixed(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], c_unitPropEnergyPercent, 45.0);
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperSetTo, 45);
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropTerrazine, c_playerPropOperSetTo, 5);
            libNtve_gf_ShowHideUnit(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], true);
            UnitSetPosition(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, UnitGetFacing(EventUnit())), false);
            UnitBehaviorAdd(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "RawMeatCounter0", gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], 1);
            UnitBehaviorAdd(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "VoidTouched1", gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], 1);
            gv_deadHero[UnitGetOwner(UnitGroupLoopCurrent())] = false;
            libNtve_gf_SetDialogItemText(gv_playerstatus[UnitGetOwner(UnitGroupLoopCurrent())], StringExternal("Param/Value/52AF6462"), PlayerGroupAll());
            gv_currentlyRessurectingHero[UnitGetOwner(UnitGroupLoopCurrent())] = false;
            lv_resurrected = true;
            lv_resurrectedHero = UnitGetOwner(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    if ((lv_resurrected == true)) {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(gv_hero[lv_resurrectedHero]), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGetType(UnitGroupLoopCurrent()) == "ChosenElder")) {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "DeadAlly", 1);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AwakenfromVoid1_Init () {
    gt_AwakenfromVoid1 = TriggerCreate("gt_AwakenfromVoid1_Func");
    TriggerAddEventUnitAbility(gt_AwakenfromVoid1, null, AbilityCommand("AwakenfromVoidLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awaken from Void [2]
//--------------------------------------------------------------------------------------------------
bool gt_AwakenfromVoid2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_resurrected;
    int lv_resurrectedHero;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "DeadHero") == true) && (gv_currentlyRessurectingHero[UnitGetOwner(UnitGroupLoopCurrent())] == false) && (lv_resurrected == false)) {
            UnitBehaviorRemove(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "DeadHero", 1);
            UnitXPGainEnable(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], null, true);
            UnitGroupRemove(gv_voidTowerInUse, UnitGroupLoopCurrent());
            UnitSetPropertyFixed(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], c_unitPropLifePercent, 60.0);
            UnitSetPropertyFixed(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], c_unitPropEnergyPercent, 60.0);
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperSetTo, 60);
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropTerrazine, c_playerPropOperSetTo, 3);
            libNtve_gf_ShowHideUnit(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], true);
            UnitSetPosition(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, UnitGetFacing(EventUnit())), false);
            UnitBehaviorAdd(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "RawMeatCounter0", gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], 1);
            UnitBehaviorAdd(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "VoidTouched2", gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], 1);
            gv_deadHero[UnitGetOwner(UnitGroupLoopCurrent())] = false;
            libNtve_gf_SetDialogItemText(gv_playerstatus[UnitGetOwner(UnitGroupLoopCurrent())], StringExternal("Param/Value/80E21EB4"), PlayerGroupAll());
            gv_currentlyRessurectingHero[UnitGetOwner(UnitGroupLoopCurrent())] = false;
            lv_resurrected = true;
            lv_resurrectedHero = UnitGetOwner(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    if ((lv_resurrected == true)) {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(gv_hero[lv_resurrectedHero]), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGetType(UnitGroupLoopCurrent()) == "ChosenElder")) {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "DeadAlly", 1);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AwakenfromVoid2_Init () {
    gt_AwakenfromVoid2 = TriggerCreate("gt_AwakenfromVoid2_Func");
    TriggerAddEventUnitAbility(gt_AwakenfromVoid2, null, AbilityCommand("AwakenfromVoidLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Static Gravi-Bomb
//--------------------------------------------------------------------------------------------------
bool gt_StaticGraviBomb_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitGetType(UnitGroupLoopCurrent()) != "Ultralisk") && (UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitGetType(UnitGroupLoopCurrent()) != "InfestedTerran") && (UnitGetType(UnitGroupLoopCurrent()) != "Brutalisk")) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.0)), true);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StaticGraviBomb_Init () {
    gt_StaticGraviBomb = TriggerCreate("gt_StaticGraviBomb_Func");
    TriggerAddEventUnitBehaviorChange(gt_StaticGraviBomb, null, "TriggeredTrap", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Static Gravi-Bomb [Timed Life]
//--------------------------------------------------------------------------------------------------
bool gt_StaticGraviBombTimedLife_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "StaticGraviBombTimedLife", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StaticGraviBombTimedLife_Init () {
    gt_StaticGraviBombTimedLife = TriggerCreate("gt_StaticGraviBombTimedLife_Func");
    TriggerAddEventUnitCreated(gt_StaticGraviBombTimedLife, null, "OracleStasisTrapBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Static Gravi-Bomb [Timed Life] 2
//--------------------------------------------------------------------------------------------------
bool gt_StaticGraviBombTimedLife2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "StaticGraviBombTimedLife2", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StaticGraviBombTimedLife2_Init () {
    gt_StaticGraviBombTimedLife2 = TriggerCreate("gt_StaticGraviBombTimedLife2_Func");
    TriggerAddEventUnitCreated(gt_StaticGraviBombTimedLife2, null, "OracleStasisTrapBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cybernetic Cannon
//--------------------------------------------------------------------------------------------------
bool gt_CyberneticCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_photonCannon;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PhotonCannonItem")) {
            lv_photonCannon = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_photonCannon != null)) {
        UnitRemove(lv_photonCannon);
        Wait(gv_craftingTime, c_timeGame);
        UnitInventoryCreate(EventUnit(), "CyberneticCannonStruct");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CyberneticCannon_Init () {
    gt_CyberneticCannon = TriggerCreate("gt_CyberneticCannon_Func");
    TriggerAddEventUnitAbility(gt_CyberneticCannon, null, AbilityCommand("EnhancedCannonLevel1", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_CyberneticCannon, null, AbilityCommand("EnhancedCannonLevel2", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cybernetic Upload
//--------------------------------------------------------------------------------------------------
bool gt_CyberneticUpload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroInventorySpace;
    string lv_model;

    // Variable Initialization
    lv_heroInventorySpace = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "MultiDimensionalSatchel")) {
            lv_heroInventorySpace = (lv_heroInventorySpace + 4);
        }

        lv_heroInventorySpace = (lv_heroInventorySpace - 1);
    }
    UnitGroupLoopEnd();
    if ((lv_heroInventorySpace > 0)) {
        libNtve_gf_CreateModelAtPoint("PhaseCannonWarpIn", UnitGetPosition(EventUnit()));
        SoundPlayAtPointForPlayer(SoundLink("Mothership_WormholeTransitEnd", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
        UnitRemove(EventUnit());
        UnitInventoryCreate(gv_hero[EventPlayer()], "CyberneticCannonStruct");
        ActorCreate(ActorScopeFromUnit(gv_hero[EventPlayer()]), "CyberneticUploadFinish", null, null, null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CyberneticUpload_Init () {
    gt_CyberneticUpload = TriggerCreate("gt_CyberneticUpload_Func");
    TriggerAddEventUnitAbility(gt_CyberneticUpload, null, AbilityCommand("CyberneticUpload", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP Blast Reduction Cybernetic
//--------------------------------------------------------------------------------------------------
bool gt_EMPBlastReductionCybernetic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "EMP", 7.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMPBlastReductionCybernetic_Init () {
    gt_EMPBlastReductionCybernetic = TriggerCreate("gt_EMPBlastReductionCybernetic_Func");
    TriggerAddEventUnitBehaviorChange(gt_EMPBlastReductionCybernetic, null, "EMP", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: System Shockwave Reduction [1] Cybernetic
//--------------------------------------------------------------------------------------------------
bool gt_SystemShockwaveReduction1Cybernetic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwave1", 7.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SystemShockwaveReduction1Cybernetic_Init () {
    gt_SystemShockwaveReduction1Cybernetic = TriggerCreate("gt_SystemShockwaveReduction1Cybernetic_Func");
    TriggerAddEventUnitBehaviorChange(gt_SystemShockwaveReduction1Cybernetic, null, "SystemShockwave1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: System Shockwave Reduction [2] Cybernetic
//--------------------------------------------------------------------------------------------------
bool gt_SystemShockwaveReduction2Cybernetic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwaveLevel2", 9.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SystemShockwaveReduction2Cybernetic_Init () {
    gt_SystemShockwaveReduction2Cybernetic = TriggerCreate("gt_SystemShockwaveReduction2Cybernetic_Func");
    TriggerAddEventUnitBehaviorChange(gt_SystemShockwaveReduction2Cybernetic, null, "SystemShockwaveLevel2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Reduction Cybernetic
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateReductionCybernetic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated", 4.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateReductionCybernetic_Init () {
    gt_DeactivateReductionCybernetic = TriggerCreate("gt_DeactivateReductionCybernetic_Func");
    TriggerAddEventUnitBehaviorChange(gt_DeactivateReductionCybernetic, null, "Deactivated", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate [2] Reduction Cybernetic
//--------------------------------------------------------------------------------------------------
bool gt_Deactivate2ReductionCybernetic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated2", 5.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Deactivate2ReductionCybernetic_Init () {
    gt_Deactivate2ReductionCybernetic = TriggerCreate("gt_Deactivate2ReductionCybernetic_Func");
    TriggerAddEventUnitBehaviorChange(gt_Deactivate2ReductionCybernetic, null, "Deactivated2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tinkered Max
//--------------------------------------------------------------------------------------------------
bool gt_TinkeredMax_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "Tinkered") == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "TinkeredBonus", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TinkeredMax_Init () {
    gt_TinkeredMax = TriggerCreate("gt_TinkeredMax_Func");
    TriggerAddEventUnitBehaviorChange(gt_TinkeredMax, null, "Tinkered", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaotic Blast [1]
//--------------------------------------------------------------------------------------------------
bool gt_ChaoticBlast1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) - RandomInt(0, 15)));
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, c_unitPropCurrent) - RandomInt(0, 10)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChaoticBlast1_Init () {
    gt_ChaoticBlast1 = TriggerCreate("gt_ChaoticBlast1_Func");
    TriggerAddEventUnitAbility(gt_ChaoticBlast1, null, AbilityCommand("ChaoticBlastLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaotic Blast [2]
//--------------------------------------------------------------------------------------------------
bool gt_ChaoticBlast2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) - RandomInt(0, 20)));
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, c_unitPropCurrent) - RandomInt(0, 15)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChaoticBlast2_Init () {
    gt_ChaoticBlast2 = TriggerCreate("gt_ChaoticBlast2_Func");
    TriggerAddEventUnitAbility(gt_ChaoticBlast2, null, AbilityCommand("ChaoticBlastLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaotic Blast [3]
//--------------------------------------------------------------------------------------------------
bool gt_ChaoticBlast3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) - RandomInt(0, 25)));
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, c_unitPropCurrent) - RandomInt(0, 20)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChaoticBlast3_Init () {
    gt_ChaoticBlast3 = TriggerCreate("gt_ChaoticBlast3_Func");
    TriggerAddEventUnitAbility(gt_ChaoticBlast3, null, AbilityCommand("ChaoticBlastLevel3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decimation [1]
//--------------------------------------------------------------------------------------------------
bool gt_Decimation1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    gv_decimationUnit[UnitGetOwner(EventUnit())] = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, 0.04);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Decimation1_Init () {
    gt_Decimation1 = TriggerCreate("gt_Decimation1_Func");
    TriggerAddEventUnitAbility(gt_Decimation1, null, AbilityCommand("DecimationLevel1", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decimation [2]
//--------------------------------------------------------------------------------------------------
bool gt_Decimation2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    gv_decimationUnit[UnitGetOwner(EventUnit())] = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, 0.08);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 12.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 12.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Decimation2_Init () {
    gt_Decimation2 = TriggerCreate("gt_Decimation2_Func");
    TriggerAddEventUnitAbility(gt_Decimation2, null, AbilityCommand("DecimationLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decimation [3]
//--------------------------------------------------------------------------------------------------
bool gt_Decimation3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    gv_decimationUnit[UnitGetOwner(EventUnit())] = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, 0.12);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 15.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 15.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Decimation3_Init () {
    gt_Decimation3 = TriggerCreate("gt_Decimation3_Func");
    TriggerAddEventUnitAbility(gt_Decimation3, null, AbilityCommand("DecimationLevel3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drain Energy
//--------------------------------------------------------------------------------------------------
bool gt_DrainEnergy_Func (bool testConds, bool runActions) {
    int autoB728C383_ae;
    int autoB728C383_ai;

    // Variable Declarations
    int lv_counter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB728C383_ae = 12;
    autoB728C383_ai = 1;
    lv_counter = 0;
    for ( ; ( (autoB728C383_ai >= 0 && lv_counter <= autoB728C383_ae) || (autoB728C383_ai <= 0 && lv_counter >= autoB728C383_ae) ) ; lv_counter += autoB728C383_ai ) {
        if ((gv_decimationUnit[lv_counter] != null) && (UnitIsAlive(gv_decimationUnit[lv_counter]) == true)) {
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(gv_decimationUnit[lv_counter])), PointGetY(UnitGetPosition(gv_decimationUnit[lv_counter]))), 2.56), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(gv_decimationUnit[lv_counter]), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) - (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) * UnitGetPropertyFixed(gv_decimationUnit[lv_counter], c_unitPropShields, c_unitPropCurrent))));
                }

            }
            UnitGroupLoopEnd();
            lv_counter = (lv_counter + 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DrainEnergy_Init () {
    gt_DrainEnergy = TriggerCreate("gt_DrainEnergy_Func");
    TriggerAddEventTimePeriodic(gt_DrainEnergy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave of Death [1]
//--------------------------------------------------------------------------------------------------
bool gt_WaveofDeath1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "WaveofDeathDummy1") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 8.0));
        UnitBehaviorAdd(EventUnit(), "WaveofDeathDummy1", EventUnit(), 1);
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false)) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSubtract, 1);
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 8.0));
            UnitBehaviorRemove(EventUnit(), "WaveofDeath1", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveofDeath1_Init () {
    gt_WaveofDeath1 = TriggerCreate("gt_WaveofDeath1_Func");
    TriggerAddEventUnitDamaged(gt_WaveofDeath1, null, c_unitDamageTypeAny, c_unitDamageEither, "WaveofDeathDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave of Death [2]
//--------------------------------------------------------------------------------------------------
bool gt_WaveofDeath2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "WaveofDeathDummy2") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 12.0));
        UnitBehaviorAdd(EventUnit(), "WaveofDeathDummy2", EventUnit(), 1);
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false)) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSubtract, 1);
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 12.0));
            UnitBehaviorRemove(EventUnit(), "WaveofDeath2", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaveofDeath2_Init () {
    gt_WaveofDeath2 = TriggerCreate("gt_WaveofDeath2_Func");
    TriggerAddEventUnitDamaged(gt_WaveofDeath2, null, c_unitDamageTypeAny, c_unitDamageEither, "WaveofDeathDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Absorb Life [1]
//--------------------------------------------------------------------------------------------------
bool gt_AbsorbLife1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_hero[UnitGetOwner(EventUnitDamageSourceUnit())], c_unitPropLife, (UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnitDamageSourceUnit())], c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbsorbLife1_Init () {
    gt_AbsorbLife1 = TriggerCreate("gt_AbsorbLife1_Func");
    TriggerAddEventUnitDamaged(gt_AbsorbLife1, null, c_unitDamageTypeAny, c_unitDamageEither, "AbsorbLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Absorb Life [2]
//--------------------------------------------------------------------------------------------------
bool gt_AbsorbLife2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_hero[UnitGetOwner(EventUnitDamageSourceUnit())], c_unitPropLife, (UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnitDamageSourceUnit())], c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbsorbLife2_Init () {
    gt_AbsorbLife2 = TriggerCreate("gt_AbsorbLife2_Func");
    TriggerAddEventUnitDamaged(gt_AbsorbLife2, null, c_unitDamageTypeAny, c_unitDamageEither, "AbsorbLife2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mark of Death [1]
//--------------------------------------------------------------------------------------------------
bool gt_MarkofDeath1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_markdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_markdamage = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "IntIntellect") * 0.35);
    lv_markdamage += 125.0;
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNoGain2", EventUnit(), lv_markdamage);
    TextTagCreate((IntToText(FixedToInt(gv_triggeringunit)) + StringExternal("Param/Value/B4E304B9")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkofDeath1_Init () {
    gt_MarkofDeath1 = TriggerCreate("gt_MarkofDeath1_Func");
    TriggerAddEventUnitDamaged(gt_MarkofDeath1, null, c_unitDamageTypeAny, c_unitDamageEither, "ImpendingDoomLevel1Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mark of Death [2]
//--------------------------------------------------------------------------------------------------
bool gt_MarkofDeath2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_markdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_markdamage = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "IntIntellect") * 0.5);
    lv_markdamage += 175.0;
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNoGain2", EventUnit(), lv_markdamage);
    TextTagCreate((IntToText(FixedToInt(lv_markdamage)) + StringExternal("Param/Value/53079D5E")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarkofDeath2_Init () {
    gt_MarkofDeath2 = TriggerCreate("gt_MarkofDeath2_Func");
    TriggerAddEventUnitDamaged(gt_MarkofDeath2, null, c_unitDamageTypeAny, c_unitDamageEither, "ImpendingDoomLevel2Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Buff
//--------------------------------------------------------------------------------------------------
bool gt_TurretBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_agility;
    int lv_strength;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AutoTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_agility = UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], "AgiAgility");
    lv_strength = UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], "AgiStrength");
    if ((UnitXPGetCurrentLevel(gv_hero[UnitGetOwner(EventUnit())], "Dragoon") == 10)) {
        UnitBehaviorAdd(EventUnit(), "TurretBonusLife", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "TurretDamageBuff2", EventUnit(), lv_agility);
        UnitBehaviorAdd(EventUnit(), "TurretArmorandLifeBuff", EventUnit(), lv_strength);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "TurretDamageBuff1", EventUnit(), lv_agility);
        UnitBehaviorAdd(EventUnit(), "TurretArmorandLifeBuff", EventUnit(), lv_strength);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretBuff_Init () {
    gt_TurretBuff = TriggerCreate("gt_TurretBuff_Func");
    TriggerAddEventUnitRegion(gt_TurretBuff, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe [1]
//--------------------------------------------------------------------------------------------------
bool gt_Snipe1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_snipedamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_snipedamage = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "AgiAgility") * 0.25);
    lv_snipedamage += 35.0;
    UnitDamage(EventUnitDamageSourceUnit(), "RangedUnmodifiedDamage", EventUnit(), lv_snipedamage);
    TextTagCreate((IntToText(FixedToInt(lv_snipedamage)) + StringExternal("Param/Value/BE83A812")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Snipe1_Init () {
    gt_Snipe1 = TriggerCreate("gt_Snipe1_Func");
    TriggerAddEventUnitDamaged(gt_Snipe1, null, c_unitDamageTypeAny, c_unitDamageEither, "NovaSnipe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe [2]
//--------------------------------------------------------------------------------------------------
bool gt_Snipe2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_snipedamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_snipedamage = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "AgiAgility") * 0.35);
    lv_snipedamage += 45.0;
    UnitDamage(EventUnitDamageSourceUnit(), "RangedUnmodifiedDamage", EventUnit(), lv_snipedamage);
    TextTagCreate((IntToText(FixedToInt(lv_snipedamage)) + StringExternal("Param/Value/70CFFF84")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Snipe2_Init () {
    gt_Snipe2 = TriggerCreate("gt_Snipe2_Func");
    TriggerAddEventUnitDamaged(gt_Snipe2, null, c_unitDamageTypeAny, c_unitDamageEither, "SnipeDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe [3]
//--------------------------------------------------------------------------------------------------
bool gt_Snipe3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_snipedamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_snipedamage = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "AgiAgility") * 0.45);
    lv_snipedamage += 55.0;
    UnitDamage(EventUnitDamageSourceUnit(), "RangedUnmodifiedDamage", EventUnit(), lv_snipedamage);
    TextTagCreate((IntToText(FixedToInt(lv_snipedamage)) + StringExternal("Param/Value/71B0A7E9")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Snipe3_Init () {
    gt_Snipe3 = TriggerCreate("gt_Snipe3_Func");
    TriggerAddEventUnitDamaged(gt_Snipe3, null, c_unitDamageTypeAny, c_unitDamageEither, "SnipeDamage3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Legion Zergling
//--------------------------------------------------------------------------------------------------
bool gt_VoidLegionZergling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidZergling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_hero[UnitGetOwner(EventUnit())]) == "HeraldofDoom")) {
        lv_int = UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], "IntIntellect");
        if ((UnitXPGetCurrentLevel(gv_hero[UnitGetOwner(EventUnit())], "HeraldofDoom") >= 8)) {
            UnitBehaviorAdd(EventUnit(), "VoidLegionZergInitialBonus3", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "VoidLegionStackBonus3", EventUnit(), lv_int);
        }
        else {
            if ((UnitXPGetCurrentLevel(gv_hero[UnitGetOwner(EventUnit())], "HeraldofDoom") < 3)) {
                UnitBehaviorAdd(EventUnit(), "VoidLegionStackBonus1", EventUnit(), lv_int);
            }
            else {
                UnitBehaviorAdd(EventUnit(), "VoidLegionZergInitialBonus2", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "VoidLegionStackBonus2", EventUnit(), lv_int);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidLegionZergling_Init () {
    gt_VoidLegionZergling = TriggerCreate("gt_VoidLegionZergling_Func");
    TriggerAddEventUnitRegion(gt_VoidLegionZergling, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Legion Roach
//--------------------------------------------------------------------------------------------------
bool gt_VoidLegionRoach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RoachCorpser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_hero[UnitGetOwner(EventUnit())]) == "HeraldofDoom")) {
        lv_int = UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], "IntIntellect");
        if ((UnitXPGetCurrentLevel(gv_hero[UnitGetOwner(EventUnit())], "HeraldofDoom") >= 8)) {
            UnitBehaviorAdd(EventUnit(), "VoidLegionInitialBonus3", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "VoidLegionStackBonus3", EventUnit(), lv_int);
        }
        else {
            if ((UnitXPGetCurrentLevel(gv_hero[UnitGetOwner(EventUnit())], "HeraldofDoom") < 3)) {
                UnitBehaviorAdd(EventUnit(), "VoidLegionStackBonus1", EventUnit(), lv_int);
            }
            else {
                UnitBehaviorAdd(EventUnit(), "VoidLegionInitialBonus2", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "VoidLegionStackBonus2", EventUnit(), lv_int);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidLegionRoach_Init () {
    gt_VoidLegionRoach = TriggerCreate("gt_VoidLegionRoach_Func");
    TriggerAddEventUnitRegion(gt_VoidLegionRoach, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Thrusters
//--------------------------------------------------------------------------------------------------
bool gt_MechaThrusters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distancemultiplier;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    lv_distancemultiplier = (0.05 + (DistanceBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint()) * 0.08));
    UnitBehaviorAdd(EventUnit(), "MechaThrusters1", EventUnit(), 1);
    UnitBehaviorSetDuration(EventUnit(), "MechaThrusters1", ((lv_distancemultiplier * 1.2) + 0.1));
    UnitBehaviorAdd(EventUnit(), "MechaThrustersHeight", EventUnit(), 1);
    UnitBehaviorSetDuration(EventUnit(), "MechaThrustersHeight", ((lv_distancemultiplier * 1.1) + 0.1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechaThrusters_Init () {
    gt_MechaThrusters = TriggerCreate("gt_MechaThrusters_Func");
    TriggerAddEventUnitAbility(gt_MechaThrusters, null, AbilityCommand("MechaThrustersLevel1", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Thrusters 2
//--------------------------------------------------------------------------------------------------
bool gt_MechaThrusters2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distancemultiplier;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    lv_distancemultiplier = (0.05 + (DistanceBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint()) * 0.08));
    UnitBehaviorAdd(EventUnit(), "MechaThrusters2", EventUnit(), 1);
    UnitBehaviorSetDuration(EventUnit(), "MechaThrusters2", ((lv_distancemultiplier * 1.2) + 0.1));
    UnitBehaviorAdd(EventUnit(), "MechaThrustersHeight", EventUnit(), 1);
    UnitBehaviorSetDuration(EventUnit(), "MechaThrustersHeight", ((lv_distancemultiplier * 1.1) + 0.1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechaThrusters2_Init () {
    gt_MechaThrusters2 = TriggerCreate("gt_MechaThrusters2_Func");
    TriggerAddEventUnitAbility(gt_MechaThrusters2, null, AbilityCommand("MechaThrustersLevel2", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct 5
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestruct5_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/28F77202"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestruct5_Init () {
    gt_SelfDestruct5 = TriggerCreate("gt_SelfDestruct5_Func");
    TriggerAddEventUnitBehaviorChange(gt_SelfDestruct5, null, "SelfDestructCount5Level1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct 4
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestruct4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/1DF536B0"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestruct4_Init () {
    gt_SelfDestruct4 = TriggerCreate("gt_SelfDestruct4_Func");
    TriggerAddEventUnitBehaviorChange(gt_SelfDestruct4, null, "SelfDestructCount4Level1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct 3
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestruct3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/5A661968"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestruct3_Init () {
    gt_SelfDestruct3 = TriggerCreate("gt_SelfDestruct3_Func");
    TriggerAddEventUnitBehaviorChange(gt_SelfDestruct3, null, "SelfDestructCount3Level1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct 2
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestruct2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/BE040320"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestruct2_Init () {
    gt_SelfDestruct2 = TriggerCreate("gt_SelfDestruct2_Func");
    TriggerAddEventUnitBehaviorChange(gt_SelfDestruct2, null, "SelfDestructCount2Level1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct 1
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestruct1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/A579F699"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestruct1_Init () {
    gt_SelfDestruct1 = TriggerCreate("gt_SelfDestruct1_Func");
    TriggerAddEventUnitBehaviorChange(gt_SelfDestruct1, null, "SelfDestructCount1Level1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct Post Effects
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestructPostEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/344C5224"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.1);
    lv_damage = (UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLifeMax, c_unitPropCurrent) * 0.35);
    UnitDamage(EventUnit(), "TriggerDamageSpellNoGain", EventUnit(), lv_damage);
    UnitBehaviorAdd(EventUnit(), "SelfDestruct1PostEffect", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestructPostEffects_Init () {
    gt_SelfDestructPostEffects = TriggerCreate("gt_SelfDestructPostEffects_Func");
    TriggerAddEventUnitBehaviorChange(gt_SelfDestructPostEffects, null, "SelfDestruct1", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_SelfDestructPostEffects, null, "SelfDestruct2", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct Damage [1]
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestructDamage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = (UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnitDamageSourceUnit())], c_unitPropLifeMax, c_unitPropCurrent) * 0.35);
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNoGain", EventUnit(), lv_damage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestructDamage1_Init () {
    gt_SelfDestructDamage1 = TriggerCreate("gt_SelfDestructDamage1_Func");
    TriggerAddEventUnitDamaged(gt_SelfDestructDamage1, null, c_unitDamageTypeAny, c_unitDamageEither, "SelfDestructExplodeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self-Destruct Damage [2]
//--------------------------------------------------------------------------------------------------
bool gt_SelfDestructDamage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = (UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnitDamageSourceUnit())], c_unitPropLifeMax, c_unitPropCurrent) * 0.35);
    UnitDamage(EventUnitDamageSourceUnit(), "TriggerDamageSpellNoGain", EventUnit(), lv_damage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfDestructDamage2_Init () {
    gt_SelfDestructDamage2 = TriggerCreate("gt_SelfDestructDamage2_Func");
    TriggerAddEventUnitDamaged(gt_SelfDestructDamage2, null, c_unitDamageTypeAny, c_unitDamageEither, "SelfDestructExplodeDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unstable Energy [1]
//--------------------------------------------------------------------------------------------------
bool gt_UnstableEnergy1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_generated;

    // Variable Initialization
    lv_generated = 0.0025;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "UnstableEnergyDummy2") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * lv_generated)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) * lv_generated)));
        UnitBehaviorAdd(EventUnit(), "UnstableEnergyDummy2", EventUnit(), 1);
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false)) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, 1);
            UnitBehaviorRemove(EventUnit(), "UnstableEnergyDummy2", 1);
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * lv_generated)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) * lv_generated)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnstableEnergy1_Init () {
    gt_UnstableEnergy1 = TriggerCreate("gt_UnstableEnergy1_Func");
    TriggerAddEventUnitDamaged(gt_UnstableEnergy1, null, c_unitDamageTypeAny, c_unitDamageEither, "UnstableEnergyHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unstable Energy [2]
//--------------------------------------------------------------------------------------------------
bool gt_UnstableEnergy2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_generated;

    // Variable Initialization
    lv_generated = 0.004;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "UnstableEnergyDummy22") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * lv_generated)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) * lv_generated)));
        UnitBehaviorAdd(EventUnit(), "UnstableEnergyDummy22", EventUnit(), 1);
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false)) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, 1);
            UnitBehaviorRemove(EventUnit(), "UnstableEnergyDummy22", 1);
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * lv_generated)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) * lv_generated)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnstableEnergy2_Init () {
    gt_UnstableEnergy2 = TriggerCreate("gt_UnstableEnergy2_Func");
    TriggerAddEventUnitDamaged(gt_UnstableEnergy2, null, c_unitDamageTypeAny, c_unitDamageEither, "UnstableEnergyHeal2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purge Ally
//--------------------------------------------------------------------------------------------------
bool gt_PurgeAlly_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "MarkofDeathLevel1") == true)) {
        UnitBehaviorRemove(EventUnit(), "MarkofDeathLevel1", 1);
        UnitBehaviorAdd(EventUnit(), "ImpendingDoomLevel1Stun", EventUnit(), 1);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "MarkofDeathLevel2") == true)) {
            UnitBehaviorRemove(EventUnit(), "MarkofDeathLevel2", 1);
            UnitBehaviorAdd(EventUnit(), "ImpendingDoomLevel2Stun", EventUnit(), 1);
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "CurseofConfused") == true)) {
                UnitBehaviorRemove(EventUnit(), "CurseofConfused", 1);
            }
            else {
                if ((UnitHasBehavior(EventUnit(), "CurseofDarkness") == true)) {
                    UnitBehaviorRemove(EventUnit(), "CurseofDarkness", 1);
                }
                else {
                    if ((UnitHasBehavior(EventUnit(), "CurseoftheHun") == true)) {
                        UnitBehaviorRemove(EventUnit(), "CurseoftheHun", 1);
                    }
                    else {
                        if ((UnitHasBehavior(EventUnit(), "CurseoftheNoob") == true)) {
                            UnitBehaviorRemove(EventUnit(), "CurseoftheNoob", 1);
                        }
                        else {
                            if ((UnitHasBehavior(EventUnit(), "CurseoftheShattered") == true)) {
                                UnitBehaviorRemove(EventUnit(), "CurseoftheShattered", 1);
                            }
                            else {
                                if ((UnitHasBehavior(EventUnit(), "CurseoftheSloth") == true)) {
                                    UnitBehaviorRemove(EventUnit(), "CurseoftheSloth", 1);
                                }
                                else {
                                    if ((UnitHasBehavior(EventUnit(), "MarkofDoomLevel1") == true)) {
                                        UnitBehaviorRemove(EventUnit(), "MarkofDoomLevel1", 1);
                                    }
                                    else {
                                        if ((UnitHasBehavior(EventUnit(), "MarkofDoomLevel2") == true)) {
                                            UnitBehaviorRemove(EventUnit(), "MarkofDoomLevel2", 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurgeAlly_Init () {
    gt_PurgeAlly = TriggerCreate("gt_PurgeAlly_Func");
    TriggerAddEventUnitBehaviorChange(gt_PurgeAlly, null, "PurgedEffAlly", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_PurgeAlly, null, "PurgedEffAlly2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purge Enemy
//--------------------------------------------------------------------------------------------------
bool gt_PurgeEnemy_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "VictoryShout2") == true)) {
        UnitBehaviorRemove(EventUnit(), "VictoryShout2", 1);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "VictoryShout1") == true)) {
            UnitBehaviorRemove(EventUnit(), "VictoryShout1", 1);
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "BoonofStone") == true)) {
                UnitBehaviorRemove(EventUnit(), "BoonofStone", 1);
            }
            else {
                if ((UnitHasBehavior(EventUnit(), "BoonoftheHun") == true)) {
                    UnitBehaviorRemove(EventUnit(), "BoonoftheHun", 1);
                }
                else {
                    if ((UnitHasBehavior(EventUnit(), "BoonoftheKarak") == true)) {
                        UnitBehaviorRemove(EventUnit(), "BoonoftheKarak", 1);
                    }
                    else {
                        if ((UnitHasBehavior(EventUnit(), "BoonoftheLyote") == true)) {
                            UnitBehaviorRemove(EventUnit(), "BoonoftheLyote", 1);
                        }
                        else {
                            if ((UnitHasBehavior(EventUnit(), "BoonofthePro") == true)) {
                                UnitBehaviorRemove(EventUnit(), "BoonofthePro", 1);
                            }
                            else {
                                if ((UnitHasBehavior(EventUnit(), "QuickeningBlink") == true)) {
                                    UnitBehaviorRemove(EventUnit(), "QuickeningBlink", 1);
                                }
                                else {
                                    if ((UnitHasBehavior(EventUnit(), "QuickeningBlink2") == true)) {
                                        UnitBehaviorRemove(EventUnit(), "QuickeningBlink2", 1);
                                    }
                                    else {
                                        if ((UnitHasBehavior(EventUnit(), "SavageRoarLevel2") == true)) {
                                            UnitBehaviorRemove(EventUnit(), "SavageRoarLevel2", 1);
                                        }
                                        else {
                                            if ((UnitHasBehavior(EventUnit(), "SavageRoar") == true)) {
                                                UnitBehaviorRemove(EventUnit(), "SavageRoar", 1);
                                            }
                                            else {
                                                if ((UnitHasBehavior(EventUnit(), "WildRoarEffect") == true)) {
                                                    UnitBehaviorRemove(EventUnit(), "WildRoarEffect", 1);
                                                }
                                                else {
                                                    if ((UnitHasBehavior(EventUnit(), "SpiritInfusion1") == true)) {
                                                        UnitBehaviorRemove(EventUnit(), "SpiritInfusion1", 1);
                                                    }
                                                    else {
                                                        if ((UnitHasBehavior(EventUnit(), "SpiritInfusion2") == true)) {
                                                            UnitBehaviorRemove(EventUnit(), "SpiritInfusion2", 1);
                                                        }
                                                        else {
                                                            if ((UnitHasBehavior(EventUnit(), "SpiritInfusion3") == true)) {
                                                                UnitBehaviorRemove(EventUnit(), "SpiritInfusion3", 1);
                                                            }
                                                            else {
                                                                if ((UnitHasBehavior(EventUnit(), "LightofAiur3") == true)) {
                                                                    UnitBehaviorRemove(EventUnit(), "LightofAiur3", 1);
                                                                }
                                                                else {
                                                                    if ((UnitHasBehavior(EventUnit(), "LightofAiur2") == true)) {
                                                                        UnitBehaviorRemove(EventUnit(), "LightofAiur2", 1);
                                                                    }
                                                                    else {
                                                                        if ((UnitHasBehavior(EventUnit(), "LightofAiur1") == true)) {
                                                                            UnitBehaviorRemove(EventUnit(), "LightofAiur1", 1);
                                                                        }
                                                                        else {
                                                                            if ((UnitHasBehavior(EventUnit(), "Cleanse1") == true)) {
                                                                                UnitBehaviorRemove(EventUnit(), "Cleanse1", 1);
                                                                            }
                                                                            else {
                                                                                if ((UnitHasBehavior(EventUnit(), "Cleanse2") == true)) {
                                                                                    UnitBehaviorRemove(EventUnit(), "Cleanse2", 1);
                                                                                }
                                                                                else {
                                                                                    if ((UnitHasBehavior(EventUnit(), "AegisofAiur1") == true)) {
                                                                                        UnitBehaviorRemove(EventUnit(), "AegisofAiur1", 1);
                                                                                    }
                                                                                    else {
                                                                                        if ((UnitHasBehavior(EventUnit(), "AegisofAiur2") == true)) {
                                                                                            UnitBehaviorRemove(EventUnit(), "AegisofAiur2", 1);
                                                                                        }
                                                                                        else {
                                                                                            if ((UnitHasBehavior(EventUnit(), "ShieldofAiur") == true)) {
                                                                                                UnitBehaviorRemove(EventUnit(), "ShieldofAiur", 1);
                                                                                            }
                                                                                            else {
                                                                                                if ((UnitHasBehavior(EventUnit(), "ShieldofVengeance") == true)) {
                                                                                                    UnitBehaviorRemove(EventUnit(), "ShieldofVengeanceArmorStack", 15);
                                                                                                    UnitBehaviorRemove(EventUnit(), "ShieldofVengeance", 1);
                                                                                                }
                                                                                                else {
                                                                                                    if ((UnitHasBehavior(EventUnit(), "ShieldofVengeance2") == true)) {
                                                                                                        UnitBehaviorRemove(EventUnit(), "ShieldofVengeanceArmorStack", 15);
                                                                                                        UnitBehaviorRemove(EventUnit(), "ShieldofVengeance2", 1);
                                                                                                    }
                                                                                                    else {
                                                                                                        if ((UnitHasBehavior(EventUnit(), "ShieldofVengeance3") == true)) {
                                                                                                            UnitBehaviorRemove(EventUnit(), "ShieldofVengeanceArmorStack", 15);
                                                                                                            UnitBehaviorRemove(EventUnit(), "ShieldofVengeance3", 1);
                                                                                                        }

                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurgeEnemy_Init () {
    gt_PurgeEnemy = TriggerCreate("gt_PurgeEnemy_Func");
    TriggerAddEventUnitBehaviorChange(gt_PurgeEnemy, null, "Purged", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_PurgeEnemy, null, "Purged2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Protoss
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostileProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zeratul", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("PreserverC", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ChosenElder", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("AiurChampion", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Stalker", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Probe", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Immortal", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Colossus", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Archon", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Sentry", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("HighTemplar", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Thief", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DarkTemplar", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DehakaMirrorImage", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zealot", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostileProtoss_Init () {
    gt_ScanHostileProtoss = TriggerCreate("gt_ScanHostileProtoss_Func");
    TriggerAddEventUnitAbility(gt_ScanHostileProtoss, null, AbilityCommand("ScanHostileProtoss", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Structure
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostileStructure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("AlchemicFuserBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("BlazingFireStone", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ForgeBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("MageFireStone", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NexusBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("PODBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("PhotonCannonBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ReliquaryBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TanneryBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TechFacilityBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Vault", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("VoidTowerBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("XelNagaTempleBuilt", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostileStructure_Init () {
    gt_ScanHostileStructure = TriggerCreate("gt_ScanHostileStructure_Func");
    TriggerAddEventUnitAbility(gt_ScanHostileStructure, null, AbilityCommand("ScanHostileStructure", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Quilgor
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostileQuilgor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpaceCowSmall", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostileQuilgor_Init () {
    gt_ScanHostileQuilgor = TriggerCreate("gt_ScanHostileQuilgor_Func");
    TriggerAddEventUnitAbility(gt_ScanHostileQuilgor, null, AbilityCommand("ScanHostileQuilgor", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Lyote
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostileLyote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Lyote", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostileLyote_Init () {
    gt_ScanHostileLyote = TriggerCreate("gt_ScanHostileLyote_Func");
    TriggerAddEventUnitAbility(gt_ScanHostileLyote, null, AbilityCommand("ScanHostileLyote", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Spinean
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostileSpinean_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Lurker", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostileSpinean_Init () {
    gt_ScanHostileSpinean = TriggerCreate("gt_ScanHostileSpinean_Func");
    TriggerAddEventUnitAbility(gt_ScanHostileSpinean, null, AbilityCommand("ScanHostileSpinean", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Panthor
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostilePanthor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Predator", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostilePanthor_Init () {
    gt_ScanHostilePanthor = TriggerCreate("gt_ScanHostilePanthor_Func");
    TriggerAddEventUnitAbility(gt_ScanHostilePanthor, null, AbilityCommand("ScanHostilePanthor", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan: Hostile Transport Ship
//--------------------------------------------------------------------------------------------------
bool gt_ScanHostileTransportShip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scansize;

    // Variable Initialization
    lv_scansize = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel2") == true)) {
        lv_scansize = 75;
    }

    if ((UnitHasBehavior(EventUnit(), "ScanHostileLevel3") == true)) {
        lv_scansize = 100;
    }

    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("VoidRay", "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_scansize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanHostileTransportShip_Init () {
    gt_ScanHostileTransportShip = TriggerCreate("gt_ScanHostileTransportShip_Func");
    TriggerAddEventUnitAbility(gt_ScanHostileTransportShip, null, AbilityCommand("ScanHostileTransportShip", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace
//--------------------------------------------------------------------------------------------------
bool gt_Replace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_highestenergyunit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesUsed) > PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesMade))) {
        UnitGroupLoopBegin(UnitGroup("Observer", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("SS_Interceptor", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("WidowMine", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("WidowMineBurrowed", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitKill(lv_highestenergyunit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Replace_Init () {
    gt_Replace = TriggerCreate("gt_Replace_Func");
    TriggerAddEventUnitCreated(gt_Replace, null, "DeploySeekersDrone", null);
    TriggerAddEventUnitCreated(gt_Replace, null, "SeekersEye", null);
    TriggerAddEventUnitCreated(gt_Replace, null, "DeploySeekersVengeance", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vengeance Buff
//--------------------------------------------------------------------------------------------------
bool gt_VengeanceBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SeekersVengeance"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], "IntIntellect");
    UnitBehaviorAdd(EventUnit(), "SeekersVengeanceDamage", EventUnit(), lv_int);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VengeanceBuff_Init () {
    gt_VengeanceBuff = TriggerCreate("gt_VengeanceBuff_Func");
    TriggerAddEventUnitRegion(gt_VengeanceBuff, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seek and Destroy
//--------------------------------------------------------------------------------------------------
bool gt_SeekandDestroy_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnitDamageSourceUnit())), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(90.20, 0.00, 0.00, 0.00), 8.0);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetRotation(PingLastCreated(), 90.0);
    PingSetUnit(PingLastCreated(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeekandDestroy_Init () {
    gt_SeekandDestroy = TriggerCreate("gt_SeekandDestroy_Func");
    TriggerAddEventUnitDamaged(gt_SeekandDestroy, null, c_unitDamageTypeAny, c_unitDamageEither, "SeekandDestroyDummyDmg");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lunge
//--------------------------------------------------------------------------------------------------
bool gt_Lunge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_untitledVariable001;
    fixed lv_distancemultiplier;
    int lv_height;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_height = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Oracle", "Height", c_playerAny);
    gv_globalheight = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Oracle", "Height", c_playerAny);
    lv_distancemultiplier = (0.065 + (DistanceBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint()) * 0.03));
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    UnitBehaviorAdd(EventUnit(), "SupressCollide", EventUnit(), 1);
    UnitSetHeight(EventUnit(), 1.5, (lv_distancemultiplier / 1.5));
    UnitBehaviorAdd(EventUnit(), "LungeHeight", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "Lunge1", EventUnit(), 1);
    UnitBehaviorSetDuration(EventUnit(), "Lunge1", ((lv_distancemultiplier * 1.25) + 0.15));
    UnitBehaviorSetDuration(EventUnit(), "LungeHeight", ((lv_distancemultiplier * 0.25) + 0.15));
    UnitBehaviorSetDuration(EventUnit(), "SupressCollide", ((lv_distancemultiplier * 1.25) + 1.0));
    Wait((lv_distancemultiplier / 1.5), c_timeGame);
    UnitSetHeight(EventUnit(), lv_height, (lv_distancemultiplier / 1.5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Lunge_Init () {
    gt_Lunge = TriggerCreate("gt_Lunge_Func");
    TriggerAddEventUnitAbility(gt_Lunge, null, AbilityCommand("LungeLevel1", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Lunge, null, AbilityCommand("LungeLevel2", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lunge Off
//--------------------------------------------------------------------------------------------------
bool gt_LungeOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distancemultiplier;

    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LungeOff_Init () {
    gt_LungeOff = TriggerCreate("gt_LungeOff_Func");
    TriggerAddEventUnitBehaviorChange(gt_LungeOff, null, "SupressCollide", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kinetic Grasp
//--------------------------------------------------------------------------------------------------
bool gt_KineticGrasp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_kineticgrasparea;
    int lv_kineticgraspamount;

    // Variable Initialization
    lv_kineticgrasparea = 25.0;
    lv_kineticgraspamount = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("KineticGraspLevel2", 0))) {
        lv_kineticgrasparea = 40.0;
        lv_kineticgraspamount = 15;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), lv_kineticgrasparea), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_kineticgraspamount));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 1.5)), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KineticGrasp_Init () {
    gt_KineticGrasp = TriggerCreate("gt_KineticGrasp_Func");
    TriggerAddEventUnitAbility(gt_KineticGrasp, null, AbilityCommand("KineticGraspLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_KineticGrasp, null, AbilityCommand("KineticGraspLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Material
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteMaterial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 17))) {
        lv_rng = RandomInt(1, 4);
        if ((UnitGetType(EventUnitTargetUnit()) == "Rock")) {
            if ((lv_rng == 1)) {
                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Mineral", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
                if ((lv_rng == 2)) {
                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Emberthorn", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else {
                    if ((lv_rng == 3)) {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Relic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    else {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "BanelingDust", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                }
            }
        }
        else {
            if ((UnitGetType(EventUnitTargetUnit()) == "Mineral")) {
                if ((lv_rng == 1)) {
                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Rock", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else {
                    if ((lv_rng == 2)) {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Emberthorn", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    else {
                        if ((lv_rng == 3)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Relic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "BanelingDust", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                    }
                }
            }
            else {
                if ((UnitGetType(EventUnitTargetUnit()) == "Emberthorn")) {
                    if ((lv_rng == 1)) {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Rock", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    else {
                        if ((lv_rng == 2)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Mineral", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            if ((lv_rng == 3)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Relic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "BanelingDust", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                        }
                    }
                }
                else {
                    if ((UnitGetType(EventUnitTargetUnit()) == "Relic")) {
                        if ((lv_rng == 1)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Rock", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            if ((lv_rng == 2)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Mineral", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 3)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Emberthorn", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "BanelingDust", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                            }
                        }
                    }
                    else {
                        if ((UnitGetType(EventUnitTargetUnit()) == "BanelingDust")) {
                            if ((lv_rng == 1)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Rock", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 2)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Mineral", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 3)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Emberthorn", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Relic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "TransmuteFinish", EventUnit(), 1);
        TextTagCreate((StringExternal("Param/Value/7328EB9F") + StringExternal("Param/Value/C2F5EAD0")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(libNtve_gf_LastReplacedUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        TextTagCreate((StringExternal("Param/Value/928A7F45") + StringExternal("Param/Value/3EAD2158")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        UnitKill(EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteMaterial_Init () {
    gt_TransmuteMaterial = TriggerCreate("gt_TransmuteMaterial_Func");
    TriggerAddEventUnitAbility(gt_TransmuteMaterial, null, AbilityCommand("TransmuteBasicMaterial", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Herb
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteHerb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 15))) {
        lv_rng = RandomInt(1, 8);
        if ((UnitGetType(EventUnitTargetUnit()) == "ButsuItem")) {
            if ((lv_rng == 1)) {
                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
                if ((lv_rng == 2)) {
                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else {
                    if ((lv_rng == 3)) {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    else {
                        if ((lv_rng == 4)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            if ((lv_rng == 5)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 6)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 7)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            if ((UnitGetType(EventUnitTargetUnit()) == "Thistle")) {
                if ((lv_rng == 1)) {
                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else {
                    if ((lv_rng == 2)) {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    else {
                        if ((lv_rng == 3)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            if ((lv_rng == 4)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 5)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 6)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        if ((lv_rng == 7)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if ((UnitGetType(EventUnitTargetUnit()) == "MushroomItem")) {
                    if ((lv_rng == 1)) {
                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                    }
                    else {
                        if ((lv_rng == 2)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            if ((lv_rng == 3)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 4)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 5)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        if ((lv_rng == 6)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            if ((lv_rng == 7)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    if ((UnitGetType(EventUnitTargetUnit()) == "RiverRoot")) {
                        if ((lv_rng == 1)) {
                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                        }
                        else {
                            if ((lv_rng == 2)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 3)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 4)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        if ((lv_rng == 5)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            if ((lv_rng == 6)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                if ((lv_rng == 7)) {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                                else {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((UnitGetType(EventUnitTargetUnit()) == "RiverStem")) {
                            if ((lv_rng == 1)) {
                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                            }
                            else {
                                if ((lv_rng == 2)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 3)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        if ((lv_rng == 4)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            if ((lv_rng == 5)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                if ((lv_rng == 6)) {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                                else {
                                                    if ((lv_rng == 7)) {
                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    }
                                                    else {
                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ((UnitGetType(EventUnitTargetUnit()) == "OceansBreatheItem")) {
                                if ((lv_rng == 1)) {
                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                }
                                else {
                                    if ((lv_rng == 2)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        if ((lv_rng == 3)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            if ((lv_rng == 4)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                if ((lv_rng == 5)) {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                                else {
                                                    if ((lv_rng == 6)) {
                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    }
                                                    else {
                                                        if ((lv_rng == 7)) {
                                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                        }
                                                        else {
                                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if ((UnitGetType(EventUnitTargetUnit()) == "InfernoRootItem")) {
                                    if ((lv_rng == 1)) {
                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                    }
                                    else {
                                        if ((lv_rng == 2)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            if ((lv_rng == 3)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                if ((lv_rng == 4)) {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                                else {
                                                    if ((lv_rng == 5)) {
                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    }
                                                    else {
                                                        if ((lv_rng == 6)) {
                                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                        }
                                                        else {
                                                            if ((lv_rng == 7)) {
                                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                            }
                                                            else {
                                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((UnitGetType(EventUnitTargetUnit()) == "StormLeafItem")) {
                                        if ((lv_rng == 1)) {
                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                        }
                                        else {
                                            if ((lv_rng == 2)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                if ((lv_rng == 3)) {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                                else {
                                                    if ((lv_rng == 4)) {
                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    }
                                                    else {
                                                        if ((lv_rng == 5)) {
                                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                        }
                                                        else {
                                                            if ((lv_rng == 6)) {
                                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                            }
                                                            else {
                                                                if ((lv_rng == 7)) {
                                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                                }
                                                                else {
                                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ShadowsThornItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if ((UnitGetType(EventUnitTargetUnit()) == "ShadowsThornItem")) {
                                            if ((lv_rng == 1)) {
                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "ButsuItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                            }
                                            else {
                                                if ((lv_rng == 2)) {
                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Thistle", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                }
                                                else {
                                                    if ((lv_rng == 3)) {
                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "MushroomItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                    }
                                                    else {
                                                        if ((lv_rng == 4)) {
                                                            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverRoot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                        }
                                                        else {
                                                            if ((lv_rng == 5)) {
                                                                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "RiverStem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                            }
                                                            else {
                                                                if ((lv_rng == 6)) {
                                                                    libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "OceansBreatheItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                                }
                                                                else {
                                                                    if ((lv_rng == 7)) {
                                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfernoRootItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                                    }
                                                                    else {
                                                                        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "StormLeafItem", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "TransmuteFinish", EventUnit(), 1);
        TextTagCreate((StringExternal("Param/Value/658C3C8C") + StringExternal("Param/Value/32941816")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(libNtve_gf_LastReplacedUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        TextTagCreate((StringExternal("Param/Value/C0A71B07") + StringExternal("Param/Value/444587B3")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        UnitKill(EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteHerb_Init () {
    gt_TransmuteHerb = TriggerCreate("gt_TransmuteHerb_Func");
    TriggerAddEventUnitAbility(gt_TransmuteHerb, null, AbilityCommand("TransmuteHerb", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Lesser Potion
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteLesserPotion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    unit lv_butsu;
    unit lv_herb2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_herb2 == null) && (UnitGroupLoopCurrent() != lv_butsu) && ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") || (UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem") || (UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") || (UnitGetType(UnitGroupLoopCurrent()) == "RiverStem"))) {
            lv_herb2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 13))) {
        UnitBehaviorAdd(EventUnit(), "TransmutedMovement", EventUnit(), 1);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        if ((lv_butsu != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "RiverRoot")) {
            UnitRemove(lv_butsu);
            UnitRemove(lv_herb2);
            Wait(gv_transmutetime, c_timeGame);
            lv_rng = RandomInt(1, 20);
            if (((lv_rng >= 1) && (lv_rng <= 14))) {
                UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                TextTagCreate((StringExternal("Param/Value/80A084F5") + StringExternal("Param/Value/EB46DD12")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            }
            else {
                if (((lv_rng >= 15) && (lv_rng <= 18))) {
                    UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                    Wait((gv_transmutetime / 2.0), c_timeGame);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                    TextTagCreate((StringExternal("Param/Value/8800C6F2") + StringExternal("Param/Value/599DB69F")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                }
                else {
                    UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                    Wait((gv_transmutetime / 2.0), c_timeGame);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                    Wait((gv_transmutetime / 3.0), c_timeGame);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                    TextTagCreate((StringExternal("Param/Value/CA84878C") + StringExternal("Param/Value/DCF140A7")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                }
            }
        }
        else {
            if ((lv_butsu != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "RiverStem")) {
                UnitRemove(lv_butsu);
                UnitRemove(lv_herb2);
                Wait(gv_transmutetime, c_timeGame);
                lv_rng = RandomInt(1, 20);
                if (((lv_rng >= 1) && (lv_rng <= 14))) {
                    UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                    TextTagCreate((StringExternal("Param/Value/B118D8BE") + StringExternal("Param/Value/E41D9B3A")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                }
                else {
                    if (((lv_rng >= 15) && (lv_rng <= 18))) {
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                        Wait((gv_transmutetime / 2.0), c_timeGame);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                        TextTagCreate((StringExternal("Param/Value/97AD6B17") + StringExternal("Param/Value/175C8F5E")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                        Wait((gv_transmutetime / 2.0), c_timeGame);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                        Wait((gv_transmutetime / 3.0), c_timeGame);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                        TextTagCreate((StringExternal("Param/Value/25512261") + StringExternal("Param/Value/4E5CB8F5")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    }
                }
            }
            else {
                if ((lv_butsu != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "MushroomItem")) {
                    UnitRemove(lv_butsu);
                    UnitRemove(lv_herb2);
                    Wait(gv_transmutetime, c_timeGame);
                    lv_rng = RandomInt(1, 20);
                    if (((lv_rng >= 1) && (lv_rng <= 14))) {
                        UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
                        TextTagCreate((StringExternal("Param/Value/6E5CE57C") + StringExternal("Param/Value/99AF7F9E")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    }
                    else {
                        if (((lv_rng >= 15) && (lv_rng <= 18))) {
                            UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
                            Wait((gv_transmutetime / 2.0), c_timeGame);
                            UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
                            TextTagCreate((StringExternal("Param/Value/F5F0DD79") + StringExternal("Param/Value/C3A7DCAC")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        }
                        else {
                            UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
                            Wait((gv_transmutetime / 2.0), c_timeGame);
                            UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
                            Wait((gv_transmutetime / 3.0), c_timeGame);
                            UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
                            TextTagCreate((StringExternal("Param/Value/265B270B") + StringExternal("Param/Value/B6B703E3")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        }
                    }
                }
                else {
                    if ((lv_butsu != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "ButsuItem")) {
                        UnitRemove(lv_butsu);
                        UnitRemove(lv_herb2);
                        Wait(gv_transmutetime, c_timeGame);
                        lv_rng = RandomInt(1, 20);
                        if (((lv_rng >= 1) && (lv_rng <= 14))) {
                            Wait(gv_transmutetime, c_timeGame);
                            UnitInventoryCreate(EventUnit(), "CureAll");
                            TextTagCreate((StringExternal("Param/Value/DD01BF82") + StringExternal("Param/Value/439ED149")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        }
                        else {
                            if (((lv_rng >= 15) && (lv_rng <= 18))) {
                                Wait(gv_transmutetime, c_timeGame);
                                UnitInventoryCreate(EventUnit(), "CureAll");
                                Wait((gv_transmutetime / 2.0), c_timeGame);
                                UnitInventoryCreate(EventUnit(), "CureAll");
                                TextTagCreate((StringExternal("Param/Value/E127F0B7") + StringExternal("Param/Value/F30AD3BD")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                            }
                            else {
                                Wait(gv_transmutetime, c_timeGame);
                                UnitInventoryCreate(EventUnit(), "CureAll");
                                Wait((gv_transmutetime / 2.0), c_timeGame);
                                UnitInventoryCreate(EventUnit(), "CureAll");
                                Wait((gv_transmutetime / 3.0), c_timeGame);
                                UnitInventoryCreate(EventUnit(), "CureAll");
                                TextTagCreate((StringExternal("Param/Value/A83E8DC7") + StringExternal("Param/Value/9A33A966")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                            }
                        }
                    }

                }
            }
        }
        UnitBehaviorRemove(EventUnit(), "TransmutedMovement", 1);
        ActorCreate(ActorScopeFromUnit(EventUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        UnitRemove(lv_butsu);
        UnitRemove(lv_herb2);
        TextTagCreate((StringExternal("Param/Value/472C5E77") + StringExternal("Param/Value/8196635E")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteLesserPotion_Init () {
    gt_TransmuteLesserPotion = TriggerCreate("gt_TransmuteLesserPotion_Func");
    TriggerAddEventUnitAbility(gt_TransmuteLesserPotion, null, AbilityCommand("TransmuteLesserPotion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Ingot
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteIngot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    unit lv_stone;
    unit lv_banelingDust;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
            lv_stone = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_banelingDust = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 12))) {
        lv_rng = RandomInt(1, 100);
        if (((lv_rng >= 1) && (lv_rng <= 75))) {
            if ((lv_stone != null) && (lv_banelingDust != null)) {
                TextTagCreate((StringExternal("Param/Value/C98E14E8") + StringExternal("Param/Value/DD107D5A")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                UnitRemove(lv_stone);
                UnitRemove(lv_banelingDust);
                Wait(gv_transmutetime, c_timeGame);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                UnitInventoryCreate(EventUnit(), "BaneIgnot");
            }

        }
        else {
            if (((lv_rng >= 76) && (lv_rng <= 90))) {
                if ((lv_stone != null) && (lv_banelingDust != null)) {
                    TextTagCreate((StringExternal("Param/Value/52ECDA0C") + StringExternal("Param/Value/88FC1C8D")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    UnitRemove(lv_stone);
                    UnitRemove(lv_banelingDust);
                    Wait(gv_transmutetime, c_timeGame);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                    UnitInventoryCreate(EventUnit(), "BaneIgnot");
                    UnitInventoryCreate(EventUnit(), "BaneIgnot");
                }

            }
            else {
                if (((lv_rng >= 91) && (lv_rng <= 97))) {
                    if ((lv_stone != null) && (lv_banelingDust != null)) {
                        TextTagCreate((StringExternal("Param/Value/3715A1E5") + StringExternal("Param/Value/124BBF22")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        UnitRemove(lv_stone);
                        UnitRemove(lv_banelingDust);
                        Wait(gv_transmutetime, c_timeGame);
                        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                        UnitInventoryCreate(EventUnit(), "AiurIgnot");
                    }

                }
                else {
                    if (((lv_rng >= 98) && (lv_rng <= 100))) {
                        if ((lv_stone != null) && (lv_banelingDust != null)) {
                            TextTagCreate((StringExternal("Param/Value/736A34FF") + StringExternal("Param/Value/CCEDEB5D")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                            UnitRemove(lv_stone);
                            UnitRemove(lv_banelingDust);
                            Wait(gv_transmutetime, c_timeGame);
                            UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                            UnitInventoryCreate(EventUnit(), "AiurIgnot");
                            UnitInventoryCreate(EventUnit(), "AiurIgnot");
                        }

                    }

                }
            }
        }
        ActorCreate(ActorScopeFromUnit(EventUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        UnitRemove(lv_stone);
        UnitRemove(lv_banelingDust);
        TextTagCreate((StringExternal("Param/Value/9CCF34D4") + StringExternal("Param/Value/5466E5FC")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteIngot_Init () {
    gt_TransmuteIngot = TriggerCreate("gt_TransmuteIngot_Func");
    TriggerAddEventUnitAbility(gt_TransmuteIngot, null, AbilityCommand("TransmuteIngot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Arcana
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteArcana_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 14))) {
        lv_rng = RandomInt(1, 3);
        if ((lv_rng == 1)) {
            libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Magic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
            if ((lv_rng == 2)) {
                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "Warpstone", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
                libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "VoidCrystal", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
        }
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "TransmuteFinish", EventUnit(), 1);
        TextTagCreate((StringExternal("Param/Value/E7DE6BFD") + StringExternal("Param/Value/BBCAAFBC")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(libNtve_gf_LastReplacedUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        TextTagCreate((StringExternal("Param/Value/76688E9C") + StringExternal("Param/Value/EDAFD0E3")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        UnitKill(EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteArcana_Init () {
    gt_TransmuteArcana = TriggerCreate("gt_TransmuteArcana_Func");
    TriggerAddEventUnitAbility(gt_TransmuteArcana, null, AbilityCommand("TransmuteArcana", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Gold
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteGold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    int lv_stackcount;
    int lv_itemsmaxcharge;
    string lv_chargelink;
    int lv_pawnvalue;

    // Variable Initialization
    lv_chargelink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 10))) {
        if ((UnitHasBehavior2(EventUnitTargetUnit(), "StackableItem") == true)) {
            lv_pawnvalue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitTargetUnit()), "CostResource[" + IntToString(0) + "]", c_playerAny);
            lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitTargetUnit())), "EffectCost.Charge.Link", c_playerAny);
            lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitTargetUnit())), "EffectCost.Charge.CountMax", c_playerAny));
            lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(EventUnitTargetUnit(), lv_chargelink)));
            lv_pawnvalue = (lv_pawnvalue / lv_itemsmaxcharge);
            lv_pawnvalue = (lv_pawnvalue * lv_stackcount);
            SoundPlayForPlayer(SoundLink("PawnSound", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
            TextTagCreate((StringExternal("Param/Value/E3224EF9") + IntToText(lv_pawnvalue)), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
            TextTagSetGravity(TextTagLastCreated(), 0.4);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(75.29, 68.63, 7.06));
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, lv_pawnvalue);
            UnitRemove(EventUnitTargetUnit());
        }
        else {
            lv_pawnvalue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitTargetUnit()), "CostResource[" + IntToString(0) + "]", c_playerAny);
            SoundPlayForPlayer(SoundLink("PawnSound", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
            TextTagCreate((StringExternal("Param/Value/7429E67B") + IntToText(lv_pawnvalue)), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
            TextTagSetGravity(TextTagLastCreated(), 0.4);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(75.29, 68.63, 7.06));
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitTargetUnit()), "CostResource[" + IntToString(0) + "]", c_playerAny));
            UnitRemove(EventUnitTargetUnit());
        }
        TextTagCreate((StringExternal("Param/Value/0A94C000") + StringExternal("Param/Value/BC0CF86D")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(libNtve_gf_LastReplacedUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
    }
    else {
        TextTagCreate((StringExternal("Param/Value/DBD2DFB4") + StringExternal("Param/Value/268F7267")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        UnitKill(EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteGold_Init () {
    gt_TransmuteGold = TriggerCreate("gt_TransmuteGold_Func");
    TriggerAddEventUnitAbility(gt_TransmuteGold, null, AbilityCommand("TransmuteGold", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Greater Potion
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteGreaterPotion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;
    unit lv_specialherb;
    unit lv_herb2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "OceansBreatheItem") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThornItem") || (UnitGetType(UnitGroupLoopCurrent()) == "StormLeafItem") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernoRootItem"))) {
            lv_specialherb = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_herb2 == null) && (UnitGroupLoopCurrent() != lv_specialherb) && (UnitGetType(UnitGroupLoopCurrent()) == UnitGetType(lv_specialherb)) && ((UnitGetType(UnitGroupLoopCurrent()) == "OceansBreatheItem") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThornItem") || (UnitGetType(UnitGroupLoopCurrent()) == "StormLeafItem") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernoRootItem") || (UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem") || (UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") || (UnitGetType(UnitGroupLoopCurrent()) == "RiverStem"))) {
            lv_herb2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 11))) {
        UnitBehaviorAdd(EventUnit(), "TransmutedMovement", EventUnit(), 1);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        if ((lv_specialherb != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "RiverRoot")) {
            UnitRemove(lv_specialherb);
            UnitRemove(lv_herb2);
            Wait(gv_transmutetime, c_timeGame);
            lv_rng = RandomInt(1, 20);
            if (((lv_rng >= 1) && (lv_rng <= 14))) {
                UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                TextTagCreate((StringExternal("Param/Value/2897416A") + StringExternal("Param/Value/7941D22C")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            }
            else {
                if (((lv_rng >= 15) && (lv_rng <= 18))) {
                    UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                    Wait((gv_transmutetime / 2.0), c_timeGame);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                    TextTagCreate((StringExternal("Param/Value/7ED86ACC") + StringExternal("Param/Value/5640C475")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                }
                else {
                    UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                    Wait((gv_transmutetime / 2.0), c_timeGame);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                    Wait((gv_transmutetime / 3.0), c_timeGame);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                    TextTagCreate((StringExternal("Param/Value/3C9E09FB") + StringExternal("Param/Value/BA756D67")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                }
            }
        }
        else {
            if ((lv_specialherb != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "RiverStem")) {
                UnitRemove(lv_specialherb);
                UnitRemove(lv_herb2);
                Wait(gv_transmutetime, c_timeGame);
                lv_rng = RandomInt(1, 20);
                if (((lv_rng >= 1) && (lv_rng <= 14))) {
                    UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                    TextTagCreate((StringExternal("Param/Value/484C3681") + StringExternal("Param/Value/ECA6E9D0")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                }
                else {
                    if (((lv_rng >= 15) && (lv_rng <= 18))) {
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                        Wait((gv_transmutetime / 2.0), c_timeGame);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                        TextTagCreate((StringExternal("Param/Value/7718D6D4") + StringExternal("Param/Value/AF23E31A")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                        Wait((gv_transmutetime / 2.0), c_timeGame);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                        Wait((gv_transmutetime / 3.0), c_timeGame);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                        TextTagCreate((StringExternal("Param/Value/D68387BC") + StringExternal("Param/Value/1DA800DF")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    }
                }
            }
            else {
                if ((lv_specialherb != null) && (lv_herb2 != null) && (UnitGetType(lv_herb2) == "MushroomItem")) {
                    UnitRemove(lv_specialherb);
                    UnitRemove(lv_herb2);
                    Wait(gv_transmutetime, c_timeGame);
                    lv_rng = RandomInt(1, 20);
                    if (((lv_rng >= 1) && (lv_rng <= 14))) {
                        UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
                        TextTagCreate((StringExternal("Param/Value/DF3E6B18") + StringExternal("Param/Value/06D44AEE")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    }
                    else {
                        if (((lv_rng >= 15) && (lv_rng <= 18))) {
                            UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
                            Wait((gv_transmutetime / 2.0), c_timeGame);
                            UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
                            TextTagCreate((StringExternal("Param/Value/B8C44C20") + StringExternal("Param/Value/33881C88")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        }
                        else {
                            UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
                            Wait((gv_transmutetime / 2.0), c_timeGame);
                            UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
                            Wait((gv_transmutetime / 3.0), c_timeGame);
                            UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
                            TextTagCreate((StringExternal("Param/Value/E90CEFCE") + StringExternal("Param/Value/D07375DB")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        }
                    }
                }
                else {
                    if ((lv_specialherb != null) && (lv_herb2 != null) && ((UnitGetType(lv_herb2) == "OceansBreatheItem") || (UnitGetType(lv_herb2) == "ShadowsThornItem") || (UnitGetType(lv_herb2) == "StormLeafItem") || (UnitGetType(lv_herb2) == "InfernoRootItem"))) {
                        UnitRemove(lv_specialherb);
                        UnitRemove(lv_herb2);
                        Wait(gv_transmutetime, c_timeGame);
                        lv_rng = RandomInt(1, 20);
                        if (((lv_rng >= 1) && (lv_rng <= 14))) {
                            Wait(gv_transmutetime, c_timeGame);
                            UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
                            TextTagCreate((StringExternal("Param/Value/4E69287B") + StringExternal("Param/Value/CB356671")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        }
                        else {
                            if (((lv_rng >= 15) && (lv_rng <= 18))) {
                                Wait(gv_transmutetime, c_timeGame);
                                UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
                                Wait((gv_transmutetime / 2.0), c_timeGame);
                                UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
                                TextTagCreate((StringExternal("Param/Value/9D4EDA05") + StringExternal("Param/Value/9C5AA810")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                            }
                            else {
                                Wait(gv_transmutetime, c_timeGame);
                                UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
                                Wait((gv_transmutetime / 2.0), c_timeGame);
                                UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
                                Wait((gv_transmutetime / 3.0), c_timeGame);
                                UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
                                TextTagCreate((StringExternal("Param/Value/F7C06E7A") + StringExternal("Param/Value/DB90052D")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                            }
                        }
                    }

                }
            }
        }
        UnitBehaviorRemove(EventUnit(), "TransmutedMovement", 1);
        ActorCreate(ActorScopeFromUnit(EventUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        UnitRemove(lv_specialherb);
        UnitRemove(lv_herb2);
        TextTagCreate((StringExternal("Param/Value/7AF517ED") + StringExternal("Param/Value/7BA9C4C8")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteGreaterPotion_Init () {
    gt_TransmuteGreaterPotion = TriggerCreate("gt_TransmuteGreaterPotion_Func");
    TriggerAddEventUnitAbility(gt_TransmuteGreaterPotion, null, AbilityCommand("TransmuteGreaterPotion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Dark Matter
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteDarkMatter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 5))) {
        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "DarkMatter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "TransmuteFinish", EventUnit(), 1);
        TextTagCreate((StringExternal("Param/Value/AB934E23") + StringExternal("Param/Value/D38FD0BD")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(libNtve_gf_LastReplacedUnit()), "TransmuteSuccess", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(45.88, 92.55, 91.37));
    }
    else {
        TextTagCreate((StringExternal("Param/Value/CC5DBDAC") + StringExternal("Param/Value/77D90DC1")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "TransmuteFail", null, null, null);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        UnitKill(EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteDarkMatter_Init () {
    gt_TransmuteDarkMatter = TriggerCreate("gt_TransmuteDarkMatter_Func");
    TriggerAddEventUnitAbility(gt_TransmuteDarkMatter, null, AbilityCommand("TransmuteDarkMatter", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute: Corruption
//--------------------------------------------------------------------------------------------------
bool gt_TransmuteCorruption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(1, 20);
    if (((lv_rng >= 1) && (lv_rng <= 16))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShardofCorruption", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, UnitGetFacing(EventUnit())));
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "CorruptionTransmuteSuccess", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSuccess", null, null, null);
        ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSound", null, null, null);
        TextTagCreate((StringExternal("Param/Value/5E03837E") + StringExternal("Param/Value/A7056441")), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    else {
        if (((lv_rng >= 17) && (lv_rng <= 19))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShardofCorruption", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, (UnitGetFacing(EventUnit()) + 30.0)));
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "CorruptionTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSuccess", null, null, null);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShardofCorruption", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, (UnitGetFacing(EventUnit()) - 30.0)));
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "CorruptionTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSound", null, null, null);
            TextTagCreate((StringExternal("Param/Value/ACE20BB1") + StringExternal("Param/Value/EDBDF4D7")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
            TextTagSetGravity(TextTagLastCreated(), 0.4);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShardofCorruption", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, (UnitGetFacing(EventUnit()) + 45.0)));
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "CorruptionTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSuccess", null, null, null);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShardofCorruption", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, (UnitGetFacing(EventUnit()) - 0.0)));
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "CorruptionTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSuccess", null, null, null);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShardofCorruption", 0, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, (UnitGetFacing(EventUnit()) - 45.0)));
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "CorruptionTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSuccess", null, null, null);
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "BloodsoulTransmuteSound", null, null, null);
            TextTagCreate((StringExternal("Param/Value/838418BC") + StringExternal("Param/Value/9E11F1CE")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
            TextTagSetGravity(TextTagLastCreated(), 0.4);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransmuteCorruption_Init () {
    gt_TransmuteCorruption = TriggerCreate("gt_TransmuteCorruption_Func");
    TriggerAddEventUnitAbility(gt_TransmuteCorruption, null, AbilityCommand("TransmuteCorruption", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Tele-Gather
//--------------------------------------------------------------------------------------------------
bool gt_RemoveTeleGather_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "PsyForageOn", 1);
    UnitBehaviorRemove(EventUnit(), "TeleGather", 1);
    UnitBehaviorRemove(EventUnit(), "TeleGather22", 1);
    UnitBehaviorRemove(EventUnit(), "TeleGather32", 1);
    UnitGroupLoopBegin(UnitGroup("PsyBeacon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveTeleGather_Init () {
    gt_RemoveTeleGather = TriggerCreate("gt_RemoveTeleGather_Func");
    TriggerAddEventUnitAbility(gt_RemoveTeleGather, null, AbilityCommand("TeleGather1", 1), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_RemoveTeleGather, null, AbilityCommand("TeleGatherLevelTwo", 1), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_RemoveTeleGather, null, AbilityCommand("TeleGatherLevelThree", 1), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_RemoveTeleGather, null, AbilityCommand("PsyForageTest", 1), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tele-Gather
//--------------------------------------------------------------------------------------------------
bool gt_TeleGather_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorEnabled(EventUnit(), "PsyForageOn") == true) || (UnitBehaviorEnabled(EventUnit(), "TeleGather") == true) || (UnitBehaviorEnabled(EventUnit(), "TeleGather22") == true) || (UnitBehaviorEnabled(EventUnit(), "TeleGather32") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("PsyBeacon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(EventUnitInventoryItem(), RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(UnitGroupLoopCurrent())), PointGetY(UnitGetPosition(UnitGroupLoopCurrent()))), 0.75)), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleGather_Init () {
    gt_TeleGather = TriggerCreate("gt_TeleGather_Func");
    TriggerAddEventUnitInventoryChange(gt_TeleGather, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psy-Forager (Beacon)
//--------------------------------------------------------------------------------------------------
bool gt_PsyForagerBeacon_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PsyBeacon", 0, EventPlayer(), UnitGetPosition(EventUnit()));
    if ((EventUnitAbility() == AbilityCommand("TeleGather1", 0))) {
        UnitBehaviorAdd(UnitLastCreated(), "TeleBeaconTimedLife", EventUnit(), 1);
    }
    else {
        if ((EventUnitAbility() == AbilityCommand("TeleGatherLevelTwo", 0))) {
            UnitBehaviorAdd(UnitLastCreated(), "TeleBeaconTimedLife2", EventUnit(), 1);
        }
        else {
            if ((EventUnitAbility() == AbilityCommand("TeleGatherLevelThree", 0))) {
                UnitBehaviorAdd(UnitLastCreated(), "TeleBeaconTimedLife3", EventUnit(), 1);
            }
            else {
                UnitBehaviorAdd(UnitLastCreated(), "PsyBeaconTimedLife", EventUnit(), 1);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsyForagerBeacon_Init () {
    gt_PsyForagerBeacon = TriggerCreate("gt_PsyForagerBeacon_Func");
    TriggerAddEventUnitAbility(gt_PsyForagerBeacon, null, AbilityCommand("PsyForageTest", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_PsyForagerBeacon, null, AbilityCommand("TeleGather1", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_PsyForagerBeacon, null, AbilityCommand("TeleGatherLevelTwo", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_PsyForagerBeacon, null, AbilityCommand("TeleGatherLevelThree", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace Special Building
//--------------------------------------------------------------------------------------------------
bool gt_ReplaceSpecialBuilding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_highestenergyunit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesUsed) > PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesMade))) {
        UnitGroupLoopBegin(UnitGroup("Stargate", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("KineticPylon", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Pylon", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) > UnitGetPropertyFixed(lv_highestenergyunit, c_unitPropEnergy, c_unitPropCurrent))) {
                lv_highestenergyunit = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitKill(lv_highestenergyunit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReplaceSpecialBuilding_Init () {
    gt_ReplaceSpecialBuilding = TriggerCreate("gt_ReplaceSpecialBuilding_Func");
    TriggerAddEventUnitCreated(gt_ReplaceSpecialBuilding, null, "DeployTradingPost", null);
    TriggerAddEventUnitCreated(gt_ReplaceSpecialBuilding, null, "DeployKineticPylon", null);
    TriggerAddEventUnitCreated(gt_ReplaceSpecialBuilding, null, "DeployPsionicArsenal", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Import Items [new]
//--------------------------------------------------------------------------------------------------
bool gt_ImportItemsnew_Func (bool testConds, bool runActions) {
    int auto046D17DD_ae;
    int auto046D17DD_ai;

    // Variable Declarations
    unit lv_pylon;
    unit lv_gatheringhero;
    int lv_pyloninventory;
    int lv_totalinventoryslots;
    int lv_itemcount;
    int lv_itemstackcount;
    int lv_itemsmaxcharge;
    int lv_stackcounter;
    string lv_chargelink;

    // Variable Initialization
    lv_pyloninventory = 6;
    lv_totalinventoryslots = 6;
    lv_chargelink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pylon = EventUnit();
    lv_gatheringhero = gv_hero[UnitGetOwner(EventUnit())];
    if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel") == true) || (UnitHasBehavior2(lv_gatheringhero, "MultiDimensionalPouch") == true))) {
        lv_totalinventoryslots += 4;
    }
    else {
        if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel1") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors1") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors2") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors3") == true))) {
            lv_totalinventoryslots += 5;
        }
        else {
            if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel2") == true) || (UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel3") == true))) {
                lv_totalinventoryslots += 6;
            }

        }
    }
    UnitGroupLoopBegin(UnitInventoryGroup(lv_pylon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itemcount += 1;
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(lv_gatheringhero));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_itemcount < lv_pyloninventory) && (UnitGetType(UnitGroupLoopCurrent()) != "MultiDimensionalSatchel") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrorsc") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors1c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors2c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors3c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchelc") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel1c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel2c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel3c")) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "StackableItem") == true)) {
                lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
                lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
                lv_itemstackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                auto046D17DD_ae = lv_itemstackcount;
                auto046D17DD_ai = 1;
                lv_stackcounter = 1;
                for ( ; ( (auto046D17DD_ai >= 0 && lv_stackcounter <= auto046D17DD_ae) || (auto046D17DD_ai <= 0 && lv_stackcounter >= auto046D17DD_ae) ) ; lv_stackcounter += auto046D17DD_ai ) {
                    UnitInventoryCreate(lv_pylon, UnitGetType(UnitGroupLoopCurrent()));
                }
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
                UnitRemove(UnitGroupLoopCurrent());
                UnitInventoryCreate(lv_pylon, UnitGetType(UnitGroupLoopCurrent()));
            }
            lv_itemcount += 1;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImportItemsnew_Init () {
    gt_ImportItemsnew = TriggerCreate("gt_ImportItemsnew_Func");
    TriggerAddEventUnitAbility(gt_ImportItemsnew, null, AbilityCommand("ImportItems", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Export Items [new]
//--------------------------------------------------------------------------------------------------
bool gt_ExportItemsnew_Func (bool testConds, bool runActions) {
    int autoB415990F_ae;
    int autoB415990F_ai;

    // Variable Declarations
    unit lv_pylon;
    unit lv_gatheringhero;
    int lv_pyloninventory;
    int lv_totalinventoryslots;
    int lv_itemcount;
    int lv_itemstackcount;
    int lv_itemsmaxcharge;
    int lv_stackcounter;
    string lv_chargelink;

    // Variable Initialization
    lv_pyloninventory = 6;
    lv_totalinventoryslots = 6;
    lv_chargelink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pylon = EventUnit();
    lv_gatheringhero = gv_hero[UnitGetOwner(EventUnit())];
    if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel") == true) || (UnitHasBehavior2(lv_gatheringhero, "MultiDimensionalPouch") == true))) {
        lv_totalinventoryslots += 4;
    }
    else {
        if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel1") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors1") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors2") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors3") == true))) {
            lv_totalinventoryslots += 5;
        }
        else {
            if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel2") == true) || (UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel3") == true))) {
                lv_totalinventoryslots += 6;
            }

        }
    }
    UnitGroupLoopBegin(UnitInventoryGroup(lv_gatheringhero));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itemcount += 1;
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(lv_pylon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_itemcount < lv_totalinventoryslots) && (UnitGetType(UnitGroupLoopCurrent()) != "MultiDimensionalSatchel") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrorsc") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors1c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors2c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000BagofHorrors3c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchelc") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel1c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel2c") && (UnitGetType(UnitGroupLoopCurrent()) != "cvalFF0000WarlordsSatchel3c")) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "StackableItem") == true)) {
                lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
                lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
                lv_itemstackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                autoB415990F_ae = lv_itemstackcount;
                autoB415990F_ai = 1;
                lv_stackcounter = 1;
                for ( ; ( (autoB415990F_ai >= 0 && lv_stackcounter <= autoB415990F_ae) || (autoB415990F_ai <= 0 && lv_stackcounter >= autoB415990F_ae) ) ; lv_stackcounter += autoB415990F_ai ) {
                    UnitInventoryCreate(lv_gatheringhero, UnitGetType(UnitGroupLoopCurrent()));
                }
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
                UnitRemove(UnitGroupLoopCurrent());
                UnitInventoryCreate(lv_gatheringhero, UnitGetType(UnitGroupLoopCurrent()));
            }
            lv_itemcount += 1;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExportItemsnew_Init () {
    gt_ExportItemsnew = TriggerCreate("gt_ExportItemsnew_Func");
    TriggerAddEventUnitAbility(gt_ExportItemsnew, null, AbilityCommand("ExportItems", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Export Items To Trading Post
//--------------------------------------------------------------------------------------------------
bool gt_ExportItemsToTradingPost_Func (bool testConds, bool runActions) {
    int init_i;

    int auto5454D0EA_ae;
    int auto5454D0EA_ai;
    int auto9847F44B_ae;
    int auto9847F44B_ai;
    int autoCE42A3E7_ae;
    int autoCE42A3E7_ai;

    // Variable Declarations
    int[7] lv_stackCount;
    int[7] lv_itemsmaxcharge;
    string[7] lv_chargelink;
    unit[7] lv_items;
    int lv_stackCounter;
    int lv_targetInventorySpace;
    int lv_counter;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_chargelink[init_i] = "";
    }
    lv_targetInventorySpace = 6;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnitTargetUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_targetInventorySpace = (lv_targetInventorySpace - 1);
    }
    UnitGroupLoopEnd();
    lv_counter = 0;
    if ((lv_targetInventorySpace > 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_items[lv_counter] = UnitGroupLoopCurrent();
            lv_counter = (lv_counter + 1);
        }
        UnitGroupLoopEnd();
        auto5454D0EA_ae = 5;
        auto5454D0EA_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto5454D0EA_ai >= 0 && lv_counter <= auto5454D0EA_ae) || (auto5454D0EA_ai <= 0 && lv_counter >= auto5454D0EA_ae) ) ; lv_counter += auto5454D0EA_ai ) {
            if ((UnitHasBehavior(lv_items[lv_counter], "StackableItem") == true)) {
                lv_chargelink[lv_counter] = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(lv_items[lv_counter])), "EffectCost.Charge.Link", c_playerAny);
                lv_itemsmaxcharge[lv_counter] = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(lv_items[lv_counter])), "EffectCost.Charge.CountMax", c_playerAny));
                lv_stackCount[lv_counter] = (lv_itemsmaxcharge[lv_counter] - FixedToInt(UnitGetChargeUsed(lv_items[lv_counter], lv_chargelink[lv_counter])));
            }

        }
        lv_counter = 0;
        auto9847F44B_ae = (lv_targetInventorySpace - 1);
        auto9847F44B_ai = 1;
        lv_counter = 0;
        for ( ; ( (auto9847F44B_ai >= 0 && lv_counter <= auto9847F44B_ae) || (auto9847F44B_ai <= 0 && lv_counter >= auto9847F44B_ae) ) ; lv_counter += auto9847F44B_ai ) {
            if ((UnitHasBehavior(lv_items[lv_counter], "StackableItem") == true)) {
                autoCE42A3E7_ae = lv_stackCount[lv_counter];
                autoCE42A3E7_ai = 1;
                lv_stackCounter = 1;
                for ( ; ( (autoCE42A3E7_ai >= 0 && lv_stackCounter <= autoCE42A3E7_ae) || (autoCE42A3E7_ai <= 0 && lv_stackCounter >= autoCE42A3E7_ae) ) ; lv_stackCounter += autoCE42A3E7_ai ) {
                    UnitInventoryCreate(EventUnitTargetUnit(), UnitGetType(lv_items[lv_counter]));
                }
                UnitRemove(lv_items[lv_counter]);
            }
            else {
                UnitInventoryCreate(EventUnitTargetUnit(), UnitGetType(lv_items[lv_counter]));
                UnitRemove(lv_items[lv_counter]);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExportItemsToTradingPost_Init () {
    gt_ExportItemsToTradingPost = TriggerCreate("gt_ExportItemsToTradingPost_Func");
    TriggerAddEventUnitAbility(gt_ExportItemsToTradingPost, null, AbilityCommand("ExporttoTradingPost", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summoned Illusion Level
//--------------------------------------------------------------------------------------------------
bool gt_SummonedIllusionLevel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("TricksterIllusion", UnitGetOwner(EventUnit()), RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 2.5), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(EventUnit()), false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLevel, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLevel, c_unitPropCurrent));
        if ((UnitGroupLoopCurrent() != EventUnit())) {
            UnitXPGainEnable(UnitGroupLoopCurrent(), null, false);
        }

        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent));
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SummonedIllusionLevel_Init () {
    gt_SummonedIllusionLevel = TriggerCreate("gt_SummonedIllusionLevel_Func");
    TriggerAddEventUnitCreated(gt_SummonedIllusionLevel, null, "TrickeryLevel1", null);
    TriggerAddEventUnitCreated(gt_SummonedIllusionLevel, null, "TrickeryLevel2", null);
    TriggerAddEventUnitCreated(gt_SummonedIllusionLevel, null, "TrickeryLevel3", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trickster's Veil
//--------------------------------------------------------------------------------------------------
bool gt_TrickstersVeil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_criticaldamage;
    fixed lv_ambushdamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ambushdamage = (lv_ambushdamage + (EventUnitDamageAmount() + lv_criticaldamage));
    lv_ambushdamage = Ceiling(lv_ambushdamage);
    TextTagCreate((IntToText(FixedToInt(lv_ambushdamage)) + StringExternal("Param/Value/C252A1EF")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrickstersVeil_Init () {
    gt_TrickstersVeil = TriggerCreate("gt_TrickstersVeil_Func");
    TriggerAddEventUnitDamaged(gt_TrickstersVeil, null, c_unitDamageTypeAny, c_unitDamageEither, "AmbushingStrikeTrickster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Illusive Blink
//--------------------------------------------------------------------------------------------------
bool gt_IllusiveBlink_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "HallucinationCreateImmortal4", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IllusiveBlink_Init () {
    gt_IllusiveBlink = TriggerCreate("gt_IllusiveBlink_Func");
    TriggerAddEventUnitAbility(gt_IllusiveBlink, null, AbilityCommand("ElusiveBlinkLevel1", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_IllusiveBlink, null, AbilityCommand("ElusiveBlinkLevel2", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_IllusiveBlink, null, AbilityCommand("ElusiveBlinkLevel3", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Illusive Illusion Set
//--------------------------------------------------------------------------------------------------
bool gt_IllusiveIllusionSet_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TricksterIllusion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLevel, c_unitPropCurrent));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLifePercent, c_unitPropCurrent));
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, UnitGetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropEnergyPercent, c_unitPropCurrent));
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(UnitGetPosition(EventUnit()), 0.01, 0.0)), c_orderQueueReplace);
    UnitXPGainEnable(EventUnit(), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IllusiveIllusionSet_Init () {
    gt_IllusiveIllusionSet = TriggerCreate("gt_IllusiveIllusionSet_Func");
    TriggerAddEventUnitRegion(gt_IllusiveIllusionSet, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Illusion Behaviors
//--------------------------------------------------------------------------------------------------
bool gt_IllusionBehaviors_Func (bool testConds, bool runActions) {
    int auto58BFF64E_ae;
    int auto58BFF64E_ai;

    // Variable Declarations
    int lv_count;
    int lv_behaviorcount;
    int[21] lv_behaviorlist;
    int[21] lv_behaviorcountlist;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TricksterIllusion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_behaviorcount = UnitBehaviorCountAll(gv_hero[UnitGetOwner(EventUnit())]);
    auto58BFF64E_ae = lv_behaviorcount;
    auto58BFF64E_ai = 1;
    lv_count = 0;
    for ( ; ( (auto58BFF64E_ai >= 0 && lv_count <= auto58BFF64E_ae) || (auto58BFF64E_ai <= 0 && lv_count >= auto58BFF64E_ae) ) ; lv_count += auto58BFF64E_ai ) {
        if (((UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AiurBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AiurBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AiurCoat") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AiurGloves") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "AiurShieldStats") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ArmoroftheGods") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ArmoroftheGods1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ArmoroftheGods2") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ArmoroftheGods3") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BaneBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BaneBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BaneCoat") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BaneGloves") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BaneShieldStats") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BladeofDarkness") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BladeofDarkness1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BladeofDarkness12") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BladeofDarkness122") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BoneBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BoneCoat") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BoneDamage") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BoneGloves") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BoneShieldStats") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BootsoftheTraveler") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BootsoftheTraveler1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BootsoftheTraveler2") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "BootsoftheTraveler3") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ChaoticGauntlets") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ChaoticGauntlets1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ChaoticGauntlets2") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ChaoticGauntlets3") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ClawsofAnguish") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ClawsofAnguish1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ClawsofAnguish2") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ClawsofAnguish3") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "DeathsEmbrace") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "DeathsEmbrace1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "DeathsEmbrace2") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "DeathsEmbrace3") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "DustyBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EyeOfKahvOc") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GlovesofInsanity") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GuardiansArmor") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "HerosSkull") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "HydroBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "KarakBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "KarakCoat") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "KarakGloves") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "LyoteBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "LyoteCoat") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "LyoteGloves") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "MineralDamage") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "OutcastsDagger") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "PhaseCoatArmor") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "QuilgorBoots") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "QuilgorCoat") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "UrsadakGloves") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SeersAiurDagger") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SeersBaneDagger") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SeersDagger") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShadowsStep") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShadowsStep1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShadowsStep2") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShadowsStep3") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShieldStats") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "ShieldoftheVoidStats") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "SoulofKahvOc") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "StaffoftheEternalFlame") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "StoneBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "StormBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "UltralisksLeftKaiserBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "UltralisksRightKaiserBlade") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "VoidDagger") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "VoidDagger1") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "VoidDagger12") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "VoidDagger122") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EmpowerAgility") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EmpowerFortitude") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EmpowerInt") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EmpowerMagic") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "EmpowerStrength") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GiftofAiur") || (UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count) == "GiftofXelNaga"))) {
            UnitBehaviorAdd(EventUnit(), UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count), EventUnit(), UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], UnitBehaviorGet(gv_hero[UnitGetOwner(EventUnit())], lv_count)));
        }

        lv_count += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IllusionBehaviors_Init () {
    gt_IllusionBehaviors = TriggerCreate("gt_IllusionBehaviors_Func");
    TriggerAddEventUnitRegion(gt_IllusionBehaviors, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Assault Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ShadowAssaultSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "HallucinationCreateTricksterShadowAssault", EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShadowAssaultSpawn_Init () {
    gt_ShadowAssaultSpawn = TriggerCreate("gt_ShadowAssaultSpawn_Func");
    TriggerAddEventUnitDamaged(gt_ShadowAssaultSpawn, null, c_unitDamageTypeAny, c_unitDamageEither, "VorazunShadowFuryDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Venomous Bite
//--------------------------------------------------------------------------------------------------
bool gt_VenomousBite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_attributedamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "PreyLevel1") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attributedamage = (UnitBehaviorCount(EventUnitDamageSourceUnit(), "AgiAgility") + UnitBehaviorCount(EventUnitDamageSourceUnit(), "AgiStrength"));
    UnitDamage(EventUnitDamageSourceUnit(), "CriticalStrike0", EventUnit(), (lv_attributedamage - UnitBehaviorCount(EventUnitDamageSourceUnit(), "AgiAgility")));
    lv_attributedamage = (lv_attributedamage + EventUnitDamageAmount());
    TextTagCreate(((StringExternal("Param/Value/2BBCE401") + IntToText(FixedToInt(lv_attributedamage))) + StringExternal("Param/Value/4FD5CD0A")), 28, UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(22*100/255,128*100/255,0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VenomousBite_Init () {
    gt_VenomousBite = TriggerCreate("gt_VenomousBite_Func");
    TriggerAddEventUnitDamaged(gt_VenomousBite, null, c_unitDamageTypeAny, c_unitDamageEither, "VenomousBiteInitialDamage1");
    TriggerAddEventUnitDamaged(gt_VenomousBite, null, c_unitDamageTypeAny, c_unitDamageEither, "VenomousBiteInitialDamage2");
    TriggerAddEventUnitDamaged(gt_VenomousBite, null, c_unitDamageTypeAny, c_unitDamageEither, "VenomousBiteInitialDamage3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prey Acquire
//--------------------------------------------------------------------------------------------------
bool gt_PreyAcquire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;
    int lv_shortestdistancehero;
    int lv_total;
    fixed lv_mindistance;
    fixed lv_maxdistance;
    fixed[13] lv_distance;
    unit[13] lv_enemyheroes;
    int lv_ping;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "DeadHero") == false)) {
            lv_enemyheroes[lv_count] = UnitGroupLoopCurrent();
            lv_distance[lv_count] = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(UnitGroupLoopCurrent()));
            if ((lv_count == 0)) {
                lv_maxdistance = lv_distance[0];
                lv_mindistance = lv_distance[0];
            }
            else {
                if ((lv_maxdistance < lv_distance[lv_count])) {
                    lv_maxdistance = lv_distance[lv_count];
                }

                if ((lv_mindistance > lv_distance[lv_count])) {
                    lv_mindistance = lv_distance[lv_count];
                    lv_shortestdistancehero = lv_count;
                }

            }
            lv_total += 1;
            lv_count += 1;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_total > 0)) {
        if ((EventUnitAbility() == AbilityCommand("PreyLevel1", 0))) {
            UnitBehaviorAdd(lv_enemyheroes[lv_shortestdistancehero], "Prey1", EventUnit(), 1);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 12.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
            PingSetUnit(PingLastCreated(), lv_enemyheroes[lv_shortestdistancehero]);
        }
        else {
            UnitBehaviorAdd(lv_enemyheroes[lv_shortestdistancehero], "Prey2", EventUnit(), 1);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 14.0, 270.0);
            PingSetScale(PingLastCreated(), 0.5);
            PingSetUnit(PingLastCreated(), lv_enemyheroes[lv_shortestdistancehero]);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreyAcquire_Init () {
    gt_PreyAcquire = TriggerCreate("gt_PreyAcquire_Func");
    TriggerAddEventUnitAbility(gt_PreyAcquire, null, AbilityCommand("PreyLevel1", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_PreyAcquire, null, AbilityCommand("PreyLevel2", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prey Venom Bite
//--------------------------------------------------------------------------------------------------
bool gt_PreyVenomBite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_criticaldamage;
    fixed lv_ambushdamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "PreyLevel1") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "PreyLevel2") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "PreyLevel1", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "PreyLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreyVenomBite_Init () {
    gt_PreyVenomBite = TriggerCreate("gt_PreyVenomBite_Func");
    TriggerAddEventUnitDamaged(gt_PreyVenomBite, null, c_unitDamageTypeAny, c_unitDamageEither, "VenomousBiteInitialDamage1");
    TriggerAddEventUnitDamaged(gt_PreyVenomBite, null, c_unitDamageTypeAny, c_unitDamageEither, "VenomousBiteInitialDamage2");
    TriggerAddEventUnitDamaged(gt_PreyVenomBite, null, c_unitDamageTypeAny, c_unitDamageEither, "VenomousBiteInitialDamage3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prey Regular Attack
//--------------------------------------------------------------------------------------------------
bool gt_PreyRegularAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "PreyLevel1") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "PreyLevel2") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "PreyLevel1", 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "PreyLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreyRegularAttack_Init () {
    gt_PreyRegularAttack = TriggerCreate("gt_PreyRegularAttack_Func");
    TriggerAddEventUnitDamaged(gt_PreyRegularAttack, null, c_unitDamageTypeAny, c_unitDamageEither, "Dehaka");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Spawn
//--------------------------------------------------------------------------------------------------
bool gt_VoidSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidZergling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_hero[UnitGetOwner(EventUnit())]) == "Voidmancer")) {
        lv_int = UnitBehaviorCount(gv_hero[UnitGetOwner(EventUnit())], "IntIntellect");
        UnitBehaviorAdd(EventUnit(), "VoidMinionStatBonus", EventUnit(), lv_int);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidSpawn_Init () {
    gt_VoidSpawn = TriggerCreate("gt_VoidSpawn_Func");
    TriggerAddEventUnitRegion(gt_VoidSpawn, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raw Meat Hero Death
//--------------------------------------------------------------------------------------------------
bool gt_RawMeatHeroDeath_Func (bool testConds, bool runActions) {
    int auto38BF1915_ae;
    int auto38BF1915_ai;

    // Variable Declarations
    int lv_rawMeat;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38BF1915_ae = gv_rawMeatCounter[UnitGetOwner(EventUnit())];
    auto38BF1915_ai = 1;
    lv_rawMeat = 1;
    for ( ; ( (auto38BF1915_ai >= 0 && lv_rawMeat <= auto38BF1915_ae) || (auto38BF1915_ai <= 0 && lv_rawMeat >= auto38BF1915_ae) ) ; lv_rawMeat += auto38BF1915_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ItemMedkit", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.0)));
    }
    gv_rawMeatCounter[UnitGetOwner(EventUnit())] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RawMeatHeroDeath_Init () {
    gt_RawMeatHeroDeath = TriggerCreate("gt_RawMeatHeroDeath_Func");
    TriggerAddEventUnitDied(gt_RawMeatHeroDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raw Meat Carry
//--------------------------------------------------------------------------------------------------
bool gt_RawMeatCarry_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "ItemMedkit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "ItemMedkit") && (libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 1.5)) == true) && (gv_rawMeatCounter[UnitGetOwner(EventUnit())] < 8)) {
        UnitRemove(OrderGetTargetUnit(EventUnitOrder()));
        gv_rawMeatCounter[UnitGetOwner(EventUnit())] = (gv_rawMeatCounter[UnitGetOwner(EventUnit())] + 1);
        if ((UnitHasBehavior(EventUnit(), "RawMeatCounter0") == true)) {
            UnitBehaviorRemove(EventUnit(), "RawMeatCounter0", 1);
            UnitBehaviorAdd(EventUnit(), "RawMeatCounter1", EventUnit(), 1);
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "RawMeatCounter1") == true)) {
                UnitBehaviorRemove(EventUnit(), "RawMeatCounter1", 1);
                UnitBehaviorAdd(EventUnit(), "RawMeatCounter2", EventUnit(), 1);
            }
            else {
                if ((UnitHasBehavior(EventUnit(), "RawMeatCounter2") == true)) {
                    UnitBehaviorRemove(EventUnit(), "RawMeatCounter2", 1);
                    UnitBehaviorAdd(EventUnit(), "RawMeatCounter3", EventUnit(), 1);
                }
                else {
                    if ((UnitHasBehavior(EventUnit(), "RawMeatCounter3") == true)) {
                        UnitBehaviorRemove(EventUnit(), "RawMeatCounter3", 1);
                        UnitBehaviorAdd(EventUnit(), "RawMeatCounter4", EventUnit(), 1);
                    }
                    else {
                        if ((UnitHasBehavior(EventUnit(), "RawMeatCounter4") == true)) {
                            UnitBehaviorRemove(EventUnit(), "RawMeatCounter4", 1);
                            UnitBehaviorAdd(EventUnit(), "RawMeatCounter5", EventUnit(), 1);
                        }
                        else {
                            if ((UnitHasBehavior(EventUnit(), "RawMeatCounter5") == true)) {
                                UnitBehaviorRemove(EventUnit(), "RawMeatCounter5", 1);
                                UnitBehaviorAdd(EventUnit(), "RawMeatCounter6", EventUnit(), 1);
                            }
                            else {
                                if ((UnitHasBehavior(EventUnit(), "RawMeatCounter6") == true)) {
                                    UnitBehaviorRemove(EventUnit(), "RawMeatCounter6", 1);
                                    UnitBehaviorAdd(EventUnit(), "RawMeatCounter7", EventUnit(), 1);
                                }
                                else {
                                    if ((UnitHasBehavior(EventUnit(), "RawMeatCounter7") == true)) {
                                        UnitBehaviorRemove(EventUnit(), "RawMeatCounter7", 1);
                                        UnitBehaviorAdd(EventUnit(), "RawMeatCounter8", EventUnit(), 1);
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RawMeatCarry_Init () {
    gt_RawMeatCarry = TriggerCreate("gt_RawMeatCarry_Func");
    TriggerAddEventUnitOrder(gt_RawMeatCarry, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvest Raw Meat
//--------------------------------------------------------------------------------------------------
bool gt_HarvestRawMeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rawMeat;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_rawMeatCounter[EventPlayer()] != 8))) {
            return false;
        }

        if (!((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter8") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_hero[EventPlayer()]), 1.5), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ItemMedkit") && (UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter8") == false)) {
            UnitRemove(UnitGroupLoopCurrent());
            if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter0") == true)) {
                UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter0", 1);
                UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter1", gv_hero[EventPlayer()], 1);
                gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
            }
            else {
                if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter1") == true)) {
                    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter1", 1);
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter2", gv_hero[EventPlayer()], 1);
                    gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                }
                else {
                    if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter2") == true)) {
                        UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter2", 1);
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter3", gv_hero[EventPlayer()], 1);
                        gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                    }
                    else {
                        if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter3") == true)) {
                            UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter3", 1);
                            UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter4", gv_hero[EventPlayer()], 1);
                            gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                        }
                        else {
                            if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter4") == true)) {
                                UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter4", 1);
                                UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter5", gv_hero[EventPlayer()], 1);
                                gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                            }
                            else {
                                if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter5") == true)) {
                                    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter5", 1);
                                    UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter6", gv_hero[EventPlayer()], 1);
                                    gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                                }
                                else {
                                    if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter6") == true)) {
                                        UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter6", 1);
                                        UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter7", gv_hero[EventPlayer()], 1);
                                        gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                                    }
                                    else {
                                        if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter7") == true)) {
                                            UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter7", 1);
                                            UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter8", gv_hero[EventPlayer()], 1);
                                            gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] + 1);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvestRawMeat_Init () {
    gt_HarvestRawMeat = TriggerCreate("gt_HarvestRawMeat_Func");
    TriggerAddEventButtonPressed(gt_HarvestRawMeat, c_playerAny, "HarvestRawMeat");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Raw Meat
//--------------------------------------------------------------------------------------------------
bool gt_DropRawMeat_Func (bool testConds, bool runActions) {
    int auto6E09AA82_ae;
    int auto6E09AA82_ai;

    // Variable Declarations
    int lv_rawMeat;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter1", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter2", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter3", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter4", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter5", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter6", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter7", 1);
    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter8", 1);
    UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter0", gv_hero[EventPlayer()], 1);
    auto6E09AA82_ae = gv_rawMeatCounter[EventPlayer()];
    auto6E09AA82_ai = 1;
    lv_rawMeat = 1;
    for ( ; ( (auto6E09AA82_ai >= 0 && lv_rawMeat <= auto6E09AA82_ae) || (auto6E09AA82_ai <= 0 && lv_rawMeat >= auto6E09AA82_ae) ) ; lv_rawMeat += auto6E09AA82_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ItemMedkit", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_hero[EventPlayer()]), 1.0)));
    }
    gv_rawMeatCounter[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropRawMeat_Init () {
    gt_DropRawMeat = TriggerCreate("gt_DropRawMeat_Func");
    TriggerAddEventButtonPressed(gt_DropRawMeat, c_playerAny, "UnloadRawMeat");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Consume Raw Meat
//--------------------------------------------------------------------------------------------------
bool gt_ConsumeRawMeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter0") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSubtract, 1.0);
    gv_rawMeatCounter[EventPlayer()] = (gv_rawMeatCounter[EventPlayer()] - 1);
    UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeat", gv_hero[EventPlayer()], 1);
    if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter1") == true)) {
        UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter0", gv_hero[EventPlayer()], 1);
        UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter1", 1);
    }
    else {
        if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter2") == true)) {
            UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter1", gv_hero[EventPlayer()], 1);
            UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter2", 1);
        }
        else {
            if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter3") == true)) {
                UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter2", gv_hero[EventPlayer()], 1);
                UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter3", 1);
            }
            else {
                if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter4") == true)) {
                    UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter3", gv_hero[EventPlayer()], 1);
                    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter4", 1);
                }
                else {
                    if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter5") == true)) {
                        UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter4", gv_hero[EventPlayer()], 1);
                        UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter5", 1);
                    }
                    else {
                        if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter6") == true)) {
                            UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter5", gv_hero[EventPlayer()], 1);
                            UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter6", 1);
                        }
                        else {
                            if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter7") == true)) {
                                UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter6", gv_hero[EventPlayer()], 1);
                                UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter7", 1);
                            }
                            else {
                                if ((UnitHasBehavior(gv_hero[EventPlayer()], "RawMeatCounter8") == true)) {
                                    UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter7", gv_hero[EventPlayer()], 1);
                                    UnitBehaviorRemove(gv_hero[EventPlayer()], "RawMeatCounter8", 1);
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    if ((RandomInt(1, 100) <= 15)) {
        TextTagCreate((StringExternal("Param/Value/E41370EB") + StringExternal("Param/Value/4CD3C22D")), 28, UnitGetPosition(gv_hero[EventPlayer()]), 1.0, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        UnitBehaviorAdd(gv_hero[EventPlayer()], "Sickness", gv_hero[EventPlayer()], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConsumeRawMeat_Init () {
    gt_ConsumeRawMeat = TriggerCreate("gt_ConsumeRawMeat_Func");
    TriggerAddEventButtonPressed(gt_ConsumeRawMeat, c_playerAny, "ConsumeRawMeat");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trickster Death
//--------------------------------------------------------------------------------------------------
bool gt_TricksterDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rawMeat;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DarkTemplar"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ItemMedkit", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.25)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ItemMedkit", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.25)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ItemMedkit", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.25)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ItemMedkit", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.25)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bone", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.25)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TricksterDeath_Init () {
    gt_TricksterDeath = TriggerCreate("gt_TricksterDeath_Func");
    TriggerAddEventUnitDied(gt_TricksterDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corruption Item Scatter
//--------------------------------------------------------------------------------------------------
bool gt_CorruptionItemScatter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_itempoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionCircle(UnitGetPosition(EventUnit()), 0.4), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itempoint = RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5));
        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_itempoint, 0.18), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitSetPosition(UnitGroupLoopCurrent(), lv_itempoint, false);
        }
        else {
            while ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_itempoint, 0.18), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                lv_itempoint = RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5));
            }
            UnitSetPosition(UnitGroupLoopCurrent(), lv_itempoint, false);
        }
        lv_itempoint = null;
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CorruptedGroundDummy", 15, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorSetDuration(UnitGroupLoopCurrent(), "CorruptedGroundTimedLife", 5.0);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptionItemScatter_Init () {
    gt_CorruptionItemScatter = TriggerCreate("gt_CorruptionItemScatter_Func");
    TriggerAddEventUnitDied(gt_CorruptionItemScatter, UnitRefFromUnit(UnitFromId(5522)));
    TriggerAddEventUnitDied(gt_CorruptionItemScatter, UnitRefFromUnit(UnitFromId(5525)));
    TriggerAddEventUnitDied(gt_CorruptionItemScatter, UnitRefFromUnit(UnitFromId(5523)));
    TriggerAddEventUnitDied(gt_CorruptionItemScatter, UnitRefFromUnit(UnitFromId(5524)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrupted Ground
//--------------------------------------------------------------------------------------------------
bool gt_CorruptedGround_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[13] lv_list;
    int lv_count;
    int lv_start;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 7.5), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "DeadHero") == false) && ((UnitGroupLoopCurrent() == gv_hero[0]) || (UnitGroupLoopCurrent() == gv_hero[1]) || (UnitGroupLoopCurrent() == gv_hero[2]) || (UnitGroupLoopCurrent() == gv_hero[3]) || (UnitGroupLoopCurrent() == gv_hero[4]) || (UnitGroupLoopCurrent() == gv_hero[5]) || (UnitGroupLoopCurrent() == gv_hero[6]) || (UnitGroupLoopCurrent() == gv_hero[7]) || (UnitGroupLoopCurrent() == gv_hero[8]) || (UnitGroupLoopCurrent() == gv_hero[9]) || (UnitGroupLoopCurrent() == gv_hero[10]) || (UnitGroupLoopCurrent() == gv_hero[11]) || (UnitGroupLoopCurrent() == gv_hero[12]))) {
            lv_list[lv_count] = UnitGroupLoopCurrent();
            lv_count += 1;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_count > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CorruptedGroundDummy", 0, 15, UnitGetPosition(lv_list[RandomInt(0, (lv_count - 1))]));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptedGround_Init () {
    gt_CorruptedGround = TriggerCreate("gt_CorruptedGround_Func");
    TriggerAddEventUnitBehaviorChange(gt_CorruptedGround, null, "CorruptedGroundCast", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exp No. 1 Item Scatter
//--------------------------------------------------------------------------------------------------
bool gt_ExpNo1ItemScatter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_itempoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionCircle(UnitGetPosition(EventUnit()), 0.4), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itempoint = RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.1));
        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_itempoint, 0.15), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitSetPosition(UnitGroupLoopCurrent(), lv_itempoint, false);
        }
        else {
            while ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_itempoint, 0.15), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                lv_itempoint = RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.1));
            }
            UnitSetPosition(UnitGroupLoopCurrent(), lv_itempoint, false);
        }
        lv_itempoint = null;
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExpNo1ItemScatter_Init () {
    gt_ExpNo1ItemScatter = TriggerCreate("gt_ExpNo1ItemScatter_Func");
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(5959)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(5946)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(2712)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(5599)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(5865)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(5598)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(5948)));
    TriggerAddEventUnitDied(gt_ExpNo1ItemScatter, UnitRefFromUnit(UnitFromId(7505)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Area
//--------------------------------------------------------------------------------------------------
bool gt_DropPodArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[13] lv_list;
    int lv_count;
    int lv_start;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 7.5), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(UnitGroupLoopCurrent(), "DeadHero") == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) == false) && ((UnitGroupLoopCurrent() == gv_hero[0]) || (UnitGroupLoopCurrent() == gv_hero[1]) || (UnitGroupLoopCurrent() == gv_hero[2]) || (UnitGroupLoopCurrent() == gv_hero[3]) || (UnitGroupLoopCurrent() == gv_hero[4]) || (UnitGroupLoopCurrent() == gv_hero[5]) || (UnitGroupLoopCurrent() == gv_hero[6]) || (UnitGroupLoopCurrent() == gv_hero[7]) || (UnitGroupLoopCurrent() == gv_hero[8]) || (UnitGroupLoopCurrent() == gv_hero[9]) || (UnitGroupLoopCurrent() == gv_hero[10]) || (UnitGroupLoopCurrent() == gv_hero[11]) || (UnitGroupLoopCurrent() == gv_hero[12]))) {
            lv_list[lv_count] = UnitGroupLoopCurrent();
            lv_count += 1;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_count > 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[0]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[1]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[2]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[RandomInt(3, (lv_count - 1))]));
    }
    else {
        if ((lv_count == 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[0]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[1]));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[2]));
        }
        else {
            if ((lv_count == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[1]));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[0]));
            }
            else {
                if ((lv_count == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DropPodTargetDummy", 0, 15, UnitGetPosition(lv_list[0]));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodArea_Init () {
    gt_DropPodArea = TriggerCreate("gt_DropPodArea_Func");
    TriggerAddEventUnitBehaviorChange(gt_DropPodArea, null, "DropPodCast", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Spawn
//--------------------------------------------------------------------------------------------------
bool gt_DropPodSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZergDropPod", 0, 15, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodSpawn_Init () {
    gt_DropPodSpawn = TriggerCreate("gt_DropPodSpawn_Func");
    TriggerAddEventUnitBehaviorChange(gt_DropPodSpawn, null, "TriggerPodFall", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Pod Death
//--------------------------------------------------------------------------------------------------
bool gt_DropPodDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZergDropPod"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.5), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true)) {
            UnitDamage(EventUnit(), "TriggerDamageSpellNoGain", UnitGroupLoopCurrent(), 50.0);
        }

    }
    UnitGroupLoopEnd();
    UnitCreate(3, "ZerglingDropPod", 0, 15, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5)), libNtve_gf_RandomAngle());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropPodDeath_Init () {
    gt_DropPodDeath = TriggerCreate("gt_DropPodDeath_Func");
    TriggerAddEventUnitDied(gt_DropPodDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Poisoned
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskPoisoned_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(EventUnit(), EventUnitBehavior(), 15.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskPoisoned_Init () {
    gt_UltraliskPoisoned = TriggerCreate("gt_UltraliskPoisoned_Func");
    TriggerAddEventUnitBehaviorChange(gt_UltraliskPoisoned, UnitRefFromUnit(UnitFromId(36)), "ThrowPoisonSpear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_UltraliskPoisoned, UnitRefFromUnit(UnitFromId(36)), "ThrowRefinedPoisonSpear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_UltraliskPoisoned, UnitRefFromUnit(UnitFromId(36)), "ThrowUltraPoisonSpear", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Item Scatter
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskItemScatter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_itempoint;
    point lv_deathpoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deathpoint = UnitGetPosition(EventUnit());
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itempoint = RegionRandomPoint(RegionCircle(lv_deathpoint, 2.5));
        if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_itempoint, 0.25), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            UnitSetPosition(UnitGroupLoopCurrent(), lv_itempoint, false);
        }
        else {
            while ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_itempoint, 0.25), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                lv_itempoint = RegionRandomPoint(RegionCircle(lv_deathpoint, 2.5));
            }
            UnitSetPosition(UnitGroupLoopCurrent(), lv_itempoint, false);
        }
        lv_itempoint = null;
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskItemScatter_Init () {
    gt_UltraliskItemScatter = TriggerCreate("gt_UltraliskItemScatter_Func");
    TriggerAddEventUnitDied(gt_UltraliskItemScatter, UnitRefFromUnit(UnitFromId(36)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Reset Position
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskResetPosition_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(92))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskResetPosition_Init () {
    gt_UltraliskResetPosition = TriggerCreate("gt_UltraliskResetPosition_Func");
    TriggerAddEventUnitBehaviorChange(gt_UltraliskResetPosition, null, "OutofCombat", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Facing Reset
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskFacingReset_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "OutofCombat") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventUnit(), PointFromId(5872), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskFacingReset_Init () {
    gt_UltraliskFacingReset = TriggerCreate("gt_UltraliskFacingReset_Func");
    TriggerAddEventUnitRegion(gt_UltraliskFacingReset, UnitRefFromUnit(UnitFromId(36)), RegionFromId(92), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultralisk Facing Reset Kite
//--------------------------------------------------------------------------------------------------
bool gt_UltraliskFacingResetKite_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(92))), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(36), "Return", UnitFromId(36), 1);
    UnitBehaviorAdd(UnitFromId(36), "OutofCombat", UnitFromId(36), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraliskFacingResetKite_Init () {
    gt_UltraliskFacingResetKite = TriggerCreate("gt_UltraliskFacingResetKite_Func");
    TriggerAddEventUnitRegion(gt_UltraliskFacingResetKite, UnitRefFromUnit(UnitFromId(36)), RegionFromId(120), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Melee Response
//--------------------------------------------------------------------------------------------------
bool gt_BoneMeleeResponse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "IsBoneArmor") == true)) {
            UnitDamage(UnitGroupLoopCurrent(), "TriggerDamageMeleeNoGain", UnitGroupLoopCurrent(), 1.0);
            gv_bonecarrier[UnitGetOwner(EventUnit())] = gv_hero[UnitGetOwner(EventUnit())];
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneMeleeResponse_Init () {
    gt_BoneMeleeResponse = TriggerCreate("gt_BoneMeleeResponse_Func");
    TriggerAddEventUnitDamaged(gt_BoneMeleeResponse, null, c_unitDamageTypeMelee, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Range Response
//--------------------------------------------------------------------------------------------------
bool gt_BoneRangeResponse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "IsBoneArmor") == true)) {
            UnitDamage(UnitGroupLoopCurrent(), "TriggerDamageMeleeNoGain", UnitGroupLoopCurrent(), 1.0);
            gv_bonecarrier[UnitGetOwner(EventUnit())] = gv_hero[UnitGetOwner(EventUnit())];
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneRangeResponse_Init () {
    gt_BoneRangeResponse = TriggerCreate("gt_BoneRangeResponse_Func");
    TriggerAddEventUnitDamaged(gt_BoneRangeResponse, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Armor
//--------------------------------------------------------------------------------------------------
bool gt_BoneArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringunittype;
    int lv_owningunit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "IsBoneArmor") == true))) {
            return false;
        }

        if (!((UnitInventoryUnit(EventUnit()) != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringunittype = UnitGetType(EventUnit());
    lv_owningunit = UnitGetOwner(UnitInventoryUnit(EventUnit()));
    gv_bonecarrier[lv_owningunit] = gv_hero[lv_owningunit];
    UnitKill(EventUnit());
    Wait(gv_craftingTime, c_timeGame);
    if ((lv_triggeringunittype == "BoneShield")) {
        UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "Shield");
    }
    else {
        if ((lv_triggeringunittype == "BoneGlovesKarak")) {
            UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "KarakSkinGloves");
        }
        else {
            if ((lv_triggeringunittype == "BoneCoatKarak")) {
                UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "KarakSkinCoat");
            }
            else {
                if ((lv_triggeringunittype == "BoneBootsKarak")) {
                    UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "KarakSkinBoots");
                }
                else {
                    if ((lv_triggeringunittype == "BoneGlovesLyote")) {
                        UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "LyoteSkinGloves");
                    }
                    else {
                        if ((lv_triggeringunittype == "BoneCoatLyote")) {
                            UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "LyoteSkinCoat");
                        }
                        else {
                            if ((lv_triggeringunittype == "BoneBootsLyote")) {
                                UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "LyoteSkinBoots");
                            }
                            else {
                                if ((lv_triggeringunittype == "BoneBootsQuilgor")) {
                                    UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "QuilgorSkinBoots");
                                }
                                else {
                                    if ((lv_triggeringunittype == "BoneCoatQuilgor")) {
                                        UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "QuilgorSkinCoat");
                                    }
                                    else {
                                        if ((lv_triggeringunittype == "BoneGlovesQuilgor")) {
                                            UnitInventoryCreate(gv_bonecarrier[lv_owningunit], "QuilgorSkinGloves");
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    SoundPlayOnUnit(SoundLink("ItemShatter", -1), PlayerGroupAll(), gv_bonecarrier[lv_owningunit], 0.0, 100.0, 0.0);
    TextTagCreate(StringExternal("Param/Value/1452B15F"), 28, UnitGetPosition(gv_bonecarrier[lv_owningunit]), 1.5, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneArmor_Init () {
    gt_BoneArmor = TriggerCreate("gt_BoneArmor_Func");
    TriggerAddEventUnitBehaviorChange(gt_BoneArmor, null, "BoneShieldShatter2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Throw Spear/Rock Animate
//--------------------------------------------------------------------------------------------------
bool gt_ThrowSpearRockAnimate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "Rock") || (UnitGetType(EventUnitInventoryItem()) == "Spear") || (UnitGetType(EventUnitInventoryItem()) == "PoisonSpear") || (UnitGetType(EventUnitInventoryItem()) == "UltraPoisonSpear") || (UnitGetType(EventUnitInventoryItem()) == "RefinedPoisonSpear")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), "Spell", "Attack", 0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThrowSpearRockAnimate_Init () {
    gt_ThrowSpearRockAnimate = TriggerCreate("gt_ThrowSpearRockAnimate_Func");
    TriggerAddEventUnitInventoryChange(gt_ThrowSpearRockAnimate, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karak Hide Scrap
//--------------------------------------------------------------------------------------------------
bool gt_KarakHideScrap_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "KarakHideScrap"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventUnit(), "KarakHide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarakHideScrap_Init () {
    gt_KarakHideScrap = TriggerCreate("gt_KarakHideScrap_Func");
    TriggerAddEventUnitInventoryChange(gt_KarakHideScrap, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cooked Meat
//--------------------------------------------------------------------------------------------------
bool gt_CookedMeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "CookedMeat"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyFixed(EventPlayer(), c_playerPropTerrazine) >= 2.0)) {
        PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSubtract, 2.0);
    }
    else {
        PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSubtract, 1.0);
    }
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 90.0)) {
        UnitBehaviorAdd(EventUnit(), "WellFed", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CookedMeat_Init () {
    gt_CookedMeat = TriggerCreate("gt_CookedMeat_Func");
    TriggerAddEventUnitInventoryChange(gt_CookedMeat, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Diseased Meat
//--------------------------------------------------------------------------------------------------
bool gt_DiseasedMeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "DiseasedMeat"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSubtract, 1.0);
    if ((RandomInt(1, 100) <= 25)) {
        TextTagCreate((StringExternal("Param/Value/D51B7D50") + StringExternal("Param/Value/97C22868")), 28, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
        UnitBehaviorAdd(EventUnit(), "Sickness", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiseasedMeat_Init () {
    gt_DiseasedMeat = TriggerCreate("gt_DiseasedMeat_Func");
    TriggerAddEventUnitInventoryChange(gt_DiseasedMeat, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Emberthorn
//--------------------------------------------------------------------------------------------------
bool gt_Emberthorn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Emberthorn"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/C689E672"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
    TextTagSetGravity(TextTagLastCreated(), 0.4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Emberthorn_Init () {
    gt_Emberthorn = TriggerCreate("gt_Emberthorn_Func");
    TriggerAddEventUnitInventoryChange(gt_Emberthorn, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Potions
//--------------------------------------------------------------------------------------------------
bool gt_Potions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vALUE;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "EnergyStimulantI") || (UnitGetType(EventUnitInventoryItem()) == "EnergyStimulantII") || (UnitGetType(EventUnitInventoryItem()) == "EnergyStimulantIII") || (UnitGetType(EventUnitInventoryItem()) == "HealingStimulantI") || (UnitGetType(EventUnitInventoryItem()) == "HealingStimulantII") || (UnitGetType(EventUnitInventoryItem()) == "HealingStimulantIII") || (UnitGetType(EventUnitInventoryItem()) == "PotionofKnowledge") || (UnitGetType(EventUnitInventoryItem()) == "CureAll") || (UnitGetType(EventUnitInventoryItem()) == "ButsuItem")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitInventoryItem()) == "EnergyStimulantI")) {
        lv_vALUE = StringExternal("Param/Value/DBEB1B52");
    }
    else {
        if ((UnitGetType(EventUnitInventoryItem()) == "EnergyStimulantII")) {
            lv_vALUE = StringExternal("Param/Value/DAD2AEA2");
        }
        else {
            if ((UnitGetType(EventUnitInventoryItem()) == "EnergyStimulantIII")) {
                lv_vALUE = StringExternal("Param/Value/5191D86C");
            }
            else {
                if ((UnitGetType(EventUnitInventoryItem()) == "HealingStimulantI")) {
                    lv_vALUE = StringExternal("Param/Value/34BAA4A0");
                }
                else {
                    if ((UnitGetType(EventUnitInventoryItem()) == "HealingStimulantII")) {
                        lv_vALUE = StringExternal("Param/Value/BC667FF4");
                    }
                    else {
                        if ((UnitGetType(EventUnitInventoryItem()) == "HealingStimulantIII")) {
                            lv_vALUE = StringExternal("Param/Value/67C5671C");
                        }
                        else {
                            if ((UnitGetType(EventUnitInventoryItem()) == "PotionofKnowledge")) {
                                lv_vALUE = StringExternal("Param/Value/1DA3FAC8");
                            }
                            else {
                                if ((UnitGetType(EventUnitInventoryItem()) == "CureAll")) {
                                    lv_vALUE = StringExternal("Param/Value/787C0697");
                                }
                                else {
                                    if ((UnitGetType(EventUnitInventoryItem()) == "ButsuItem")) {
                                        PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSubtract, 1.0);
                                        lv_vALUE = StringExternal("Param/Value/6ECFE07D");
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    TextTagCreate(lv_vALUE, 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
    TextTagSetGravity(TextTagLastCreated(), 0.4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Potions_Init () {
    gt_Potions = TriggerCreate("gt_Potions_Func");
    TriggerAddEventUnitInventoryChange(gt_Potions, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutaling Egg
//--------------------------------------------------------------------------------------------------
bool gt_MutalingEgg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vALUE;
    int lv_chance;

    // Variable Initialization
    lv_chance = 5;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "MutalingEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vALUE = StringExternal("Param/Value/B10E7EA5");
    if ((UnitGetType(EventUnit()) == "PreserverC")) {
        lv_chance = 15;
    }
    else {
        if ((UnitGetType(EventUnit()) == "Stalker")) {
            lv_chance = 20;
        }

    }
    if ((RandomInt(0, 100) <= lv_chance)) {
        UnitCreate(1, "Mutaling", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5)), libNtve_gf_RandomAngle());
        SoundPlayOnUnit(SoundLink("Mutalisk_Attack", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + 25.0));
        TextTagCreate(lv_vALUE, 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
        TextTagSetGravity(TextTagLastCreated(), 0.4);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutalingEgg_Init () {
    gt_MutalingEgg = TriggerCreate("gt_MutalingEgg_Func");
    TriggerAddEventUnitInventoryChange(gt_MutalingEgg, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Spawn Scatter
//--------------------------------------------------------------------------------------------------
bool gt_ItemSpawnScatter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(36)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5524)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5523)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5522)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5525)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(7505)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5948)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5598)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5865)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5599)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(2712)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5946)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(5959)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 0, RegionCircle(UnitGetPosition(EventUnit()), 0.4), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.85)), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ItemMedkit", 0, RegionCircle(UnitGetPosition(EventUnit()), 0.4), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.85)), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bloodsoul", 0, RegionCircle(UnitGetPosition(EventUnit()), 0.4), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.85)), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemSpawnScatter_Init () {
    gt_ItemSpawnScatter = TriggerCreate("gt_ItemSpawnScatter_Func");
    TriggerAddEventUnitDied(gt_ItemSpawnScatter, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bloodsoul
//--------------------------------------------------------------------------------------------------
bool gt_Bloodsoul_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(EventUnitOrder()) == AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "Bloodsoul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(OrderGetTargetUnit(EventUnitOrder())) == "Bloodsoul") && (libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 1.5)) == true)) {
        UnitRemove(OrderGetTargetUnit(EventUnitOrder()));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropCustom, c_playerPropOperAdd, 1);
        TextTagCreate(StringExternal("Param/Value/607D6C6B"), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        ActorCreate(ActorScopeFromUnit(EventUnit()), "LevelUpVisual2", null, null, null);
        libNtve_gf_CreateActorAtPoint("EmpowerSound", UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Bloodsoul_Init () {
    gt_Bloodsoul = TriggerCreate("gt_Bloodsoul_Func");
    TriggerAddEventUnitOrder(gt_Bloodsoul, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shard of Corruption
//--------------------------------------------------------------------------------------------------
bool gt_ShardofCorruption_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "BladeOfDarkness1") || (UnitGetType(EventUnit()) == "BladeOfDarkness2") || (UnitGetType(EventUnit()) == "BladeOfDarkness3") || (UnitGetType(EventUnit()) == "BladeOfDarkness") || (UnitGetType(EventUnit()) == "BootsOfTheTraveler1") || (UnitGetType(EventUnit()) == "BootsOfTheTraveler2") || (UnitGetType(EventUnit()) == "BootsOfTheTraveler3") || (UnitGetType(EventUnit()) == "BootsOfTheTraveler") || (UnitGetType(EventUnit()) == "ChaoticGauntlets1") || (UnitGetType(EventUnit()) == "ChaoticGauntlets2") || (UnitGetType(EventUnit()) == "ChaoticGauntlets3") || (UnitGetType(EventUnit()) == "ChaoticGauntlets") || (UnitGetType(EventUnit()) == "ClawsofAnguish1") || (UnitGetType(EventUnit()) == "ClawsofAnguish2") || (UnitGetType(EventUnit()) == "ClawsofAnguish3") || (UnitGetType(EventUnit()) == "ClawsOfAnguish") || (UnitGetType(EventUnit()) == "DeathsEmbrace1") || (UnitGetType(EventUnit()) == "DeathsEmbrace2") || (UnitGetType(EventUnit()) == "DeathsEmbrace3") || (UnitGetType(EventUnit()) == "DeathsEmbrace") || (UnitGetType(EventUnit()) == "ShadowsStep1") || (UnitGetType(EventUnit()) == "ShadowsStep2") || (UnitGetType(EventUnit()) == "ShadowsStep3") || (UnitGetType(EventUnit()) == "ShadowsStep") || (UnitGetType(EventUnit()) == "VoidDagger1") || (UnitGetType(EventUnit()) == "VoidDagger2") || (UnitGetType(EventUnit()) == "VoidDagger3") || (UnitGetType(EventUnit()) == "VoidDagger") || (UnitGetType(EventUnit()) == "ArmoroftheGods1") || (UnitGetType(EventUnit()) == "ArmoroftheGods2") || (UnitGetType(EventUnit()) == "ArmoroftheGods3") || (UnitGetType(EventUnit()) == "ArmoroftheGods") || (UnitGetType(EventUnit()) == "cvalFF0000BagofHorrorsc") || (UnitGetType(EventUnit()) == "cvalFF0000BagofHorrors1c") || (UnitGetType(EventUnit()) == "cvalFF0000BagofHorrors2c") || (UnitGetType(EventUnit()) == "cvalFF0000BagofHorrors3c") || (UnitGetType(EventUnit()) == "cvalFF0000WarlordsSatchelc") || (UnitGetType(EventUnit()) == "cvalFF0000WarlordsSatchel1c") || (UnitGetType(EventUnit()) == "cvalFF0000WarlordsSatchel2c") || (UnitGetType(EventUnit()) == "cvalFF0000WarlordsSatchel3c")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "ShardofCorruption", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardofCorruption_Init () {
    gt_ShardofCorruption = TriggerCreate("gt_ShardofCorruption_Func");
    TriggerAddEventUnitDied(gt_ShardofCorruption, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dark Shadow Beast Death
//--------------------------------------------------------------------------------------------------
bool gt_DarkShadowBeastDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "Lyote") || (UnitGetType(EventUnit()) == "SpaceCowSmall"))) {
        libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
        if ((RandomInt(0, 100) <= 25)) {
            libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
        }

    }
    else {
        if (((UnitGetType(EventUnit()) == "Predator"))) {
            libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
            libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
            if ((RandomInt(0, 100) <= 50)) {
                libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
            }

            if ((RandomInt(0, 100) <= 25)) {
                libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
            }

        }
        else {
            if (((UnitGetType(EventUnit()) == "InfestedTerran"))) {
                libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
                libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
                libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
                if ((RandomInt(0, 100) <= 50)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
                }

                if ((RandomInt(0, 100) <= 25)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
                }

                if ((RandomInt(0, 100) <= 10)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
                }

            }

        }
    }
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarkShadowBeastDeath_Init () {
    gt_DarkShadowBeastDeath = TriggerCreate("gt_DarkShadowBeastDeath_Func");
    TriggerAddEventUnitBehaviorChange(gt_DarkShadowBeastDeath, null, "ShadowConjurationDie", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gather Herbs
//--------------------------------------------------------------------------------------------------
bool gt_GatherHerbs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herb;
    unit lv_gatheringhero;
    int lv_totalinventoryslots;
    int lv_itemcount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gatheringhero = gv_hero[EventPlayer()];
    if (((UnitAbilityExists(lv_gatheringhero, "TestInventory222") == true) || (UnitAbilityExists(lv_gatheringhero, "Inventory3Warrior") == true))) {
        lv_totalinventoryslots = 3;
    }
    else {
        if (((UnitAbilityExists(lv_gatheringhero, "TestInventory22") == true) || (UnitAbilityExists(lv_gatheringhero, "Inventory4Warrior") == true))) {
            lv_totalinventoryslots = 4;
        }
        else {
            if ((UnitAbilityExists(lv_gatheringhero, "TestInventory2") == true)) {
                lv_totalinventoryslots = 5;
            }
            else {
                if ((UnitAbilityExists(lv_gatheringhero, "TestInventory") == true)) {
                    lv_totalinventoryslots = 6;
                }

            }
        }
    }
    if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel") == true) || (UnitHasBehavior2(lv_gatheringhero, "MultiDimensionalPouch") == true))) {
        lv_totalinventoryslots += 4;
    }
    else {
        if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel1") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors1") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors2") == true) || (UnitHasBehavior2(lv_gatheringhero, "BagofHorrors3") == true))) {
            lv_totalinventoryslots += 5;
        }
        else {
            if (((UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel2") == true) || (UnitHasBehavior2(lv_gatheringhero, "WarlordsSatchel3") == true))) {
                lv_totalinventoryslots += 6;
            }

        }
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_gatheringhero), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Butsu") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernoRoot") || (UnitGetType(UnitGroupLoopCurrent()) == "Mushroom") || (UnitGetType(UnitGroupLoopCurrent()) == "OceansBreathe") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThorn") || (UnitGetType(UnitGroupLoopCurrent()) == "StormLeaf") || (UnitGetType(UnitGroupLoopCurrent()) == "ThistleBush") || (UnitGetType(UnitGroupLoopCurrent()) == "Aquee"))) {
            lv_herb = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(lv_gatheringhero));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_itemcount += 1;
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(lv_herb));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_itemcount < lv_totalinventoryslots) && ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernoRootItem") || (UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem") || (UnitGetType(UnitGroupLoopCurrent()) == "OceansBreatheItem") || (UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") || (UnitGetType(UnitGroupLoopCurrent()) == "RiverStem") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThornItem") || (UnitGetType(UnitGroupLoopCurrent()) == "StormLeafItem") || (UnitGetType(UnitGroupLoopCurrent()) == "Thistle"))) {
            UnitRemove(UnitGroupLoopCurrent());
            UnitInventoryCreate(lv_gatheringhero, UnitGetType(UnitGroupLoopCurrent()));
            lv_itemcount += 1;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatherHerbs_Init () {
    gt_GatherHerbs = TriggerCreate("gt_GatherHerbs_Func");
    TriggerAddEventButtonPressed(gt_GatherHerbs, c_playerAny, "GatherHerbs");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pawn Item
//--------------------------------------------------------------------------------------------------
bool gt_PawnItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackcount;
    int lv_itemsmaxcharge;
    string lv_chargelink;
    int lv_pawnvalue;

    // Variable Initialization
    lv_chargelink = "";

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItemTargetUnit()) == "TerranBattleCruiser") || (UnitGetType(EventUnitInventoryItemTargetUnit()) == "ProtossTransportShip") || (UnitGetType(EventUnitInventoryItemTargetUnit()) == "Carrier") || (UnitGetType(EventUnitInventoryItemTargetUnit()) == "TerranRaven") || (UnitGetType(EventUnitInventoryItemTargetUnit()) == "TerranSupplyShip") || (UnitGetType(EventUnitInventoryItemTargetUnit()) == "TerranTransportShip")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 0)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/1ED56DCB"));
        SoundPlayForPlayer(SoundLink("PawnSound2", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        UnitRemove(EventUnitInventoryItem());
        UnitInventoryCreate(EventUnit(), UnitGetType(EventUnitInventoryItem()));
    }
    else {
        if ((UnitHasBehavior2(EventUnitInventoryItem(), "Unpawnable") == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/F5F24086"));
            SoundPlayForPlayer(SoundLink("PawnSound2", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
            UnitRemove(EventUnitInventoryItem());
            UnitInventoryCreate(EventUnit(), UnitGetType(EventUnitInventoryItem()));
        }
        else {
            if ((UnitHasBehavior2(EventUnitInventoryItem(), "StackableItem") == true)) {
                lv_pawnvalue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitInventoryItem()), "CostResource[" + IntToString(0) + "]", c_playerAny);
                lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.Link", c_playerAny);
                lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.CountMax", c_playerAny));
                lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(EventUnitInventoryItem(), lv_chargelink)));
                lv_pawnvalue = (lv_pawnvalue / lv_itemsmaxcharge);
                lv_pawnvalue = (lv_pawnvalue * lv_stackcount);
                SoundPlayForPlayer(SoundLink("PawnSound", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                TextTagCreate((StringExternal("Param/Value/E01D5085") + IntToText(lv_pawnvalue)), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
                TextTagSetGravity(TextTagLastCreated(), 0.4);
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(75.29, 68.63, 7.06));
                PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, lv_pawnvalue);
                UnitRemove(EventUnitInventoryItem());
            }
            else {
                lv_pawnvalue = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitInventoryItem()), "CostResource[" + IntToString(0) + "]", c_playerAny);
                SoundPlayForPlayer(SoundLink("PawnSound", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                TextTagCreate((StringExternal("Param/Value/95486903") + IntToText(lv_pawnvalue)), 28, UnitGetPosition(EventUnit()), 2.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeDuration, 2.5);
                TextTagSetGravity(TextTagLastCreated(), 0.4);
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(75.29, 68.63, 7.06));
                PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitInventoryItem()), "CostResource[" + IntToString(0) + "]", c_playerAny));
                UnitRemove(EventUnitInventoryItem());
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PawnItem_Init () {
    gt_PawnItem = TriggerCreate("gt_PawnItem_Func");
    TriggerAddEventUnitInventoryChange(gt_PawnItem, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Target Structure Inventory Full
//--------------------------------------------------------------------------------------------------
bool gt_TargetStructureInventoryFull_Func (bool testConds, bool runActions) {
    int auto01A908C0_ae;
    int auto01A908C0_ai;

    // Variable Declarations
    bool lv_transferred;
    int lv_stackcount;
    int lv_counter;
    int lv_itemsmaxcharge;
    string lv_chargelink;

    // Variable Initialization
    lv_counter = 1;
    lv_chargelink = "";

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItemTargetUnit()) != "TerranBattleCruiser"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItemTargetUnit()) != "ProtossTransportShip"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItemTargetUnit()) != "Carrier"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItemTargetUnit()) != "TerranRaven"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItemTargetUnit()) != "TerranSupplyShip"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItemTargetUnit()) != "TerranTransportShip"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnitInventoryItemTargetUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() == EventUnitInventoryItem())) {
            lv_transferred = true;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_transferred == false)) {
        if ((UnitHasBehavior2(EventUnitInventoryItem(), "StackableItem") == true)) {
            lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.Link", c_playerAny);
            lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.CountMax", c_playerAny));
            lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(EventUnitInventoryItem(), lv_chargelink)));
            UnitRemove(EventUnitInventoryItem());
            auto01A908C0_ae = lv_stackcount;
            auto01A908C0_ai = 1;
            lv_counter = 1;
            for ( ; ( (auto01A908C0_ai >= 0 && lv_counter <= auto01A908C0_ae) || (auto01A908C0_ai <= 0 && lv_counter >= auto01A908C0_ae) ) ; lv_counter += auto01A908C0_ai ) {
                UnitInventoryCreate(EventUnit(), UnitGetType(EventUnitInventoryItem()));
            }
        }
        else {
            UnitRemove(EventUnitInventoryItem());
            UnitInventoryCreate(EventUnit(), UnitGetType(EventUnitInventoryItem()));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TargetStructureInventoryFull_Init () {
    gt_TargetStructureInventoryFull = TriggerCreate("gt_TargetStructureInventoryFull_Func");
    TriggerAddEventUnitInventoryChange(gt_TargetStructureInventoryFull, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pouch Movement
//--------------------------------------------------------------------------------------------------
bool gt_PouchMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hasPouch;
    int lv_container;
    int lv_pouchContainerPosition;
    int lv_pouchSlot;
    int lv_slot;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "MultiDimensionalSatchel") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrorsc") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors1c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors2c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors3c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchelc") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel1c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel2c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel3c"))) {
            lv_hasPouch = true;
            lv_pouchContainerPosition = UnitInventoryContainer(UnitGroupLoopCurrent());
            lv_pouchSlot = UnitInventorySlot(EventUnitInventoryItem());
        }

    }
    UnitGroupLoopEnd();
    if ((lv_hasPouch == true) && ((UnitGetType(EventUnitInventoryItem()) != "MultiDimensionalSatchel") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000BagofHorrorsc") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000BagofHorrors1c") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000BagofHorrors2c") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000BagofHorrors3c") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000WarlordsSatchelc") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000WarlordsSatchel1c") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000WarlordsSatchel2c") || (UnitGetType(EventUnitInventoryItem()) != "cvalFF0000WarlordsSatchel3c"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() == EventUnitInventoryItem())) {
                lv_container = UnitInventoryContainer(UnitGroupLoopCurrent());
                lv_slot = UnitInventorySlot(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((lv_container == lv_pouchContainerPosition)) {
            if ((EventUnitInventoryItemContainer() != lv_pouchContainerPosition)) {
                UnitInventoryMove(EventUnitInventoryItem(), EventUnitInventoryItemContainer(), EventUnitInventoryItemSlot());
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PouchMovement_Init () {
    gt_PouchMovement = TriggerCreate("gt_PouchMovement_Func");
    TriggerAddEventUnitInventoryChange(gt_PouchMovement, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Limitations
//--------------------------------------------------------------------------------------------------
bool gt_ItemLimitations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_manipulatedItem1;
    unit lv_manipulatedItem2;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitInventoryItem()) == "KarakSkinBoots") || (UnitGetType(EventUnitInventoryItem()) == "LyoteSkinBoots") || (UnitGetType(EventUnitInventoryItem()) == "QuilgorSkinBoots") || (UnitGetType(EventUnitInventoryItem()) == "BaneBoots") || (UnitGetType(EventUnitInventoryItem()) == "BoneBootsKarak") || (UnitGetType(EventUnitInventoryItem()) == "AiurBoots") || (UnitGetType(EventUnitInventoryItem()) == "KarakSkinGloves") || (UnitGetType(EventUnitInventoryItem()) == "LyoteSkinGloves") || (UnitGetType(EventUnitInventoryItem()) == "QuilgorSkinGloves") || (UnitGetType(EventUnitInventoryItem()) == "BaneGloves") || (UnitGetType(EventUnitInventoryItem()) == "BoneGlovesKarak") || (UnitGetType(EventUnitInventoryItem()) == "AiurGloves") || (UnitGetType(EventUnitInventoryItem()) == "KarakSkinCoat") || (UnitGetType(EventUnitInventoryItem()) == "LyoteSkinCoat") || (UnitGetType(EventUnitInventoryItem()) == "QuilgorSkinCoat") || (UnitGetType(EventUnitInventoryItem()) == "BaneArmor") || (UnitGetType(EventUnitInventoryItem()) == "BoneCoatKarak") || (UnitGetType(EventUnitInventoryItem()) == "AiurArmor") || (UnitGetType(EventUnitInventoryItem()) == "Shield") || (UnitGetType(EventUnitInventoryItem()) == "BoneShield") || (UnitGetType(EventUnitInventoryItem()) == "BaneShield") || (UnitGetType(EventUnitInventoryItem()) == "AiurShield") || (UnitGetType(EventUnitInventoryItem()) == "DustyBlade") || (UnitGetType(EventUnitInventoryItem()) == "StoneBlade") || (UnitGetType(EventUnitInventoryItem()) == "BaneBlade") || (UnitGetType(EventUnitInventoryItem()) == "AiurBlade") || (UnitGetType(EventUnitInventoryItem()) == "StormBlade") || (UnitGetType(EventUnitInventoryItem()) == "PhaseCoat") || (UnitGetType(EventUnitInventoryItem()) == "GlovesofInsanity") || (UnitGetType(EventUnitInventoryItem()) == "HydroBoots") || (UnitGetType(EventUnitInventoryItem()) == "ShieldoftheVoid") || (UnitGetType(EventUnitInventoryItem()) == "ClawsofAnguish1") || (UnitGetType(EventUnitInventoryItem()) == "ClawsofAnguish2") || (UnitGetType(EventUnitInventoryItem()) == "ClawsofAnguish3") || (UnitGetType(EventUnitInventoryItem()) == "ClawsOfAnguish") || (UnitGetType(EventUnitInventoryItem()) == "DeathsEmbrace1") || (UnitGetType(EventUnitInventoryItem()) == "DeathsEmbrace2") || (UnitGetType(EventUnitInventoryItem()) == "DeathsEmbrace3") || (UnitGetType(EventUnitInventoryItem()) == "DeathsEmbrace") || (UnitGetType(EventUnitInventoryItem()) == "ShadowsStep1") || (UnitGetType(EventUnitInventoryItem()) == "ShadowsStep2") || (UnitGetType(EventUnitInventoryItem()) == "ShadowsStep3") || (UnitGetType(EventUnitInventoryItem()) == "ShadowsStep") || (UnitGetType(EventUnitInventoryItem()) == "VoidDagger1") || (UnitGetType(EventUnitInventoryItem()) == "VoidDagger2") || (UnitGetType(EventUnitInventoryItem()) == "VoidDagger3") || (UnitGetType(EventUnitInventoryItem()) == "VoidDagger") || (UnitGetType(EventUnitInventoryItem()) == "BladeOfDarkness") || (UnitGetType(EventUnitInventoryItem()) == "BladeOfDarkness3") || (UnitGetType(EventUnitInventoryItem()) == "BladeOfDarkness2") || (UnitGetType(EventUnitInventoryItem()) == "BladeOfDarkness1") || (UnitGetType(EventUnitInventoryItem()) == "ArmoroftheGods") || (UnitGetType(EventUnitInventoryItem()) == "ArmoroftheGods3") || (UnitGetType(EventUnitInventoryItem()) == "ArmoroftheGods2") || (UnitGetType(EventUnitInventoryItem()) == "ArmoroftheGods1") || (UnitGetType(EventUnitInventoryItem()) == "BootsOfTheTraveler") || (UnitGetType(EventUnitInventoryItem()) == "BootsOfTheTraveler3") || (UnitGetType(EventUnitInventoryItem()) == "BootsOfTheTraveler2") || (UnitGetType(EventUnitInventoryItem()) == "BootsOfTheTraveler1") || (UnitGetType(EventUnitInventoryItem()) == "ChaoticGauntlets1") || (UnitGetType(EventUnitInventoryItem()) == "ChaoticGauntlets2") || (UnitGetType(EventUnitInventoryItem()) == "ChaoticGauntlets3") || (UnitGetType(EventUnitInventoryItem()) == "ChaoticGauntlets") || (UnitGetType(EventUnitInventoryItem()) == "MultiDimensionalSatchel") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000BagofHorrorsc") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000BagofHorrors1c") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000BagofHorrors2c") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000BagofHorrors3c") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000WarlordsSatchelc") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000WarlordsSatchel1c") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000WarlordsSatchel2c") || (UnitGetType(EventUnitInventoryItem()) == "cvalFF0000WarlordsSatchel3c") || (UnitGetType(EventUnitInventoryItem()) == "SeersDagger") || (UnitGetType(EventUnitInventoryItem()) == "SeersBaneDagger") || (UnitGetType(EventUnitInventoryItem()) == "SeersAiurDagger") || (UnitGetType(EventUnitInventoryItem()) == "cval0080FFHerosSkull1c") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull2") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull3") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull4") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull5") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull6") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull7") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull8") || (UnitGetType(EventUnitInventoryItem()) == "OutcastsDagger") || (UnitGetType(EventUnitInventoryItem()) == "GuardiansArmor") || (UnitGetType(EventUnitInventoryItem()) == "StaffOfTheEternalFlame") || (UnitGetType(EventUnitInventoryItem()) == "BoneBootsLyote") || (UnitGetType(EventUnitInventoryItem()) == "BoneGlovesLyote") || (UnitGetType(EventUnitInventoryItem()) == "BoneCoatLyote") || (UnitGetType(EventUnitInventoryItem()) == "BoneBootsQuilgor") || (UnitGetType(EventUnitInventoryItem()) == "BoneGlovesQuilgor") || (UnitGetType(EventUnitInventoryItem()) == "BoneCoatQuilgor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_manipulatedItem1 = EventUnitInventoryItem();
    if (((UnitGetType(lv_manipulatedItem1) == "KarakSkinBoots") || (UnitGetType(lv_manipulatedItem1) == "LyoteSkinBoots") || (UnitGetType(lv_manipulatedItem1) == "QuilgorSkinBoots") || (UnitGetType(lv_manipulatedItem1) == "BoneBootsKarak") || (UnitGetType(lv_manipulatedItem1) == "BaneBoots") || (UnitGetType(lv_manipulatedItem1) == "AiurBoots") || (UnitGetType(lv_manipulatedItem1) == "HydroBoots") || (UnitGetType(lv_manipulatedItem1) == "BootsOfTheTraveler1") || (UnitGetType(lv_manipulatedItem1) == "BootsOfTheTraveler2") || (UnitGetType(lv_manipulatedItem1) == "BootsOfTheTraveler3") || (UnitGetType(lv_manipulatedItem1) == "BootsOfTheTraveler") || (UnitGetType(lv_manipulatedItem1) == "ShadowsStep1") || (UnitGetType(lv_manipulatedItem1) == "ShadowsStep2") || (UnitGetType(lv_manipulatedItem1) == "ShadowsStep3") || (UnitGetType(lv_manipulatedItem1) == "ShadowsStep") || (UnitGetType(lv_manipulatedItem1) == "BoneBootsLyote") || (UnitGetType(lv_manipulatedItem1) == "BoneBootsQuilgor"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "HydroBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "BootsOfTheTraveler1") || (UnitGetType(UnitGroupLoopCurrent()) == "BootsOfTheTraveler2") || (UnitGetType(UnitGroupLoopCurrent()) == "BootsOfTheTraveler3") || (UnitGetType(UnitGroupLoopCurrent()) == "BootsOfTheTraveler") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsStep1") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsStep2") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsStep3") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsStep") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsQuilgor"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/62673B27"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "MultiDimensionalSatchel") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000BagofHorrorsc") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000BagofHorrors1c") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000BagofHorrors2c") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000BagofHorrors3c") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000WarlordsSatchelc") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000WarlordsSatchel1c") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000WarlordsSatchel2c") || (UnitGetType(lv_manipulatedItem1) == "cvalFF0000WarlordsSatchel3c"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "MultiDimensionalSatchel") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrorsc") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors1c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors2c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000BagofHorrors3c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchelc") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel1c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel2c") || (UnitGetType(UnitGroupLoopCurrent()) == "cvalFF0000WarlordsSatchel3c"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B1FBFB0B"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "KarakSkinGloves") || (UnitGetType(lv_manipulatedItem1) == "LyoteSkinGloves") || (UnitGetType(lv_manipulatedItem1) == "QuilgorSkinGloves") || (UnitGetType(lv_manipulatedItem1) == "BoneGlovesKarak") || (UnitGetType(lv_manipulatedItem1) == "BaneGloves") || (UnitGetType(lv_manipulatedItem1) == "AiurGloves") || (UnitGetType(lv_manipulatedItem1) == "GlovesofInsanity") || (UnitGetType(lv_manipulatedItem1) == "ClawsofAnguish1") || (UnitGetType(lv_manipulatedItem1) == "ClawsofAnguish2") || (UnitGetType(lv_manipulatedItem1) == "ClawsofAnguish3") || (UnitGetType(lv_manipulatedItem1) == "ClawsOfAnguish") || (UnitGetType(lv_manipulatedItem1) == "ChaoticGauntlets1") || (UnitGetType(lv_manipulatedItem1) == "ChaoticGauntlets2") || (UnitGetType(lv_manipulatedItem1) == "ChaoticGauntlets3") || (UnitGetType(lv_manipulatedItem1) == "ChaoticGauntlets") || (UnitGetType(lv_manipulatedItem1) == "BoneGlovesLyote") || (UnitGetType(lv_manipulatedItem1) == "BoneGlovesQuilgor"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "GlovesofInsanity") || (UnitGetType(UnitGroupLoopCurrent()) == "ClawsOfAnguish") || (UnitGetType(UnitGroupLoopCurrent()) == "ClawsofAnguish3") || (UnitGetType(UnitGroupLoopCurrent()) == "ClawsofAnguish2") || (UnitGetType(UnitGroupLoopCurrent()) == "ClawsofAnguish1") || (UnitGetType(UnitGroupLoopCurrent()) == "ChaoticGauntlets1") || (UnitGetType(UnitGroupLoopCurrent()) == "ChaoticGauntlets2") || (UnitGetType(UnitGroupLoopCurrent()) == "ChaoticGauntlets3") || (UnitGetType(UnitGroupLoopCurrent()) == "ChaoticGauntlets") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesQuilgor"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/44DCB3C1"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "KarakSkinCoat") || (UnitGetType(lv_manipulatedItem1) == "LyoteSkinCoat") || (UnitGetType(lv_manipulatedItem1) == "QuilgorSkinCoat") || (UnitGetType(lv_manipulatedItem1) == "BoneCoatKarak") || (UnitGetType(lv_manipulatedItem1) == "BaneArmor") || (UnitGetType(lv_manipulatedItem1) == "AiurArmor") || (UnitGetType(lv_manipulatedItem1) == "PhaseCoat") || (UnitGetType(lv_manipulatedItem1) == "ArmoroftheGods1") || (UnitGetType(lv_manipulatedItem1) == "ArmoroftheGods2") || (UnitGetType(lv_manipulatedItem1) == "ArmoroftheGods3") || (UnitGetType(lv_manipulatedItem1) == "ArmoroftheGods") || (UnitGetType(lv_manipulatedItem1) == "DeathsEmbrace1") || (UnitGetType(lv_manipulatedItem1) == "DeathsEmbrace2") || (UnitGetType(lv_manipulatedItem1) == "DeathsEmbrace3") || (UnitGetType(lv_manipulatedItem1) == "DeathsEmbrace") || (UnitGetType(lv_manipulatedItem1) == "GuardiansArmor") || (UnitGetType(lv_manipulatedItem1) == "BoneCoatLyote") || (UnitGetType(lv_manipulatedItem1) == "BoneCoatQuilgor"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "PhaseCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "DeathsEmbrace1") || (UnitGetType(UnitGroupLoopCurrent()) == "DeathsEmbrace2") || (UnitGetType(UnitGroupLoopCurrent()) == "DeathsEmbrace3") || (UnitGetType(UnitGroupLoopCurrent()) == "DeathsEmbrace") || (UnitGetType(UnitGroupLoopCurrent()) == "ArmoroftheGods1") || (UnitGetType(UnitGroupLoopCurrent()) == "ArmoroftheGods2") || (UnitGetType(UnitGroupLoopCurrent()) == "ArmoroftheGods3") || (UnitGetType(UnitGroupLoopCurrent()) == "ArmoroftheGods") || (UnitGetType(UnitGroupLoopCurrent()) == "GuardiansArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatQuilgor"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/375483A2"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "Shield") || (UnitGetType(lv_manipulatedItem1) == "BoneShield") || (UnitGetType(lv_manipulatedItem1) == "BaneShield") || (UnitGetType(lv_manipulatedItem1) == "AiurShield") || (UnitGetType(lv_manipulatedItem1) == "DustyBlade") || (UnitGetType(lv_manipulatedItem1) == "StoneBlade") || (UnitGetType(lv_manipulatedItem1) == "BaneBlade") || (UnitGetType(lv_manipulatedItem1) == "AiurBlade") || (UnitGetType(lv_manipulatedItem1) == "StormBlade") || (UnitGetType(lv_manipulatedItem1) == "BladeOfDarkness") || (UnitGetType(lv_manipulatedItem1) == "BladeOfDarkness1") || (UnitGetType(lv_manipulatedItem1) == "BladeOfDarkness2") || (UnitGetType(lv_manipulatedItem1) == "BladeOfDarkness3") || (UnitGetType(lv_manipulatedItem1) == "VoidDagger1") || (UnitGetType(lv_manipulatedItem1) == "VoidDagger2") || (UnitGetType(lv_manipulatedItem1) == "VoidDagger3") || (UnitGetType(lv_manipulatedItem1) == "VoidDagger") || (UnitGetType(lv_manipulatedItem1) == "ShieldoftheVoid") || (UnitGetType(lv_manipulatedItem1) == "SeersDagger") || (UnitGetType(lv_manipulatedItem1) == "SeersBaneDagger") || (UnitGetType(lv_manipulatedItem1) == "SeersAiurDagger") || (UnitGetType(lv_manipulatedItem1) == "OutcastsDagger") || (UnitGetType(lv_manipulatedItem1) == "StaffOfTheEternalFlame"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "Shield") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneShield") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneShield") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurShield") || (UnitGetType(UnitGroupLoopCurrent()) == "DustyBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "StoneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "StormBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness1") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness2") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness3") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger1") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger2") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger3") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "ShieldoftheVoid") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersBaneDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersAiurDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "OutcastsDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "StaffOfTheEternalFlame"))) {
                lv_manipulatedItem2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && (UnitGroupLoopCurrent() != lv_manipulatedItem2) && ((UnitGetType(UnitGroupLoopCurrent()) == "Shield") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneShield") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneShield") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurShield") || (UnitGetType(UnitGroupLoopCurrent()) == "DustyBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "StoneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "StormBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness1") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness2") || (UnitGetType(UnitGroupLoopCurrent()) == "BladeOfDarkness3") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger1") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger2") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger3") || (UnitGetType(UnitGroupLoopCurrent()) == "VoidDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "ShieldoftheVoid") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersBaneDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersAiurDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "OutcastsDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "StaffOfTheEternalFlame"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/8BBB82E7"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "Shield") || (UnitGetType(lv_manipulatedItem1) == "BoneShield") || (UnitGetType(lv_manipulatedItem1) == "BaneShield") || (UnitGetType(lv_manipulatedItem1) == "AiurShield") || (UnitGetType(lv_manipulatedItem1) == "ShieldoftheVoid"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "Shield") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneShield") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneShield") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurShield") || (UnitGetType(UnitGroupLoopCurrent()) == "ShieldoftheVoid"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/867D5BA5"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "cval0080FFHerosSkull1c") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull2") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull3") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull4") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull5") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull6") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull7") || (UnitGetType(lv_manipulatedItem1) == "HerosSkull8"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "cval0080FFHerosSkull1c") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull2") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull3") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull4") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull5") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull6") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull7") || (UnitGetType(UnitGroupLoopCurrent()) == "HerosSkull8"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CBBC36B7"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    if (((UnitGetType(lv_manipulatedItem1) == "StaffOfTheEternalFlame"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_manipulatedItem1) && ((UnitGetType(UnitGroupLoopCurrent()) == "StaffOfTheEternalFlame"))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B82980B8"));
                UnitRemove(EventUnitInventoryItem());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, UnitGetPosition(EventUnit()));
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemLimitations_Init () {
    gt_ItemLimitations = TriggerCreate("gt_ItemLimitations_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemLimitations, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_ItemLimitations, null, c_unitInventoryChangeBuys, null);
    TriggerAddEventUnitInventoryChange(gt_ItemLimitations, null, c_unitInventoryChangeReceives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Stacking
//--------------------------------------------------------------------------------------------------
bool gt_ItemStacking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemsmaxcharge;
    int lv_newitemscurrentcharge;
    int lv_existingitemscurrentcharge;
    string lv_chargelink;
    int lv_count;

    // Variable Initialization
    lv_chargelink = "";

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnitInventoryItem(), "StackableItem") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.Link", c_playerAny);
        lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.CountMax", c_playerAny));
        lv_newitemscurrentcharge = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(EventUnitInventoryItem(), lv_chargelink)));
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_existingitemscurrentcharge = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
            if ((UnitGetType(UnitGroupLoopCurrent()) == UnitGetType(EventUnitInventoryItem())) && (UnitGroupLoopCurrent() != EventUnitInventoryItem()) && (lv_existingitemscurrentcharge < lv_itemsmaxcharge)) {
                while ((lv_existingitemscurrentcharge < lv_itemsmaxcharge) && (lv_newitemscurrentcharge > 0)) {
                    UnitAddChargeUsed(UnitGroupLoopCurrent(), lv_chargelink, -1.0);
                    UnitAddChargeUsed(EventUnitInventoryItem(), lv_chargelink, 1.0);
                    lv_existingitemscurrentcharge += 1;
                    lv_newitemscurrentcharge -= 1;
                    if ((lv_newitemscurrentcharge <= 0)) {
                        UnitRemove(EventUnitInventoryItem());
                    }

                    lv_count = (lv_count + 1);
                }
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.Link", c_playerAny);
        lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(EventUnitInventoryItem())), "EffectCost.Charge.CountMax", c_playerAny));
        lv_newitemscurrentcharge = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(EventUnitInventoryItem(), lv_chargelink)));
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_existingitemscurrentcharge = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
            if ((UnitGetType(UnitGroupLoopCurrent()) == UnitGetType(EventUnitInventoryItem())) && (UnitGroupLoopCurrent() != EventUnitInventoryItem()) && (lv_existingitemscurrentcharge < lv_itemsmaxcharge)) {
                while ((lv_existingitemscurrentcharge < lv_itemsmaxcharge) && (lv_newitemscurrentcharge > 0)) {
                    UnitAddChargeUsed(UnitGroupLoopCurrent(), lv_chargelink, -1.0);
                    UnitAddChargeUsed(EventUnitInventoryItem(), lv_chargelink, 1.0);
                    lv_existingitemscurrentcharge += 1;
                    lv_newitemscurrentcharge -= 1;
                    if ((lv_newitemscurrentcharge <= 0)) {
                        UnitRemove(EventUnitInventoryItem());
                    }

                }
            }

        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemStacking_Init () {
    gt_ItemStacking = TriggerCreate("gt_ItemStacking_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemStacking, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item into Neutral
//--------------------------------------------------------------------------------------------------
bool gt_ItemintoNeutral_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "IsItem") == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemintoNeutral_Init () {
    gt_ItemintoNeutral = TriggerCreate("gt_ItemintoNeutral_Func");
    TriggerAddEventUnitRegion(gt_ItemintoNeutral, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magic
//--------------------------------------------------------------------------------------------------
bool gt_Magic_Func (bool testConds, bool runActions) {
    int auto0BFB8CBF_ae;
    int auto0BFB8CBF_ai;

    // Variable Declarations
    fixed lv_magicChances;
    int lv_randomizer;
    int lv_rANDOMMEAT;
    region[6] lv_magicRegion;
    point lv_locationofHero;
    unit lv_chosenSwap;
    string[8] lv_item;
    string[21] lv_superiorItem;
    string[21] lv_shadowBeast;
    int lv_shadowBeastMax;

    // Variable Initialization
    lv_rANDOMMEAT = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Magic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_magicChances = RandomFixed(1.0, 100.0);
    if ((lv_magicChances >= 1) && (lv_magicChances < 21.0)) {
        TextTagCreate(StringExternal("Param/Value/A451AA0D"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        if ((RandomInt(0, 1) == 1)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + RandomInt(1, 50)));
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - RandomInt(1, 50)));
        }
        if ((RandomInt(0, 1) == 1)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + RandomInt(1, 50)));
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - RandomInt(1, 50)));
        }
        if ((RandomInt(0, 1) == 1)) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene) + RandomInt(1, 50)));
        }
        else {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, (PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene) - RandomInt(1, 50)));
        }
    }

    if ((lv_magicChances >= 21.0) && (lv_magicChances < 31.0)) {
        lv_item[0] = "Mineral";
        lv_item[1] = "Emberthorn";
        lv_item[2] = "BanelingDust";
        lv_item[3] = "Relic";
        lv_item[4] = "Rock";
        lv_item[5] = "MushroomItem";
        lv_item[6] = "Magic";
        lv_randomizer = RandomInt(0, 6);
        TextTagCreate((UnitTypeGetName(lv_item[lv_randomizer]) + StringExternal("Param/Value/66B5118C")), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_item[lv_randomizer], 0, 0, UnitGetPosition(EventUnit()));
    }

    if ((lv_magicChances >= 31.0) && (lv_magicChances < 36.0)) {
        TextTagCreate(StringExternal("Param/Value/F3941BA9"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, 100);
    }

    if ((lv_magicChances >= 36.0) && (lv_magicChances < 51.0)) {
        lv_randomizer = RandomInt(1, 11);
        if ((lv_randomizer == 1)) {
            TextTagCreate(StringExternal("Param/Value/7381C28D"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
            UnitBehaviorAdd(EventUnit(), "BoonofStone", EventUnit(), 1);
        }
        else {
            if ((lv_randomizer == 2)) {
                TextTagCreate(StringExternal("Param/Value/F776C891"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                UnitBehaviorAdd(EventUnit(), "CurseofConfused", EventUnit(), 1);
            }
            else {
                if ((lv_randomizer == 3)) {
                    TextTagCreate(StringExternal("Param/Value/0365B8AD"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                    UnitBehaviorAdd(EventUnit(), "BoonoftheKarak", EventUnit(), 1);
                }
                else {
                    if ((lv_randomizer == 4)) {
                        TextTagCreate(StringExternal("Param/Value/B3AE9CAE"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                        UnitBehaviorAdd(EventUnit(), "CurseofDarkness", EventUnit(), 1);
                    }
                    else {
                        if ((lv_randomizer == 5)) {
                            TextTagCreate(StringExternal("Param/Value/93BA3C81"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                            UnitBehaviorAdd(EventUnit(), "BoonoftheLyote", EventUnit(), 1);
                        }
                        else {
                            if ((lv_randomizer == 6)) {
                                TextTagCreate(StringExternal("Param/Value/FE4A55D0"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                                UnitBehaviorAdd(EventUnit(), "CurseoftheNoob", EventUnit(), 1);
                            }
                            else {
                                if ((lv_randomizer == 7)) {
                                    TextTagCreate(StringExternal("Param/Value/ED5138C5"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                                    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                                    UnitBehaviorAdd(EventUnit(), "BoonofthePro", EventUnit(), 1);
                                }
                                else {
                                    if ((lv_randomizer == 8)) {
                                        TextTagCreate(StringExternal("Param/Value/C99772B5"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                                        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                                        UnitBehaviorAdd(EventUnit(), "CurseoftheShattered", EventUnit(), 1);
                                    }
                                    else {
                                        if ((lv_randomizer == 9)) {
                                            TextTagCreate(StringExternal("Param/Value/840B1B8C"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                                            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                                            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                                            UnitBehaviorAdd(EventUnit(), "BoonoftheHun", EventUnit(), 1);
                                        }
                                        else {
                                            if ((lv_randomizer == 10)) {
                                                TextTagCreate(StringExternal("Param/Value/FCEC06A4"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                                                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                                                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                                                UnitBehaviorAdd(EventUnit(), "CurseoftheSloth", EventUnit(), 1);
                                            }
                                            else {
                                                TextTagCreate(StringExternal("Param/Value/24C97F80"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
                                                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                                                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                                                UnitBehaviorAdd(EventUnit(), "CurseoftheHun", EventUnit(), 1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if ((lv_magicChances >= 51.0) && (lv_magicChances < 66.0)) {
        TextTagCreate(StringExternal("Param/Value/CBEF684B"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, (UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) + 125.0));
    }

    if ((lv_magicChances >= 66.0) && (lv_magicChances < 71.0)) {
        TextTagCreate(StringExternal("Param/Value/8E7EC3D0"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, (UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) + 250.0));
    }

    if ((lv_magicChances >= 71.0) && (lv_magicChances < 76.0)) {
        if ((gv_daytime == false)) {
            TextTagCreate(StringExternal("Param/Value/C9D16989"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
            GameTimeOfDaySet("12:00:00");
            GameSetLighting("Korhal", 0.0);
            gv_daytime = true;
        }
        else {
            TextTagCreate(StringExternal("Param/Value/525C10D7"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
            GameTimeOfDaySet("23:00:00");
            GameSetLighting("KorhalNight", 0.0);
            gv_daytime = false;
        }
    }

    if ((lv_magicChances >= 76.0) && (lv_magicChances < 83.5)) {
        lv_magicRegion[0] = RegionFromId(8);
        lv_magicRegion[1] = RegionFromId(10);
        lv_magicRegion[2] = RegionFromId(26);
        lv_magicRegion[3] = RegionFromId(27);
        lv_magicRegion[4] = RegionFromId(28);
        lv_magicRegion[5] = RegionFromId(29);
        UnitSetPosition(EventUnit(), RegionGetCenter(lv_magicRegion[RandomInt(0, 5)]), false);
        libNtve_gf_CreateActorAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
        CameraApplyInfo(UnitGetOwner(EventUnit()), CameraInfoDefault(), 0.0, -1, 0, true);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 0, false);
        TextTagCreate(StringExternal("Param/Value/AE2D688B"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
    }

    if ((lv_magicChances >= 83.5) && (lv_magicChances < 86.0)) {
        TextTagCreate(StringExternal("Param/Value/4E032178"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, (UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) + 500.0));
    }

    if ((lv_magicChances >= 86.0) && (lv_magicChances < 91.0)) {
        if ((RandomInt(0, 2) == 0)) {
            TextTagCreate(StringExternal("Param/Value/40B09026"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "VoidCrystal", 0, 0, UnitGetPosition(EventUnit()));
        }
        else {
            TextTagCreate(StringExternal("Param/Value/69A1897A"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VoidCrystal", 0, 0, UnitGetPosition(EventUnit()));
        }
    }

    if ((lv_magicChances >= 91.0) && (lv_magicChances < 94.25)) {
        lv_randomizer = RandomInt(1, 100);
        if ((lv_randomizer <= 65)) {
            lv_superiorItem[0] = "Shield";
            lv_superiorItem[1] = "StoneBlade";
            lv_superiorItem[2] = "SeersDagger";
            lv_superiorItem[3] = "KarakSkinBoots";
            lv_superiorItem[4] = "KarakSkinCoat";
            lv_superiorItem[5] = "KarakSkinGloves";
            lv_superiorItem[6] = "LyoteSkinBoots";
            lv_superiorItem[7] = "LyoteSkinCoat";
            lv_superiorItem[8] = "LyoteSkinGloves";
            lv_superiorItem[9] = "CookedMeat";
            lv_randomizer = RandomInt(0, 9);
            if ((lv_randomizer == 9)) {
                auto0BFB8CBF_ae = RandomInt(1, 10);
                auto0BFB8CBF_ai = 1;
                lv_rANDOMMEAT = 1;
                for ( ; ( (auto0BFB8CBF_ai >= 0 && lv_rANDOMMEAT <= auto0BFB8CBF_ae) || (auto0BFB8CBF_ai <= 0 && lv_rANDOMMEAT >= auto0BFB8CBF_ae) ) ; lv_rANDOMMEAT += auto0BFB8CBF_ai ) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_superiorItem[lv_randomizer], 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                }
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_superiorItem[lv_randomizer], 0, 0, UnitGetPosition(EventUnit()));
            }
        }
        else {
            if (((lv_randomizer >= 66) && (lv_randomizer <= 80))) {
                lv_randomizer = RandomInt(0, 2);
                lv_superiorItem[0] = "PhotonCannonItem";
                lv_superiorItem[1] = "MageFire";
                lv_superiorItem[2] = "VoidTrap";
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_superiorItem[lv_randomizer], 0, 0, UnitGetPosition(EventUnit()));
            }
            else {
                if (((lv_randomizer >= 81) && (lv_randomizer <= 97))) {
                    lv_randomizer = RandomInt(0, 6);
                    lv_superiorItem[0] = "BaneBlade";
                    lv_superiorItem[1] = "BaneBoots";
                    lv_superiorItem[2] = "BaneArmor";
                    lv_superiorItem[3] = "BaneGloves";
                    lv_superiorItem[4] = "BaneShield";
                    lv_superiorItem[5] = "SeersBaneDagger";
                    lv_superiorItem[6] = "BaneIgnot";
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_superiorItem[lv_randomizer], 0, 0, UnitGetPosition(EventUnit()));
                }
                else {
                    if (((lv_randomizer >= 98) && (lv_randomizer <= 100))) {
                        lv_randomizer = RandomInt(0, 6);
                        lv_superiorItem[0] = "AiurBlade";
                        lv_superiorItem[1] = "AiurBoots";
                        lv_superiorItem[2] = "AiurArmor";
                        lv_superiorItem[3] = "AiurGloves";
                        lv_superiorItem[4] = "AiurIgnot";
                        lv_superiorItem[5] = "AiurShield";
                        lv_superiorItem[6] = "SeersAiurDagger";
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_superiorItem[lv_randomizer], 0, 0, UnitGetPosition(EventUnit()));
                    }

                }
            }
        }
        TextTagCreate((UnitTypeGetName(lv_superiorItem[lv_randomizer]) + StringExternal("Param/Value/E4B2EC3E")), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
    }

    if ((lv_magicChances >= 94.25) && (lv_magicChances < 96.5)) {
        lv_shadowBeast[0] = "Lyote";
        lv_shadowBeast[1] = "Lyote";
        lv_shadowBeast[2] = "Lyote";
        lv_shadowBeast[3] = "Lyote";
        lv_shadowBeast[4] = "Lyote";
        lv_shadowBeast[5] = "Lyote";
        lv_shadowBeast[6] = "Lyote";
        lv_shadowBeast[7] = "Lyote";
        lv_shadowBeast[8] = "SpaceCowSmall";
        lv_shadowBeast[9] = "SpaceCowSmall";
        lv_shadowBeast[10] = "SpaceCowSmall";
        lv_shadowBeast[11] = "SpaceCowSmall";
        lv_shadowBeast[12] = "Predator";
        lv_shadowBeast[13] = "Predator";
        lv_shadowBeast[14] = "InfestedTerran";
        if ((GameGetMissionTime() >= 1800.0)) {
            lv_shadowBeastMax = 14;
        }
        else {
            if ((GameGetMissionTime() >= 1200.0)) {
                lv_shadowBeastMax = 13;
            }
            else {
                lv_shadowBeastMax = 11;
            }
        }
        lv_randomizer = RandomInt(0, lv_shadowBeastMax);
        TextTagCreate(StringExternal("Param/Value/07A96EE3"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_shadowBeast[lv_randomizer], 0, 15, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5)));
        UnitBehaviorAdd(UnitLastCreated(), "ShadowedConjuration", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "ShadowDeath", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "ShadowConjuration", UnitLastCreated(), 1);
    }

    if ((lv_magicChances >= 96.5) && (lv_magicChances < 97.75)) {
        TextTagCreate(StringExternal("Param/Value/A06AD1C4"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, (UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) + 1000.0));
    }

    if ((lv_magicChances >= 97.75) && (lv_magicChances < 99.0)) {
        lv_randomizer = RandomInt(1, 3);
        if ((lv_randomizer == 1)) {
            TextTagCreate(StringExternal("Param/Value/A7CAA96F"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
            UnitBehaviorAdd(EventUnit(), "EmpowerStrength", EventUnit(), 1);
            gv_empowerStr[UnitGetOwner(EventUnit())] += 1;
        }
        else {
            if ((lv_randomizer == 2)) {
                TextTagCreate(StringExternal("Param/Value/D8D03F66"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                UnitBehaviorAdd(EventUnit(), "EmpowerAgility", EventUnit(), 1);
                gv_empowerAgi[UnitGetOwner(EventUnit())] += 1;
            }
            else {
                TextTagCreate(StringExternal("Param/Value/991C70E9"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
                UnitBehaviorAdd(EventUnit(), "EmpowerInt", EventUnit(), 1);
                gv_empowerInt[UnitGetOwner(EventUnit())] += 1;
            }
        }
    }

    if ((lv_magicChances >= 99.0) && (lv_magicChances < 99.25)) {
        TextTagCreate(StringExternal("Param/Value/6EA0DF3F"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSetTo, (PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine) + 1));
    }

    if ((lv_magicChances >= 99.25) && (lv_magicChances < 99.85)) {
        TextTagCreate(StringExternal("Param/Value/6845A53D"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DarkMatter", 0, 0, UnitGetPosition(EventUnit()));
    }

    if ((lv_magicChances >= 99.85) && (lv_magicChances <= 100)) {
        TextTagCreate(StringExternal("Param/Value/AEFB00B0"), 28, UnitGetPosition(EventUnit()), 1.5, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(229*100/255,91*100/255,176*100/255));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 3.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 3.0);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, 3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Magic_Init () {
    gt_Magic = TriggerCreate("gt_Magic_Func");
    TriggerAddEventUnitInventoryChange(gt_Magic, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Shadow From Game
//--------------------------------------------------------------------------------------------------
bool gt_RemoveShadowFromGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveShadowFromGame_Init () {
    gt_RemoveShadowFromGame = TriggerCreate("gt_RemoveShadowFromGame_Func");
    TriggerAddEventUnitBehaviorChange(gt_RemoveShadowFromGame, null, "ShadowConjuration", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Potion of Disease [Target]
//--------------------------------------------------------------------------------------------------
bool gt_PotionofDiseaseTarget_Func (bool testConds, bool runActions) {
    int autoCB07785F_ae;
    int autoCB07785F_ai;

    // Variable Declarations
    unit lv_diseasedhero;
    int lv_itemstackcount;
    int lv_itemsmaxcharge;
    int lv_stackcounter;
    string lv_chargelink;
    unit lv_cookedmeat;
    int lv_tempstackcount;

    // Variable Initialization
    lv_stackcounter = 1;
    lv_chargelink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_diseasedhero = EventUnit();
    UnitGroupLoopBegin(UnitInventoryGroup(lv_diseasedhero));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "StackableItem") == true) && (UnitGetType(UnitGroupLoopCurrent()) == "CookedMeat")) {
            lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
            lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
            lv_tempstackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
            if ((lv_tempstackcount >= lv_itemstackcount)) {
                lv_itemstackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                lv_cookedmeat = UnitGroupLoopCurrent();
            }

        }

    }
    UnitGroupLoopEnd();
    if ((lv_cookedmeat != null)) {
        UnitRemove(lv_cookedmeat);
        lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, ("DiseasedMeat"), "EffectCost.Charge.Link", c_playerAny);
        Wait(gv_transmutetime, c_timeGame);
        autoCB07785F_ae = lv_itemstackcount;
        autoCB07785F_ai = 1;
        lv_stackcounter = 1;
        for ( ; ( (autoCB07785F_ai >= 0 && lv_stackcounter <= autoCB07785F_ae) || (autoCB07785F_ai <= 0 && lv_stackcounter >= autoCB07785F_ae) ) ; lv_stackcounter += autoCB07785F_ai ) {
            UnitInventoryCreate(lv_diseasedhero, "DiseasedMeat");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PotionofDiseaseTarget_Init () {
    gt_PotionofDiseaseTarget = TriggerCreate("gt_PotionofDiseaseTarget_Func");
    TriggerAddEventUnitBehaviorChange(gt_PotionofDiseaseTarget, null, "PotionofDisease", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bag of Horrors
//--------------------------------------------------------------------------------------------------
bool gt_BagofHorrors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 6);
    if ((lv_rng == 0)) {
        UnitBehaviorAdd(EventUnit(), "DemonicGuise", EventUnit(), 1);
    }
    else {
        if ((lv_rng == 1)) {
            UnitBehaviorAdd(EventUnit(), "DemonicThirst", EventUnit(), 1);
        }
        else {
            if ((lv_rng == 2)) {
                ActorCreate(ActorScopeFromUnit(EventUnit()), "DemonicHeat", null, null, null);
                TextTagCreate(StringExternal("Param/Value/F04F4371"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
                PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, gv_maxHeat[UnitGetOwner(EventUnit())]);
            }
            else {
                if ((lv_rng == 3)) {
                    UnitBehaviorAdd(EventUnit(), "DemonicCore", EventUnit(), 1);
                }
                else {
                    if ((lv_rng == 4)) {
                        UnitCreate(1, "DemonicZergling", 0, UnitGetOwner(EventUnit()), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.25)), libNtve_gf_RandomAngle());
                        UnitCreate(1, "DemonicZergling", 0, UnitGetOwner(EventUnit()), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.25)), libNtve_gf_RandomAngle());
                        UnitCreate(1, "DemonicZergling", 0, UnitGetOwner(EventUnit()), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.25)), libNtve_gf_RandomAngle());
                        UnitCreate(1, "DemonicZergling", 0, UnitGetOwner(EventUnit()), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.25)), libNtve_gf_RandomAngle());
                    }
                    else {
                        UnitBehaviorAdd(EventUnit(), "DemonicEnergy", EventUnit(), 1);
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BagofHorrors_Init () {
    gt_BagofHorrors = TriggerCreate("gt_BagofHorrors_Func");
    TriggerAddEventUnitBehaviorChange(gt_BagofHorrors, null, "BagofHorrorsTriggered", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kaiser Blade
//--------------------------------------------------------------------------------------------------
bool gt_KaiserBlade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent))) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < PlayerGetPropertyFixed(EventPlayer(), c_playerPropVespene))) {
            TextTagCreate(StringExternal("Param/Value/D32B6262"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        }
        else {
            TextTagCreate(StringExternal("Param/Value/163699AF"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, gv_maxHeat[UnitGetOwner(EventUnit())]);
        }
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) < PlayerGetPropertyFixed(EventPlayer(), c_playerPropVespene))) {
            TextTagCreate(StringExternal("Param/Value/610BB759"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        }
        else {
            TextTagCreate(StringExternal("Param/Value/A735DF10"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, gv_maxHeat[UnitGetOwner(EventUnit())]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KaiserBlade_Init () {
    gt_KaiserBlade = TriggerCreate("gt_KaiserBlade_Func");
    TriggerAddEventUnitBehaviorChange(gt_KaiserBlade, null, "UltralisksLeftKaiserBladeUse", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_KaiserBlade, null, "UltralisksRightKaiserBladeUse", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Staff of Eternal Flame
//--------------------------------------------------------------------------------------------------
bool gt_StaffofEternalFlame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/00EEC49B"), 28, UnitGetPosition(EventUnit()), 3.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, 30);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StaffofEternalFlame_Init () {
    gt_StaffofEternalFlame = TriggerCreate("gt_StaffofEternalFlame_Func");
    TriggerAddEventUnitBehaviorChange(gt_StaffofEternalFlame, null, "StaffoftheEternalFlameUse", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vision of the Isles
//--------------------------------------------------------------------------------------------------
bool gt_VisionoftheIsles_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "VisionoftheIsles"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(59.22, 0.00, 1.57, 0.00), 3.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VisionoftheIsles_Init () {
    gt_VisionoftheIsles = TriggerCreate("gt_VisionoftheIsles_Func");
    TriggerAddEventUnitInventoryChange(gt_VisionoftheIsles, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero's Skull Replace
//--------------------------------------------------------------------------------------------------
bool gt_HerosSkullReplace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    int lv_container;
    string lv_typeoftriggeringunit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "cval0080FFHerosSkull1c") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull2") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull3") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull4") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull5") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull6") || (UnitGetType(EventUnitInventoryItem()) == "HerosSkull7")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_slot = EventUnitInventoryItemSlot();
    lv_container = EventUnitInventoryItemContainer();
    lv_typeoftriggeringunit = UnitGetType(EventUnitInventoryItem());
    UnitRemove(EventUnitInventoryItem());
    Wait(0.189, c_timeGame);
    if ((lv_typeoftriggeringunit == "cval0080FFHerosSkull1c")) {
        UnitInventoryCreate(EventUnit(), "HerosSkull2");
    }
    else {
        if ((lv_typeoftriggeringunit == "HerosSkull2")) {
            UnitInventoryCreate(EventUnit(), "HerosSkull3");
        }
        else {
            if ((lv_typeoftriggeringunit == "HerosSkull3")) {
                UnitInventoryCreate(EventUnit(), "HerosSkull4");
            }
            else {
                if ((lv_typeoftriggeringunit == "HerosSkull4")) {
                    UnitInventoryCreate(EventUnit(), "HerosSkull5");
                }
                else {
                    if ((lv_typeoftriggeringunit == "HerosSkull5")) {
                        UnitInventoryCreate(EventUnit(), "HerosSkull6");
                    }
                    else {
                        if ((lv_typeoftriggeringunit == "HerosSkull6")) {
                            UnitInventoryCreate(EventUnit(), "HerosSkull7");
                        }
                        else {
                            UnitInventoryCreate(EventUnit(), "HerosSkull8");
                        }
                    }
                }
            }
        }
    }
    UnitInventoryMove(UnitInventoryLastCreated(), lv_container, lv_slot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HerosSkullReplace_Init () {
    gt_HerosSkullReplace = TriggerCreate("gt_HerosSkullReplace_Func");
    TriggerAddEventUnitInventoryChange(gt_HerosSkullReplace, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest
//--------------------------------------------------------------------------------------------------
bool gt_Nest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZerglingNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "PsyBeaconTimedLife", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nest_Init () {
    gt_Nest = TriggerCreate("gt_Nest_Func");
    TriggerAddEventUnitRegion(gt_Nest, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cure All
//--------------------------------------------------------------------------------------------------
bool gt_CureAll_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "CureAll"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "SoulofKahvOcBehavior", 1);
    UnitBehaviorRemove(EventUnit(), "MarkofDoomLevel1", 1);
    UnitBehaviorRemove(EventUnit(), "MarkofDoomLevel2", 1);
    UnitBehaviorRemove(EventUnit(), "ThrowPoisonSpear", 1);
    UnitBehaviorRemove(EventUnit(), "ThrowRefinedPoisonSpear", 1);
    UnitBehaviorRemove(EventUnit(), "ThrowUltraPoisonSpear", 1);
    UnitBehaviorRemove(EventUnit(), "SpineanPoisonDebuff", 1);
    UnitBehaviorRemove(EventUnit(), "FoodPoisoning", 1);
    UnitBehaviorRemove(EventUnit(), "Sickness", 1);
    UnitBehaviorRemove(EventUnit(), "CurseofConfused", 1);
    UnitBehaviorRemove(EventUnit(), "CurseoftheNoob", 1);
    UnitBehaviorRemove(EventUnit(), "CurseoftheShattered", 1);
    UnitBehaviorRemove(EventUnit(), "CurseoftheSloth", 1);
    UnitBehaviorRemove(EventUnit(), "CurseofDarkness", 1);
    UnitBehaviorRemove(EventUnit(), "CurseoftheHun", 1);
    UnitBehaviorRemove(EventUnit(), "Disruption1", 1);
    UnitBehaviorRemove(EventUnit(), "Disruption2", 1);
    if ((UnitHasBehavior(EventUnit(), "MarkofDeathLevel1") == true)) {
        UnitBehaviorRemove(EventUnit(), "MarkofDeathLevel1", 1);
        UnitBehaviorAdd(EventUnit(), "ImpendingDoomLevel1Stun", EventUnit(), 1);
    }

    if ((UnitHasBehavior(EventUnit(), "MarkofDeathLevel2") == true)) {
        UnitBehaviorRemove(EventUnit(), "MarkofDeathLevel2", 1);
        UnitBehaviorAdd(EventUnit(), "ImpendingDoomLevel2Stun", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CureAll_Init () {
    gt_CureAll = TriggerCreate("gt_CureAll_Func");
    TriggerAddEventUnitInventoryChange(gt_CureAll, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Consume Heart of the Ultralisk
//--------------------------------------------------------------------------------------------------
bool gt_ConsumeHeartoftheUltralisk_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "HeartoftheUltralisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "CalloftheVoid1", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid2", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid3", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid4", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid5", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid6", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid7", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid8", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid9", 1);
    UnitBehaviorRemove(EventUnit(), "CalloftheVoid10", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConsumeHeartoftheUltralisk_Init () {
    gt_ConsumeHeartoftheUltralisk = TriggerCreate("gt_ConsumeHeartoftheUltralisk_Func");
    TriggerAddEventUnitInventoryChange(gt_ConsumeHeartoftheUltralisk, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sonar
//--------------------------------------------------------------------------------------------------
bool gt_Sonar_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SonarCompass"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("WarpPrism", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(31.76, 0.00, 0.00, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ProtossFrigate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(31.76, 0.00, 0.00, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Carrier", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(98.04, 91.37, 78.04, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ProtossTransportShip", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(98.04, 91.37, 78.04, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerranBattleCruiser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(98.04, 91.37, 78.04, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerranRaven", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(98.04, 91.37, 78.04, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerranSupplyShip", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(98.04, 91.37, 78.04, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TerranTransportShip", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(98.04, 91.37, 78.04, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sonar_Init () {
    gt_Sonar = TriggerCreate("gt_Sonar_Func");
    TriggerAddEventUnitInventoryChange(gt_Sonar, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Artifact
//--------------------------------------------------------------------------------------------------
bool gt_VoidArtifact_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "VoidArtifact"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("VoidTowerBuilt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(36.86, 7.45, 47.45, 0.00), 5.0);
        PingSetScale(PingLastCreated(), 0.4);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidArtifact_Init () {
    gt_VoidArtifact = TriggerCreate("gt_VoidArtifact_Func");
    TriggerAddEventUnitInventoryChange(gt_VoidArtifact, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Stone Death
//--------------------------------------------------------------------------------------------------
bool gt_FireStoneDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BlazingFireStone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "FireStone", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireStoneDeath_Init () {
    gt_FireStoneDeath = TriggerCreate("gt_FireStoneDeath_Func");
    TriggerAddEventUnitDied(gt_FireStoneDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P.O.D. Death
//--------------------------------------------------------------------------------------------------
bool gt_PODDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PODBuilt"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "POD", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PODDeath_Init () {
    gt_PODDeath = TriggerCreate("gt_PODDeath_Func");
    TriggerAddEventUnitDied(gt_PODDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mage Fire Stone Death
//--------------------------------------------------------------------------------------------------
bool gt_MageFireStoneDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MageFireStone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "MageFire", 0, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MageFireStoneDeath_Init () {
    gt_MageFireStoneDeath = TriggerCreate("gt_MageFireStoneDeath_Func");
    TriggerAddEventUnitDied(gt_MageFireStoneDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nexus Warp
//--------------------------------------------------------------------------------------------------
bool gt_NexusWarp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(gv_hero[EventPlayer()], UnitGetPosition(EventUnit()), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("LoadUnloadBuilding4", 0), gv_hero[EventPlayer()]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NexusWarp_Init () {
    gt_NexusWarp = TriggerCreate("gt_NexusWarp_Func");
    TriggerAddEventUnitAbility(gt_NexusWarp, null, AbilityCommand("Recall", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Nexus
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeNexus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_warpstone;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Warpstone")) {
            lv_warpstone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_warpstone != null)) {
        UnitRemove(lv_warpstone);
        UnitBehaviorAdd(EventUnit(), "UpgradedNexus1", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeNexus_Init () {
    gt_UpgradeNexus = TriggerCreate("gt_UpgradeNexus_Func");
    TriggerAddEventUnitAbility(gt_UpgradeNexus, null, AbilityCommand("UpgradeNexus", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp
//--------------------------------------------------------------------------------------------------
bool gt_Warp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 1.075), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == EventPlayer())) {
            UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, c_unitPropCurrent) - 10.0));
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(EventUnitTargetUnit()), false);
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "WarpStun", UnitGroupLoopCurrent(), 1);
            UnitSelect(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), true);
            CameraPan(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()), 0.0, -1, 10.0, false);
            libNtve_gf_CreateModelAtPoint("WarpVisual", UnitGetPosition(UnitGroupLoopCurrent()));
            SoundPlayAtPointForPlayer(SoundLink("WarpSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnitTargetUnit()), 0.0, 100.0, 0.0);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Warp_Init () {
    gt_Warp = TriggerCreate("gt_Warp_Func");
    TriggerAddEventUnitAbility(gt_Warp, null, AbilityCommand("Teleport", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_Warp, null, AbilityCommand("Teleport2", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_Warp, null, AbilityCommand("Teleport3", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_Warp, null, AbilityCommand("Teleport4", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quick Warp
//--------------------------------------------------------------------------------------------------
bool gt_QuickWarp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_warped;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarpPad") == true)) {
        UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 25.0), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((lv_warped == false) && (UnitGetType(UnitGroupLoopCurrent()) == "WarpPad") && (UnitGroupLoopCurrent() != EventUnitDamageSourceUnit())) {
                UnitSetPosition(EventUnit(), UnitGetPosition(UnitGroupLoopCurrent()), false);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) - 10.0));
                UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitBehaviorAdd(EventUnit(), "WarpStun", EventUnit(), 1);
                CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10.0, false);
                UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), true);
                lv_warped = true;
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarpPad2") == true)) {
            UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 35.0), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((lv_warped == false) && (UnitGetType(UnitGroupLoopCurrent()) == "WarpPad") && (UnitGroupLoopCurrent() != EventUnitDamageSourceUnit())) {
                    UnitSetPosition(EventUnit(), UnitGetPosition(UnitGroupLoopCurrent()), false);
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) - 10.0));
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    UnitBehaviorAdd(EventUnit(), "WarpStun", EventUnit(), 1);
                    CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10.0, false);
                    UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), true);
                    lv_warped = true;
                }

            }
            UnitGroupLoopEnd();
        }
        else {
            if ((UnitHasBehavior2(EventUnitDamageSourceUnit(), "WarpPad3") == true)) {
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 45.0), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((lv_warped == false) && (UnitGetType(UnitGroupLoopCurrent()) == "WarpPad") && (UnitGroupLoopCurrent() != EventUnitDamageSourceUnit())) {
                        UnitSetPosition(EventUnit(), UnitGetPosition(UnitGroupLoopCurrent()), false);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) - 10.0));
                        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        UnitBehaviorAdd(EventUnit(), "WarpStun", EventUnit(), 1);
                        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10.0, false);
                        UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), true);
                        lv_warped = true;
                    }

                }
                UnitGroupLoopEnd();
            }
            else {
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((lv_warped == false) && (UnitGetType(UnitGroupLoopCurrent()) == "WarpPad") && (UnitGroupLoopCurrent() != EventUnitDamageSourceUnit())) {
                        UnitSetPosition(EventUnit(), UnitGetPosition(UnitGroupLoopCurrent()), false);
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent) - 10.0));
                        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        UnitBehaviorAdd(EventUnit(), "WarpStun", EventUnit(), 1);
                        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10.0, false);
                        UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), true);
                        lv_warped = true;
                    }

                }
                UnitGroupLoopEnd();
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuickWarp_Init () {
    gt_QuickWarp = TriggerCreate("gt_QuickWarp_Func");
    TriggerAddEventUnitDamaged(gt_QuickWarp, null, c_unitDamageTypeAny, c_unitDamageEither, "QuickWarpTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Warp Pad
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeWarpPad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_voidCrystal != null)) {
        UnitRemove(lv_voidCrystal);
        UnitBehaviorAdd(EventUnit(), "WarpPad", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeWarpPad_Init () {
    gt_UpgradeWarpPad = TriggerCreate("gt_UpgradeWarpPad_Func");
    TriggerAddEventUnitAbility(gt_UpgradeWarpPad, null, AbilityCommand("UpgradeWarpPad", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Warp Pad 2
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeWarpPad2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_voidCrystal != null)) {
        UnitRemove(lv_voidCrystal);
        UnitBehaviorRemove(EventUnit(), "WarpPad", 1);
        UnitBehaviorAdd(EventUnit(), "WarpPad2", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeWarpPad2_Init () {
    gt_UpgradeWarpPad2 = TriggerCreate("gt_UpgradeWarpPad2_Func");
    TriggerAddEventUnitAbility(gt_UpgradeWarpPad2, null, AbilityCommand("UpgradeWarpPad2", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Warp Pad 3
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeWarpPad3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_voidCrystal != null)) {
        UnitRemove(lv_voidCrystal);
        UnitBehaviorRemove(EventUnit(), "WarpPad2", 1);
        UnitBehaviorAdd(EventUnit(), "WarpPad3", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeWarpPad3_Init () {
    gt_UpgradeWarpPad3 = TriggerCreate("gt_UpgradeWarpPad3_Func");
    TriggerAddEventUnitAbility(gt_UpgradeWarpPad3, null, AbilityCommand("UpgradeWarpPad3", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Photon Cannon
//--------------------------------------------------------------------------------------------------
bool gt_UpgradePhotonCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineral != null)) {
        UnitRemove(lv_mineral);
        UnitBehaviorAdd(EventUnit(), "PhotonCannon1", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, (FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)) + 25));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradePhotonCannon_Init () {
    gt_UpgradePhotonCannon = TriggerCreate("gt_UpgradePhotonCannon_Func");
    TriggerAddEventUnitAbility(gt_UpgradePhotonCannon, null, AbilityCommand("UpgradePhotonCannon1", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Photon Cannon 2
//--------------------------------------------------------------------------------------------------
bool gt_UpgradePhotonCannon2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineral != null)) {
        UnitRemove(lv_mineral);
        UnitBehaviorRemove(EventUnit(), "PhotonCannon1", 1);
        UnitBehaviorAdd(EventUnit(), "PhotonCannon2", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, (FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)) + 25));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradePhotonCannon2_Init () {
    gt_UpgradePhotonCannon2 = TriggerCreate("gt_UpgradePhotonCannon2_Func");
    TriggerAddEventUnitAbility(gt_UpgradePhotonCannon2, null, AbilityCommand("UpgradePhotonCannon2", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Photon Cannon 3
//--------------------------------------------------------------------------------------------------
bool gt_UpgradePhotonCannon3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineral != null)) {
        UnitRemove(lv_mineral);
        UnitBehaviorRemove(EventUnit(), "PhotonCannon2", 1);
        UnitBehaviorAdd(EventUnit(), "PhotonCannon3", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, (FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)) + 25));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradePhotonCannon3_Init () {
    gt_UpgradePhotonCannon3 = TriggerCreate("gt_UpgradePhotonCannon3_Func");
    TriggerAddEventUnitAbility(gt_UpgradePhotonCannon3, null, AbilityCommand("UpgradePhotonCannon3", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP Blast Reduction
//--------------------------------------------------------------------------------------------------
bool gt_EMPBlastReduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon2") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "EMP", 11.25);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "EMP", 9.75);
        }
        else {
            UnitBehaviorSetDurationRemaining(EventUnit(), "EMP", 8.25);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMPBlastReduction_Init () {
    gt_EMPBlastReduction = TriggerCreate("gt_EMPBlastReduction_Func");
    TriggerAddEventUnitBehaviorChange(gt_EMPBlastReduction, null, "EMP", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: System Shockwave Reduction [1]
//--------------------------------------------------------------------------------------------------
bool gt_SystemShockwaveReduction1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon2") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwave1", 10.5);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwave1", 9.1);
        }
        else {
            UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwave1", 7.7);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SystemShockwaveReduction1_Init () {
    gt_SystemShockwaveReduction1 = TriggerCreate("gt_SystemShockwaveReduction1_Func");
    TriggerAddEventUnitBehaviorChange(gt_SystemShockwaveReduction1, null, "SystemShockwave1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: System Shockwave Reduction [2]
//--------------------------------------------------------------------------------------------------
bool gt_SystemShockwaveReduction2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon2") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwaveLevel2", 13.5);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwaveLevel2", 11.7);
        }
        else {
            UnitBehaviorSetDurationRemaining(EventUnit(), "SystemShockwaveLevel2", 9.9);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SystemShockwaveReduction2_Init () {
    gt_SystemShockwaveReduction2 = TriggerCreate("gt_SystemShockwaveReduction2_Func");
    TriggerAddEventUnitBehaviorChange(gt_SystemShockwaveReduction2, null, "SystemShockwaveLevel2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Reduction
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateReduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PhotonCannonBuilt"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated", 6.0);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated", 5.2);
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)) {
                UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated", 4.4);
            }
            else {
                UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated", 8.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateReduction_Init () {
    gt_DeactivateReduction = TriggerCreate("gt_DeactivateReduction_Func");
    TriggerAddEventUnitBehaviorChange(gt_DeactivateReduction, null, "Deactivated", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate [2] Reduction
//--------------------------------------------------------------------------------------------------
bool gt_Deactivate2Reduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PhotonCannonBuilt"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated2", 8.25);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated2", 7.15);
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)) {
                UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated2", 6.05);
            }
            else {
                UnitBehaviorSetDurationRemaining(EventUnit(), "Deactivated2", 11.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Deactivate2Reduction_Init () {
    gt_Deactivate2Reduction = TriggerCreate("gt_Deactivate2Reduction_Func");
    TriggerAddEventUnitBehaviorChange(gt_Deactivate2Reduction, null, "Deactivated2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind Control Reduction
//--------------------------------------------------------------------------------------------------
bool gt_MindControlReduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon2") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "ShadowArchonMindControl", 10.5);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "ShadowArchonMindControl", 9.1);
        }
        else {
            UnitBehaviorSetDurationRemaining(EventUnit(), "ShadowArchonMindControl", 7.7);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MindControlReduction_Init () {
    gt_MindControlReduction = TriggerCreate("gt_MindControlReduction_Func");
    TriggerAddEventUnitBehaviorChange(gt_MindControlReduction, null, "ShadowArchonMindControl", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind Control [2] Reduction
//--------------------------------------------------------------------------------------------------
bool gt_MindControl2Reduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon2") == true) || (UnitHasBehavior(EventUnit(), "PhotonCannon3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonCannon1") == true)) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "ShadowArchonMindControl2", 13.5);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "PhotonCannon2") == true)) {
            UnitBehaviorSetDurationRemaining(EventUnit(), "ShadowArchonMindControl2", 11.7);
        }
        else {
            UnitBehaviorSetDurationRemaining(EventUnit(), "ShadowArchonMindControl2", 9.9);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MindControl2Reduction_Init () {
    gt_MindControl2Reduction = TriggerCreate("gt_MindControl2Reduction_Func");
    TriggerAddEventUnitBehaviorChange(gt_MindControl2Reduction, null, "ShadowArchonMindControl2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Master Crafter
//--------------------------------------------------------------------------------------------------
bool gt_MasterCrafter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_material1;
    unit lv_material2;
    unit lv_material3;
    unit lv_material4;
    unit lv_material5;
    unit lv_material6;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("CraftFireStone", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn")) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "FireStone");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftAlchemicFuser", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "AlchemicFuserItem");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftForge", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            UnitRemove(lv_material3);
            UnitRemove(lv_material4);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "ForgePPT");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftPhotonCannon", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "PhotonCannonItem");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftReliquary", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material1) && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material1) && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "ReliquaryItem");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftTannery", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "Tannery");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftTechFacility", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "TechFacility");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftXelNagaTemple", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material5 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material4)) {
                lv_material6 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material1 != null) && (lv_material2 != null) && (lv_material3 != null) && (lv_material4 != null) && (lv_material5 != null) && (lv_material6 != null)) {
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            UnitRemove(lv_material3);
            UnitRemove(lv_material4);
            UnitRemove(lv_material5);
            UnitRemove(lv_material6);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "XelNagaTempleItem");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftPOD", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "POD");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftNexus", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGroupLoopCurrent() != lv_material4) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide")))) {
                lv_material5 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material5 != null) && (lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material5);
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "NexusItem");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    if ((EventUnitAbility() == AbilityCommand("CraftVault", 0))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            UnitInventoryCreate(EventUnit(), "VaultItem");
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MasterCrafter_Init () {
    gt_MasterCrafter = TriggerCreate("gt_MasterCrafter_Func");
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftXelNagaTemple", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftVault", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftTechFacility", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftTannery", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftReliquary", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftPhotonCannon", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftPOD", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftNexus", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftForge", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftFireStone", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_MasterCrafter, null, AbilityCommand("CraftAlchemicFuser", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cook Meat
//--------------------------------------------------------------------------------------------------
bool gt_CookMeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("ItemMedkit", c_playerAny, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ReplaceUnit(UnitGroupLoopCurrent(), "CookedMeat", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CookMeat_Init () {
    gt_CookMeat = TriggerCreate("gt_CookMeat_Func");
    TriggerAddEventUnitAbility(gt_CookMeat, null, AbilityCommand("CookMeat", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Strength
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerStrength_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerStrength", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_empowerStr[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerStrength_Init () {
    gt_EmpowerStrength = TriggerCreate("gt_EmpowerStrength_Func");
    TriggerAddEventUnitAbility(gt_EmpowerStrength, null, AbilityCommand("EmpowerStrength", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Agility
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerAgility_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerAgility", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_empowerAgi[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerAgility_Init () {
    gt_EmpowerAgility = TriggerCreate("gt_EmpowerAgility_Func");
    TriggerAddEventUnitAbility(gt_EmpowerAgility, null, AbilityCommand("EmpowerStrength2", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Intellect
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerIntellect_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerInt", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_empowerInt[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerIntellect_Init () {
    gt_EmpowerIntellect = TriggerCreate("gt_EmpowerIntellect_Func");
    TriggerAddEventUnitAbility(gt_EmpowerIntellect, null, AbilityCommand("EmpowerIntellect", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Magic
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerMagic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerMagic", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_empowerMagic[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerMagic_Init () {
    gt_EmpowerMagic = TriggerCreate("gt_EmpowerMagic_Func");
    TriggerAddEventUnitAbility(gt_EmpowerMagic, null, AbilityCommand("EmpowerMagic", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empower Fortitude
//--------------------------------------------------------------------------------------------------
bool gt_EmpowerFortitude_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "EmpowerFortitude", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_empowerFortitude[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmpowerFortitude_Init () {
    gt_EmpowerFortitude = TriggerCreate("gt_EmpowerFortitude_Func");
    TriggerAddEventUnitAbility(gt_EmpowerFortitude, null, AbilityCommand("EmpowerFortitude", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gift of Aiur
//--------------------------------------------------------------------------------------------------
bool gt_GiftofAiur_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "GiftofAiur", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_giftofAiur[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiftofAiur_Init () {
    gt_GiftofAiur = TriggerCreate("gt_GiftofAiur_Func");
    TriggerAddEventUnitAbility(gt_GiftofAiur, null, AbilityCommand("GiftofAiur", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gift of XelNaga
//--------------------------------------------------------------------------------------------------
bool gt_GiftofXelNaga_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_hero[EventPlayer()], "GiftofXelNaga", EventUnit(), 1);
    SoundPlayOnUnit(SoundLink("EmpowerSound", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    gv_giftofXelNaga[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiftofXelNaga_Init () {
    gt_GiftofXelNaga = TriggerCreate("gt_GiftofXelNaga_Func");
    TriggerAddEventUnitAbility(gt_GiftofXelNaga, null, AbilityCommand("GiftofXelNaga", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Post-Noob Death
//--------------------------------------------------------------------------------------------------
bool gt_HeroPostNoobDeath_Func (bool testConds, bool runActions) {
    int auto0B857A16_ae;
    int auto0B857A16_ai;
    int auto41F82342_ae;
    int auto41F82342_ai;

    // Variable Declarations
    int lv_counter;
    int lv_counter2;
    int lv_bounty;
    bool lv_bountyTargetFound;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "QuitHero") == false))) {
            return false;
        }

        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_noobTime) == 0.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_remainingTeams, UnitGetOwner(EventUnit())) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoundSoul", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
    }

    libNtve_gf_SetDialogItemText(gv_playerstatus[UnitGetOwner(EventUnit())], StringExternal("Param/Value/5F14F2D3"), PlayerGroupAll());
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(EventUnit()) == "PreserverC") || (UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "Thief") || (UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "Techie") || (UnitGetType(EventUnit()) == "Voidmancer"))) {
            gv_kills[UnitGetOwner(UnitGroupLoopCurrent())] += 1;
            libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(UnitGroupLoopCurrent())], (IntToText(gv_kills[UnitGetOwner(UnitGroupLoopCurrent())]) + (StringExternal("Param/Value/CB30A5D6") + IntToText(gv_deaths[UnitGetOwner(UnitGroupLoopCurrent())]))), PlayerGroupAll());
            if ((gv_acceleratedModeEnabled == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 200.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 2);
                TextTagCreate(StringExternal("Param/Value/8775E0A9"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            else {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 100.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 1);
                TextTagCreate(StringExternal("Param/Value/F0BA87E4"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
        }
        else {
            gv_kills[UnitGetOwner(UnitGroupLoopCurrent())] += 1;
            libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(UnitGroupLoopCurrent())], (IntToText(gv_kills[UnitGetOwner(UnitGroupLoopCurrent())]) + (StringExternal("Param/Value/27FE2C59") + IntToText(gv_deaths[UnitGetOwner(UnitGroupLoopCurrent())]))), PlayerGroupAll());
            if ((gv_acceleratedModeEnabled == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 500.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 6);
                TextTagCreate(StringExternal("Param/Value/57B4F3F3"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            else {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 250.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 3);
                TextTagCreate(StringExternal("Param/Value/87FA3271"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
        }
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitIsHidden(EventUnit()) == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/9CEC7C9D"));
    }

    auto0B857A16_ae = 12;
    auto0B857A16_ai = 1;
    lv_counter = 1;
    for ( ; ( (auto0B857A16_ai >= 0 && lv_counter <= auto0B857A16_ae) || (auto0B857A16_ai <= 0 && lv_counter >= auto0B857A16_ae) ) ; lv_counter += auto0B857A16_ai ) {
        if ((EventUnit() == gv_bountyTarget[lv_counter])) {
            lv_bountyTargetFound = true;
            UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(gv_assassin[lv_counter]), c_unitAllianceAlly, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 25);
                if ((UnitGroupLoopCurrent() == gv_assassin[lv_counter])) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 50);
                }

            }
            UnitGroupLoopEnd();
        }

    }
    if ((lv_bountyTargetFound == false)) {
        auto41F82342_ae = 12;
        auto41F82342_ai = 1;
        lv_counter2 = 1;
        for ( ; ( (auto41F82342_ai >= 0 && lv_counter2 <= auto41F82342_ae) || (auto41F82342_ai <= 0 && lv_counter2 >= auto41F82342_ae) ) ; lv_counter2 += auto41F82342_ai ) {
            if ((EventUnit() == gv_bountyTarget2[lv_counter2])) {
                UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(gv_assassin[lv_counter2]), c_unitAllianceAlly, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 50);
                    if ((UnitGroupLoopCurrent() == gv_assassin[lv_counter2])) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 100);
                    }

                }
                UnitGroupLoopEnd();
            }

        }
    }

    libNtve_gf_ShowHideUnit(gv_hero[UnitGetOwner(EventUnit())], false);
    UnitRevive(gv_hero[UnitGetOwner(EventUnit())]);
    UnitXPGainEnable(gv_hero[UnitGetOwner(EventUnit())], null, false);
    UnitSetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "DeadHero", gv_hero[UnitGetOwner(EventUnit())], 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGetType(UnitGroupLoopCurrent()) == "ChosenElder")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "DeadAlly", gv_hero[UnitGetOwner(EventUnit())], 1);
        }

    }
    UnitGroupLoopEnd();
    if ((UnitHasBehavior(EventUnit(), "CalloftheVoid1") == true)) {
        UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid1", 1);
        UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid2", gv_hero[UnitGetOwner(EventUnit())], 1);
    }
    else {
        if ((UnitHasBehavior(EventUnit(), "CalloftheVoid2") == true)) {
            UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid2", 1);
            UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid3", gv_hero[UnitGetOwner(EventUnit())], 1);
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "CalloftheVoid3") == true)) {
                UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid3", 1);
                UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid4", gv_hero[UnitGetOwner(EventUnit())], 1);
            }
            else {
                if ((UnitHasBehavior(EventUnit(), "CalloftheVoid4") == true)) {
                    UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid4", 1);
                    UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid5", gv_hero[UnitGetOwner(EventUnit())], 1);
                }
                else {
                    if ((UnitHasBehavior(EventUnit(), "CalloftheVoid5") == true)) {
                        UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid5", 1);
                        UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid6", gv_hero[UnitGetOwner(EventUnit())], 1);
                    }
                    else {
                        if ((UnitHasBehavior(EventUnit(), "CalloftheVoid6") == true)) {
                            UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid6", 1);
                            UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid7", gv_hero[UnitGetOwner(EventUnit())], 1);
                        }
                        else {
                            if ((UnitHasBehavior(EventUnit(), "CalloftheVoid7") == true)) {
                                UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid7", 1);
                                UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid8", gv_hero[UnitGetOwner(EventUnit())], 1);
                            }
                            else {
                                if ((UnitHasBehavior(EventUnit(), "CalloftheVoid8") == true)) {
                                    UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid8", 1);
                                    UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid9", gv_hero[UnitGetOwner(EventUnit())], 1);
                                }
                                else {
                                    if ((UnitHasBehavior(EventUnit(), "CalloftheVoid9") == true)) {
                                        UnitBehaviorRemove(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid9", 1);
                                        UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid10", gv_hero[UnitGetOwner(EventUnit())], 1);
                                    }
                                    else {
                                        if ((UnitHasBehavior(EventUnit(), "CalloftheVoid10") == true)) {
                                        }
                                        else {
                                            UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "CalloftheVoid1", gv_hero[UnitGetOwner(EventUnit())], 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    gv_deadHero[UnitGetOwner(EventUnit())] = true;
    gv_deaths[UnitGetOwner(EventUnit())] += 1;
    libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(EventUnit())], (IntToText(gv_kills[UnitGetOwner(EventUnit())]) + (StringExternal("Param/Value/3C02C3A1") + IntToText(gv_deaths[UnitGetOwner(EventUnit())]))), PlayerGroupAll());
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroPostNoobDeath_Init () {
    gt_HeroPostNoobDeath = TriggerCreate("gt_HeroPostNoobDeath_Func");
    TriggerEnable(gt_HeroPostNoobDeath, false);
    TriggerAddEventUnitDied(gt_HeroPostNoobDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Post-Noob Death Hardcore
//--------------------------------------------------------------------------------------------------
bool gt_HeroPostNoobDeathHardcore_Func (bool testConds, bool runActions) {
    int auto66B71C65_ae;
    int auto66B71C65_ai;
    int autoD7D8FB5F_ae;
    int autoD7D8FB5F_ai;

    // Variable Declarations
    int lv_counter;
    int lv_counter2;
    int lv_bounty;
    bool lv_bountyTargetFound;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_noobTime) == 0.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_remainingTeams, UnitGetOwner(EventUnit())) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BoundSoul", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
    }

    libNtve_gf_SetDialogItemText(gv_playerstatus[UnitGetOwner(EventUnit())], StringExternal("Param/Value/1B234EA6"), PlayerGroupAll());
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(EventUnit()) == "PreserverC") || (UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "Thief") || (UnitGetType(EventUnit()) == "Zealot") || (UnitGetType(EventUnit()) == "Techie") || (UnitGetType(EventUnit()) == "Voidmancer"))) {
            gv_kills[UnitGetOwner(UnitGroupLoopCurrent())] += 1;
            libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(UnitGroupLoopCurrent())], (IntToText(gv_kills[UnitGetOwner(UnitGroupLoopCurrent())]) + (StringExternal("Param/Value/BDFC4F6E") + IntToText(gv_deaths[UnitGetOwner(UnitGroupLoopCurrent())]))), PlayerGroupAll());
            if ((gv_acceleratedModeEnabled == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 200.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 2);
                TextTagCreate(StringExternal("Param/Value/641EF63E"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            else {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 100.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 1);
                TextTagCreate(StringExternal("Param/Value/C990268A"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
        }
        else {
            gv_kills[UnitGetOwner(UnitGroupLoopCurrent())] += 1;
            libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(UnitGroupLoopCurrent())], (IntToText(gv_kills[UnitGetOwner(UnitGroupLoopCurrent())]) + (StringExternal("Param/Value/871AD521") + IntToText(gv_deaths[UnitGetOwner(UnitGroupLoopCurrent())]))), PlayerGroupAll());
            if ((gv_acceleratedModeEnabled == true)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 500.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 6);
                TextTagCreate(StringExternal("Param/Value/7A463E4F"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
            else {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + (gv_heroLevel[UnitGetOwner(EventUnit())] * 250.0)));
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 3);
                TextTagCreate(StringExternal("Param/Value/C280EF31"), 28, UnitGetPosition(UnitGroupLoopCurrent()), 2.0, true, true, PlayerGroupAll());
                TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            }
        }
    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitIsHidden(EventUnit()) == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/734F3F54"));
    }

    auto66B71C65_ae = 12;
    auto66B71C65_ai = 1;
    lv_counter = 0;
    for ( ; ( (auto66B71C65_ai >= 0 && lv_counter <= auto66B71C65_ae) || (auto66B71C65_ai <= 0 && lv_counter >= auto66B71C65_ae) ) ; lv_counter += auto66B71C65_ai ) {
        if ((EventUnit() == gv_bountyTarget[lv_counter])) {
            lv_bountyTargetFound = true;
            UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(gv_assassin[lv_counter]), c_unitAllianceAlly, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 25);
                if ((UnitGroupLoopCurrent() == gv_assassin[lv_counter])) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 50);
                }

            }
            UnitGroupLoopEnd();
        }

    }
    if ((lv_bountyTargetFound == false)) {
        autoD7D8FB5F_ae = 12;
        autoD7D8FB5F_ai = 1;
        lv_counter = 0;
        for ( ; ( (autoD7D8FB5F_ai >= 0 && lv_counter <= autoD7D8FB5F_ae) || (autoD7D8FB5F_ai <= 0 && lv_counter >= autoD7D8FB5F_ae) ) ; lv_counter += autoD7D8FB5F_ai ) {
            if ((EventUnit() == gv_bountyTarget2[lv_counter2])) {
                UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(gv_assassin[lv_counter2]), c_unitAllianceAlly, RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 50);
                    if ((UnitGroupLoopCurrent() == gv_assassin[lv_counter2])) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, 100);
                    }

                }
                UnitGroupLoopEnd();
            }

        }
    }

    libNtve_gf_ShowHideUnit(gv_hero[UnitGetOwner(EventUnit())], false);
    UnitRevive(gv_hero[UnitGetOwner(EventUnit())]);
    UnitSetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_hero[UnitGetOwner(EventUnit())], c_unitPropEnergyPercent, 100.0);
    UnitXPGainEnable(gv_hero[UnitGetOwner(EventUnit())], null, false);
    UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "DeadHero", gv_hero[UnitGetOwner(EventUnit())], 1);
    UnitBehaviorAdd(gv_hero[UnitGetOwner(EventUnit())], "HardcoreDeath", gv_hero[UnitGetOwner(EventUnit())], 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGetType(UnitGroupLoopCurrent()) == "ChosenElder")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "DeadAlly", gv_hero[UnitGetOwner(EventUnit())], 1);
        }

    }
    UnitGroupLoopEnd();
    gv_deadHero[UnitGetOwner(EventUnit())] = true;
    gv_deaths[UnitGetOwner(EventUnit())] += 1;
    libNtve_gf_SetDialogItemText(gv_playerKD[UnitGetOwner(EventUnit())], (IntToText(gv_kills[UnitGetOwner(EventUnit())]) + (StringExternal("Param/Value/2F26308F") + IntToText(gv_deaths[UnitGetOwner(EventUnit())]))), PlayerGroupAll());
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSetTo, 100);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroPostNoobDeathHardcore_Init () {
    gt_HeroPostNoobDeathHardcore = TriggerCreate("gt_HeroPostNoobDeathHardcore_Func");
    TriggerEnable(gt_HeroPostNoobDeathHardcore, false);
    TriggerAddEventUnitDied(gt_HeroPostNoobDeathHardcore, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Gain
//--------------------------------------------------------------------------------------------------
bool gt_LevelGain_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_hero[0]) || (EventUnit() == gv_hero[1]) || (EventUnit() == gv_hero[2]) || (EventUnit() == gv_hero[3]) || (EventUnit() == gv_hero[4]) || (EventUnit() == gv_hero[5]) || (EventUnit() == gv_hero[6]) || (EventUnit() == gv_hero[7]) || (EventUnit() == gv_hero[8]) || (EventUnit() == gv_hero[9]) || (EventUnit() == gv_hero[10]) || (EventUnit() == gv_hero[11]) || (EventUnit() == gv_hero[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_heroLevel[UnitGetOwner(EventUnit())] = (gv_heroLevel[UnitGetOwner(EventUnit())] + 1);
    ActorCreate(ActorScopeFromUnit(EventUnit()), "LevelUpVisual", null, null, null);
    libNtve_gf_CreateActorAtPoint("LevelUpSound", UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelGain_Init () {
    gt_LevelGain = TriggerCreate("gt_LevelGain_Func");
    TriggerAddEventUnitGainLevel(gt_LevelGain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Tower Death
//--------------------------------------------------------------------------------------------------
bool gt_VoidTowerDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidTowerBuilt"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_voidTowerInUse, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentlyRessurectingHero[UnitGetOwner(EventUnit())] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTowerDeath_Init () {
    gt_VoidTowerDeath = TriggerCreate("gt_VoidTowerDeath_Func");
    TriggerAddEventUnitDied(gt_VoidTowerDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Tower Built
//--------------------------------------------------------------------------------------------------
bool gt_VoidTowerBuilt_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_deadHero[EventPlayer()] == true) && (gv_currentlyRessurectingHero[EventPlayer()] == false)) {
        gv_currentlyRessurectingHero[EventPlayer()] = true;
        UnitSetOwner(EventUnit(), EventPlayer(), false);
        UnitGroupAdd(gv_voidTowerInUse, EventUnit());
    }
    else {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTowerBuilt_Init () {
    gt_VoidTowerBuilt = TriggerCreate("gt_VoidTowerBuilt_Func");
    TriggerAddEventUnitAbility(gt_VoidTowerBuilt, null, AbilityCommand("ResurrectHero", 0), c_unitAbilStageQueue, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Tower Complete
//--------------------------------------------------------------------------------------------------
bool gt_VoidTowerComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_deadHero[EventPlayer()] == true)) {
        UnitGroupLoopBegin(UnitGroup("BoundSoul", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitBehaviorRemove(gv_hero[EventPlayer()], "DeadHero", 1);
        UnitXPGainEnable(gv_hero[EventPlayer()], null, true);
        UnitGroupRemove(gv_voidTowerInUse, EventUnit());
        UnitSetPropertyFixed(gv_hero[EventPlayer()], c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_hero[EventPlayer()], c_unitPropEnergyPercent, 100.0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 100);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
        libNtve_gf_ShowHideUnit(gv_hero[EventPlayer()], true);
        UnitSetPosition(gv_hero[EventPlayer()], UnitGetPosition(EventUnit()), false);
        UnitBehaviorAdd(gv_hero[EventPlayer()], "RawMeatCounter0", gv_hero[EventPlayer()], 1);
        gv_deadHero[EventPlayer()] = false;
        libNtve_gf_SetDialogItemText(gv_playerstatus[EventPlayer()], StringExternal("Param/Value/108C31C2"), PlayerGroupAll());
        gv_currentlyRessurectingHero[EventPlayer()] = false;
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(gv_hero[EventPlayer()]), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGetType(UnitGroupLoopCurrent()) == "ChosenElder")) {
                UnitBehaviorRemove(gv_hero[UnitGetOwner(UnitGroupLoopCurrent())], "DeadAlly", 1);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTowerComplete_Init () {
    gt_VoidTowerComplete = TriggerCreate("gt_VoidTowerComplete_Func");
    TriggerAddEventUnitAbility(gt_VoidTowerComplete, null, AbilityCommand("ResurrectHero", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Craft Items (Buttons)
//--------------------------------------------------------------------------------------------------
bool gt_CraftItemsButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_material1;
    unit lv_material2;
    unit lv_material3;
    unit lv_material4;
    unit lv_material5;
    unit lv_material6;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventButtonPressed() == "CraftFirePit")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn")) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "FireStone");
        }

    }

    if ((EventButtonPressed() == "CraftAlchemicFuser")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "AlchemicFuserItem");
        }

    }

    if ((EventButtonPressed() == "CraftForge")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            UnitRemove(lv_material3);
            UnitRemove(lv_material4);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "ForgePPT");
        }

    }

    if ((EventButtonPressed() == "CraftPhotonCannon")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "PhotonCannonItem");
        }

    }

    if ((EventButtonPressed() == "CraftReliquary")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material1) && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_material1) && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "ReliquaryItem");
        }

    }

    if ((EventButtonPressed() == "CraftTannery")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "Tannery");
        }

    }

    if ((EventButtonPressed() == "CraftTechFacility")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "TechFacility");
        }

    }

    if ((EventButtonPressed() == "CraftXelNagaTemple")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1) && (UnitGroupLoopCurrent() != lv_material3)) {
                lv_material5 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_material2) && (UnitGroupLoopCurrent() != lv_material4)) {
                lv_material6 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material6 != null) && (lv_material5 != null) && (lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material6);
            UnitRemove(lv_material5);
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "XelNagaTempleItem");
        }

    }

    if ((EventButtonPressed() == "CraftPOD")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
                lv_material2 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material1)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "POD");
        }

    }

    if ((EventButtonPressed() == "CraftNexus")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGroupLoopCurrent() != lv_material4) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide")))) {
                lv_material5 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material5 != null) && (lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material5);
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "NexusItem");
        }

    }

    if ((EventButtonPressed() == "CraftVault")) {
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
                lv_material1 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
                lv_material2 = UnitGroupLoopCurrent();
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
                lv_material4 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitInventoryGroup(gv_hero[EventPlayer()]));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_material2)) {
                lv_material3 = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        if ((lv_material4 != null) && (lv_material3 != null) && (lv_material2 != null) && (lv_material1 != null)) {
            UnitRemove(lv_material4);
            UnitRemove(lv_material3);
            UnitRemove(lv_material1);
            UnitRemove(lv_material2);
            Wait(gv_craftingTime, c_timeGame);
            UnitInventoryCreate(gv_hero[EventPlayer()], "VaultItem");
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CraftItemsButtons_Init () {
    gt_CraftItemsButtons = TriggerCreate("gt_CraftItemsButtons_Func");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftAlchemicFuser");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftFirePit");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftForge");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftNexus");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftPOD");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftPhotonCannon");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftReliquary");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftTannery");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftTechFacility");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftVault");
    TriggerAddEventButtonPressed(gt_CraftItemsButtons, c_playerAny, "CraftXelNagaTemple");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Trap
//--------------------------------------------------------------------------------------------------
bool gt_VoidTrap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_emberthorn;
    unit lv_mineralBone;
    unit lv_mineral;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn")) {
            lv_emberthorn = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != lv_mineral) && ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_emberthorn != null) && (lv_mineral != null) && (lv_mineralBone != null)) {
        UnitRemove(lv_emberthorn);
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_mineral);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VoidTrap");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTrap_Init () {
    gt_VoidTrap = TriggerCreate("gt_VoidTrap_Func");
    TriggerAddEventUnitAbility(gt_VoidTrap, null, AbilityCommand("CraftVoidTrap", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bane Ignot Recipe
//--------------------------------------------------------------------------------------------------
bool gt_BaneIgnotRecipe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_banelingDust;
    unit lv_stone;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_banelingDust = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
            lv_stone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_banelingDust != null) && (lv_stone != null)) {
        UnitRemove(lv_banelingDust);
        UnitRemove(lv_stone);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "BaneIgnot");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaneIgnotRecipe_Init () {
    gt_BaneIgnotRecipe = TriggerCreate("gt_BaneIgnotRecipe_Func");
    TriggerAddEventUnitAbility(gt_BaneIgnotRecipe, null, AbilityCommand("ForgeBaneIgnot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Ignot Recipe
//--------------------------------------------------------------------------------------------------
bool gt_AiurIgnotRecipe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_baneIgnot;
    unit lv_baneIgnot2;
    unit lv_baneDust;
    unit lv_baneDust2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_baneDust = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_baneIgnot)) {
            lv_baneIgnot2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust") && (UnitGroupLoopCurrent() != lv_baneDust)) {
            lv_baneDust2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_baneIgnot != null) && (lv_baneIgnot2 != null) && (lv_baneDust != null) && (lv_baneDust2 != null)) {
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_baneIgnot2);
        UnitRemove(lv_baneDust);
        UnitRemove(lv_baneDust2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "AiurIgnot");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurIgnotRecipe_Init () {
    gt_AiurIgnotRecipe = TriggerCreate("gt_AiurIgnotRecipe_Func");
    TriggerAddEventUnitAbility(gt_AiurIgnotRecipe, null, AbilityCommand("ForgeAiurIgnot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storm Blade
//--------------------------------------------------------------------------------------------------
bool gt_StormBlade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aiurBlade;
    unit lv_voidCrystal;
    unit lv_spiritofWind;
    unit lv_spiritofWater;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurBlade")) {
            lv_aiurBlade = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpiritofWind")) {
            lv_spiritofWind = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpiritofWater")) {
            lv_spiritofWater = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_aiurBlade != null) && (lv_voidCrystal != null) && (lv_spiritofWind != null) && (lv_spiritofWater != null)) {
        UnitRemove(lv_aiurBlade);
        UnitRemove(lv_voidCrystal);
        UnitRemove(lv_spiritofWind);
        UnitRemove(lv_spiritofWater);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "StormBlade");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StormBlade_Init () {
    gt_StormBlade = TriggerCreate("gt_StormBlade_Func");
    TriggerAddEventUnitAbility(gt_StormBlade, null, AbilityCommand("CraftStormBlade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dusty Blade
//--------------------------------------------------------------------------------------------------
bool gt_DustyBlade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineralBone;
    unit lv_baneDust;
    unit lv_baneDust2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_baneDust = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust") && (UnitGroupLoopCurrent() != lv_baneDust)) {
            lv_baneDust2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineralBone != null) && (lv_baneDust != null) && (lv_baneDust2 != null)) {
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_baneDust);
        UnitRemove(lv_baneDust2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "DustyBlade");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DustyBlade_Init () {
    gt_DustyBlade = TriggerCreate("gt_DustyBlade_Func");
    TriggerAddEventUnitAbility(gt_DustyBlade, null, AbilityCommand("CraftDustyBlade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seer's Dagger
//--------------------------------------------------------------------------------------------------
bool gt_SeersDagger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineralBone;
    unit lv_magic;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic")) {
            lv_magic = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineralBone != null) && (lv_magic != null)) {
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_magic);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "SeersDagger");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeersDagger_Init () {
    gt_SeersDagger = TriggerCreate("gt_SeersDagger_Func");
    TriggerAddEventUnitAbility(gt_SeersDagger, null, AbilityCommand("CraftSeersDagger", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seer's Bane Dagger
//--------------------------------------------------------------------------------------------------
bool gt_SeersBaneDagger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_magic;
    unit lv_magic2;
    unit lv_baneIgnot;
    unit lv_mineralBone;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic")) {
            lv_magic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic") && (UnitGroupLoopCurrent() != lv_magic)) {
            lv_magic2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineralBone != null) && (lv_baneIgnot != null) && (lv_magic != null) && (lv_magic2 != null)) {
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_magic);
        UnitRemove(lv_magic2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "SeersBaneDagger");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeersBaneDagger_Init () {
    gt_SeersBaneDagger = TriggerCreate("gt_SeersBaneDagger_Func");
    TriggerAddEventUnitAbility(gt_SeersBaneDagger, null, AbilityCommand("CraftSeersBaneDagger", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seer's Aiur Dagger
//--------------------------------------------------------------------------------------------------
bool gt_SeersAiurDagger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_magic;
    unit lv_magic2;
    unit lv_magic3;
    unit lv_aiurIgnot;
    unit lv_mineralBone;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic")) {
            lv_magic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic") && (UnitGroupLoopCurrent() != lv_magic)) {
            lv_magic2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic") && (UnitGroupLoopCurrent() != lv_magic) && (UnitGroupLoopCurrent() != lv_magic2)) {
            lv_magic3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_magic != null) && (lv_magic2 != null) && (lv_magic3 != null) && (lv_aiurIgnot != null) && (lv_mineralBone != null)) {
        UnitRemove(lv_magic);
        UnitRemove(lv_magic2);
        UnitRemove(lv_magic3);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_mineralBone);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "SeersAiurDagger");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeersAiurDagger_Init () {
    gt_SeersAiurDagger = TriggerCreate("gt_SeersAiurDagger_Func");
    TriggerAddEventUnitAbility(gt_SeersAiurDagger, null, AbilityCommand("CraftSeersAiurDagger", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stone Blade
//--------------------------------------------------------------------------------------------------
bool gt_StoneBlade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineralBone;
    unit lv_stone;
    unit lv_stone2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
            lv_stone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_stone)) {
            lv_stone2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineralBone != null) && (lv_stone != null) && (lv_stone2 != null)) {
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_stone);
        UnitRemove(lv_stone2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "StoneBlade");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoneBlade_Init () {
    gt_StoneBlade = TriggerCreate("gt_StoneBlade_Func");
    TriggerAddEventUnitAbility(gt_StoneBlade, null, AbilityCommand("CraftStoneBlade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bane Blade
//--------------------------------------------------------------------------------------------------
bool gt_BaneBlade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineralBone;
    unit lv_baneIgnot;
    unit lv_baneIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_baneIgnot)) {
            lv_baneIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineralBone != null) && (lv_baneIgnot != null) && (lv_baneIgnot2 != null)) {
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_baneIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "BaneBlade");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaneBlade_Init () {
    gt_BaneBlade = TriggerCreate("gt_BaneBlade_Func");
    TriggerAddEventUnitAbility(gt_BaneBlade, null, AbilityCommand("CraftBaneBlade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Blade
//--------------------------------------------------------------------------------------------------
bool gt_AiurBlade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineralBone;
    unit lv_aiurIgnot;
    unit lv_aiurIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_mineralBone = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot") && (UnitGroupLoopCurrent() != lv_aiurIgnot)) {
            lv_aiurIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineralBone != null) && (lv_aiurIgnot != null) && (lv_aiurIgnot2 != null)) {
        UnitRemove(lv_mineralBone);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_aiurIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "AiurBlade");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurBlade_Init () {
    gt_AiurBlade = TriggerCreate("gt_AiurBlade_Func");
    TriggerAddEventUnitAbility(gt_AiurBlade, null, AbilityCommand("CraftAiurBlade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spear
//--------------------------------------------------------------------------------------------------
bool gt_Spear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stone;
    unit lv_stickBone;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
            lv_stone = UnitGroupLoopCurrent();
        }

        if (((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") || (UnitGetType(UnitGroupLoopCurrent()) == "Bone"))) {
            lv_stickBone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_stone != null) && (lv_stickBone != null)) {
        UnitRemove(lv_stone);
        UnitRemove(lv_stickBone);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "Spear");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spear_Init () {
    gt_Spear = TriggerCreate("gt_Spear_Func");
    TriggerAddEventUnitAbility(gt_Spear, null, AbilityCommand("CraftSpear", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield
//--------------------------------------------------------------------------------------------------
bool gt_Shield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hide;
    unit lv_mineral;
    unit lv_mineral2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakHide"))) {
            lv_hide = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_mineral)) {
            lv_mineral2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_hide != null) && (lv_mineral != null) && (lv_mineral2 != null)) {
        UnitRemove(lv_hide);
        UnitRemove(lv_mineral);
        UnitRemove(lv_mineral2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "Shield");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shield_Init () {
    gt_Shield = TriggerCreate("gt_Shield_Func");
    TriggerAddEventUnitAbility(gt_Shield, null, AbilityCommand("CraftShield", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bane Shield
//--------------------------------------------------------------------------------------------------
bool gt_BaneShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shield;
    unit lv_baneIgnot;
    unit lv_baneIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Shield")) {
            lv_shield = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_baneIgnot)) {
            lv_baneIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_shield != null) && (lv_baneIgnot != null) && (lv_baneIgnot2 != null)) {
        UnitRemove(lv_shield);
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_baneIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "BaneShield");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaneShield_Init () {
    gt_BaneShield = TriggerCreate("gt_BaneShield_Func");
    TriggerAddEventUnitAbility(gt_BaneShield, null, AbilityCommand("CraftBaneShield", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Shield
//--------------------------------------------------------------------------------------------------
bool gt_AiurShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shield;
    unit lv_aiurIgnot;
    unit lv_aiurIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneShield")) {
            lv_shield = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot") && (UnitGroupLoopCurrent() != lv_aiurIgnot)) {
            lv_aiurIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_shield != null) && (lv_aiurIgnot != null) && (lv_aiurIgnot2 != null)) {
        UnitRemove(lv_shield);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_aiurIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "AiurShield");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurShield_Init () {
    gt_AiurShield = TriggerCreate("gt_AiurShield_Func");
    TriggerAddEventUnitAbility(gt_AiurShield, null, AbilityCommand("CraftAiurShield", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield of the Void
//--------------------------------------------------------------------------------------------------
bool gt_ShieldoftheVoid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boneShield;
    unit lv_darkMatter;
    unit lv_darkMatter2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BoneShield")) {
            lv_boneShield = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_boneShield != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
        UnitRemove(lv_boneShield);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "ShieldoftheVoid");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldoftheVoid_Init () {
    gt_ShieldoftheVoid = TriggerCreate("gt_ShieldoftheVoid_Func");
    TriggerAddEventUnitAbility(gt_ShieldoftheVoid, null, AbilityCommand("CraftShieldoftheVoid", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Craft Corrupted
//--------------------------------------------------------------------------------------------------
bool gt_CraftCorrupted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_done;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "StormBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "StoneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "DustyBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersBaneDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersAiurDagger"))) {
            lv_done = true;
            TriggerExecute(gt_CorruptedWeapon, true, true);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_done == false) && ((UnitGetType(UnitGroupLoopCurrent()) == "PhaseCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinCoat"))) {
            lv_done = true;
            TriggerExecute(gt_CorruptedArmor, true, true);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_done == false) && ((UnitGetType(UnitGroupLoopCurrent()) == "AiurGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "GlovesofInsanity") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinGloves"))) {
            lv_done = true;
            TriggerExecute(gt_CorruptedGloves, true, true);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_done == false) && ((UnitGetType(UnitGroupLoopCurrent()) == "AiurBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "HydroBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinBoots"))) {
            lv_done = true;
            TriggerExecute(gt_CorruptedBoots, true, true);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_done == false) && ((UnitGetType(UnitGroupLoopCurrent()) == "MultiDimensionalSatchel"))) {
            lv_done = true;
            TriggerExecute(gt_CorruptedBag, true, true);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CraftCorrupted_Init () {
    gt_CraftCorrupted = TriggerCreate("gt_CraftCorrupted_Func");
    TriggerAddEventUnitAbility(gt_CraftCorrupted, null, AbilityCommand("ForgeCorruptedItem", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrupted Armor
//--------------------------------------------------------------------------------------------------
bool gt_CorruptedArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coat;
    unit lv_shardofCorruption;
    unit lv_darkMatter;
    unit lv_darkMatter2;
    unit lv_darkMatter3;
    unit lv_darkMatter4;
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 1);
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "PhaseCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneArmor") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatQuilgor") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinCoat"))) {
            lv_coat = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShardofCorruption")) {
            lv_shardofCorruption = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2)) {
            lv_darkMatter3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2) && (UnitGroupLoopCurrent() != lv_darkMatter3)) {
            lv_darkMatter4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_coat != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null) && (lv_darkMatter4 != null)) {
        UnitRemove(lv_coat);
        UnitRemove(lv_shardofCorruption);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        UnitRemove(lv_darkMatter3);
        UnitRemove(lv_darkMatter4);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        if ((lv_rng == 1)) {
            UnitInventoryCreate(EventUnit(), "ArmoroftheGods3");
        }
        else {
            UnitInventoryCreate(EventUnit(), "DeathsEmbrace3");
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }
    else {
        if ((lv_coat != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null)) {
            UnitRemove(lv_coat);
            UnitRemove(lv_shardofCorruption);
            UnitRemove(lv_darkMatter);
            UnitRemove(lv_darkMatter2);
            UnitRemove(lv_darkMatter3);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            if ((lv_rng == 1)) {
                UnitInventoryCreate(EventUnit(), "ArmoroftheGods2");
            }
            else {
                UnitInventoryCreate(EventUnit(), "DeathsEmbrace2");
            }
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }
        else {
            if ((lv_coat != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
                UnitRemove(lv_coat);
                UnitRemove(lv_shardofCorruption);
                UnitRemove(lv_darkMatter);
                UnitRemove(lv_darkMatter2);
                Wait(gv_craftingTime, c_timeGame);
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                if ((lv_rng == 1)) {
                    UnitInventoryCreate(EventUnit(), "ArmoroftheGods1");
                }
                else {
                    UnitInventoryCreate(EventUnit(), "DeathsEmbrace1");
                }
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
            }
            else {
                if ((lv_coat != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null)) {
                    UnitRemove(lv_coat);
                    UnitRemove(lv_shardofCorruption);
                    UnitRemove(lv_darkMatter);
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    if ((lv_rng == 1)) {
                        UnitInventoryCreate(EventUnit(), "ArmoroftheGods");
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "DeathsEmbrace");
                    }
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptedArmor_Init () {
    gt_CorruptedArmor = TriggerCreate("gt_CorruptedArmor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrupted Weapon
//--------------------------------------------------------------------------------------------------
bool gt_CorruptedWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_weapon;
    unit lv_shardofCorruption;
    unit lv_darkMatter;
    unit lv_darkMatter2;
    unit lv_darkMatter3;
    unit lv_darkMatter4;
    int lv_rng;

    // Variable Initialization
    lv_rng = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "StormBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "DustyBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "StoneBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "AiurBlade") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersBaneDagger") || (UnitGetType(UnitGroupLoopCurrent()) == "SeersAiurDagger"))) {
            lv_weapon = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShardofCorruption")) {
            lv_shardofCorruption = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2)) {
            lv_darkMatter3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2) && (UnitGroupLoopCurrent() != lv_darkMatter3)) {
            lv_darkMatter4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if (((UnitGetType(lv_weapon) == "SeersDagger") || (UnitGetType(lv_weapon) == "SeersBaneDagger") || (UnitGetType(lv_weapon) == "SeersAiurDagger"))) {
        if ((UnitGetType(lv_weapon) == "SeersAiurDagger")) {
            lv_rng = RandomInt(1, 8);
        }
        else {
            lv_rng = RandomInt(1, 9);
        }
    }
    else {
        if (((UnitGetType(lv_weapon) == "StormBlade") || (UnitGetType(lv_weapon) == "AiurBlade"))) {
            lv_rng = RandomInt(3, 10);
        }
        else {
            lv_rng = RandomInt(2, 10);
        }
    }
    if ((lv_weapon != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null) && (lv_darkMatter4 != null)) {
        UnitRemove(lv_weapon);
        UnitRemove(lv_shardofCorruption);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        UnitRemove(lv_darkMatter3);
        UnitRemove(lv_darkMatter4);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        if ((lv_rng <= 5)) {
            UnitInventoryCreate(EventUnit(), "VoidDagger3");
        }
        else {
            UnitInventoryCreate(EventUnit(), "BladeOfDarkness3");
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }
    else {
        if ((lv_weapon != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null)) {
            UnitRemove(lv_weapon);
            UnitRemove(lv_shardofCorruption);
            UnitRemove(lv_darkMatter);
            UnitRemove(lv_darkMatter2);
            UnitRemove(lv_darkMatter3);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            if ((lv_rng <= 5)) {
                UnitInventoryCreate(EventUnit(), "VoidDagger2");
            }
            else {
                UnitInventoryCreate(EventUnit(), "BladeOfDarkness2");
            }
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }
        else {
            if ((lv_weapon != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
                UnitRemove(lv_weapon);
                UnitRemove(lv_shardofCorruption);
                UnitRemove(lv_darkMatter);
                UnitRemove(lv_darkMatter2);
                Wait(gv_craftingTime, c_timeGame);
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                if ((lv_rng <= 5)) {
                    UnitInventoryCreate(EventUnit(), "VoidDagger1");
                }
                else {
                    UnitInventoryCreate(EventUnit(), "BladeOfDarkness1");
                }
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
            }
            else {
                if ((lv_weapon != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null)) {
                    UnitRemove(lv_weapon);
                    UnitRemove(lv_shardofCorruption);
                    UnitRemove(lv_darkMatter);
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    if ((lv_rng <= 5)) {
                        UnitInventoryCreate(EventUnit(), "VoidDagger");
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "BladeOfDarkness");
                    }
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptedWeapon_Init () {
    gt_CorruptedWeapon = TriggerCreate("gt_CorruptedWeapon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrupted Boots
//--------------------------------------------------------------------------------------------------
bool gt_CorruptedBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boots;
    unit lv_shardofCorruption;
    unit lv_darkMatter;
    unit lv_darkMatter2;
    unit lv_darkMatter3;
    unit lv_darkMatter4;
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 1);
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "AiurBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "HydroBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsQuilgor") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinBoots"))) {
            lv_boots = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShardofCorruption")) {
            lv_shardofCorruption = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2)) {
            lv_darkMatter3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2) && (UnitGroupLoopCurrent() != lv_darkMatter3)) {
            lv_darkMatter4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_boots != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null) && (lv_darkMatter4 != null)) {
        UnitRemove(lv_boots);
        UnitRemove(lv_shardofCorruption);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        UnitRemove(lv_darkMatter3);
        UnitRemove(lv_darkMatter4);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        if ((lv_rng == 1)) {
            UnitInventoryCreate(EventUnit(), "BootsOfTheTraveler3");
        }
        else {
            UnitInventoryCreate(EventUnit(), "ShadowsStep3");
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }
    else {
        if ((lv_boots != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null)) {
            UnitRemove(lv_boots);
            UnitRemove(lv_shardofCorruption);
            UnitRemove(lv_darkMatter);
            UnitRemove(lv_darkMatter2);
            UnitRemove(lv_darkMatter3);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            if ((lv_rng == 1)) {
                UnitInventoryCreate(EventUnit(), "BootsOfTheTraveler2");
            }
            else {
                UnitInventoryCreate(EventUnit(), "ShadowsStep2");
            }
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }
        else {
            if ((lv_boots != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
                UnitRemove(lv_boots);
                UnitRemove(lv_shardofCorruption);
                UnitRemove(lv_darkMatter);
                UnitRemove(lv_darkMatter2);
                Wait(gv_craftingTime, c_timeGame);
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                if ((lv_rng == 1)) {
                    UnitInventoryCreate(EventUnit(), "BootsOfTheTraveler1");
                }
                else {
                    UnitInventoryCreate(EventUnit(), "ShadowsStep1");
                }
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
            }
            else {
                if ((lv_boots != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null)) {
                    UnitRemove(lv_boots);
                    UnitRemove(lv_shardofCorruption);
                    UnitRemove(lv_darkMatter);
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    if ((lv_rng == 1)) {
                        UnitInventoryCreate(EventUnit(), "BootsOfTheTraveler");
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "ShadowsStep");
                    }
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptedBoots_Init () {
    gt_CorruptedBoots = TriggerCreate("gt_CorruptedBoots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrupted Gloves
//--------------------------------------------------------------------------------------------------
bool gt_CorruptedGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gloves;
    unit lv_shardofCorruption;
    unit lv_darkMatter;
    unit lv_darkMatter2;
    unit lv_darkMatter3;
    unit lv_darkMatter4;
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 1);
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "AiurGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "GlovesofInsanity") || (UnitGetType(UnitGroupLoopCurrent()) == "BaneGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesQuilgor") || (UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinGloves"))) {
            lv_gloves = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShardofCorruption")) {
            lv_shardofCorruption = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2)) {
            lv_darkMatter3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2) && (UnitGroupLoopCurrent() != lv_darkMatter3)) {
            lv_darkMatter4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_gloves != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null) && (lv_darkMatter4 != null)) {
        UnitRemove(lv_gloves);
        UnitRemove(lv_shardofCorruption);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        UnitRemove(lv_darkMatter3);
        UnitRemove(lv_darkMatter4);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        if ((lv_rng == 1)) {
            UnitInventoryCreate(EventUnit(), "ChaoticGauntlets3");
        }
        else {
            UnitInventoryCreate(EventUnit(), "ClawsofAnguish3");
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }
    else {
        if ((lv_gloves != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null)) {
            UnitRemove(lv_gloves);
            UnitRemove(lv_shardofCorruption);
            UnitRemove(lv_darkMatter);
            UnitRemove(lv_darkMatter2);
            UnitRemove(lv_darkMatter3);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            if ((lv_rng == 1)) {
                UnitInventoryCreate(EventUnit(), "ChaoticGauntlets2");
            }
            else {
                UnitInventoryCreate(EventUnit(), "ClawsofAnguish2");
            }
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }
        else {
            if ((lv_gloves != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
                UnitRemove(lv_gloves);
                UnitRemove(lv_shardofCorruption);
                UnitRemove(lv_darkMatter);
                UnitRemove(lv_darkMatter2);
                Wait(gv_craftingTime, c_timeGame);
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                if ((lv_rng == 1)) {
                    UnitInventoryCreate(EventUnit(), "ChaoticGauntlets1");
                }
                else {
                    UnitInventoryCreate(EventUnit(), "ClawsofAnguish1");
                }
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
            }
            else {
                if ((lv_gloves != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null)) {
                    UnitRemove(lv_gloves);
                    UnitRemove(lv_shardofCorruption);
                    UnitRemove(lv_darkMatter);
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    if ((lv_rng == 1)) {
                        UnitInventoryCreate(EventUnit(), "ChaoticGauntlets");
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "ClawsOfAnguish");
                    }
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptedGloves_Init () {
    gt_CorruptedGloves = TriggerCreate("gt_CorruptedGloves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corrupted Bag
//--------------------------------------------------------------------------------------------------
bool gt_CorruptedBag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pouch;
    unit lv_shardofCorruption;
    unit lv_darkMatter;
    unit lv_darkMatter2;
    unit lv_darkMatter3;
    unit lv_darkMatter4;
    int lv_rng;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rng = RandomInt(0, 1);
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "MultiDimensionalSatchel"))) {
            lv_pouch = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShardofCorruption")) {
            lv_shardofCorruption = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2)) {
            lv_darkMatter3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter) && (UnitGroupLoopCurrent() != lv_darkMatter2) && (UnitGroupLoopCurrent() != lv_darkMatter3)) {
            lv_darkMatter4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_pouch != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null) && (lv_darkMatter4 != null)) {
        UnitRemove(lv_pouch);
        UnitRemove(lv_shardofCorruption);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        UnitRemove(lv_darkMatter3);
        UnitRemove(lv_darkMatter4);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        if ((lv_rng == 1)) {
            UnitInventoryCreate(EventUnit(), "cvalFF0000BagofHorrors3c");
        }
        else {
            UnitInventoryCreate(EventUnit(), "cvalFF0000WarlordsSatchel3c");
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }
    else {
        if ((lv_pouch != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null) && (lv_darkMatter3 != null)) {
            UnitRemove(lv_pouch);
            UnitRemove(lv_shardofCorruption);
            UnitRemove(lv_darkMatter);
            UnitRemove(lv_darkMatter2);
            UnitRemove(lv_darkMatter3);
            Wait(gv_craftingTime, c_timeGame);
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
            if ((lv_rng == 1)) {
                UnitInventoryCreate(EventUnit(), "cvalFF0000BagofHorrors2c");
            }
            else {
                UnitInventoryCreate(EventUnit(), "cvalFF0000WarlordsSatchel2c");
            }
            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
        }
        else {
            if ((lv_pouch != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
                UnitRemove(lv_pouch);
                UnitRemove(lv_shardofCorruption);
                UnitRemove(lv_darkMatter);
                UnitRemove(lv_darkMatter2);
                Wait(gv_craftingTime, c_timeGame);
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                if ((lv_rng == 1)) {
                    UnitInventoryCreate(EventUnit(), "cvalFF0000WarlordsSatchel1c");
                }
                else {
                    UnitInventoryCreate(EventUnit(), "cvalFF0000BagofHorrors1c");
                }
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
            }
            else {
                if ((lv_pouch != null) && (lv_shardofCorruption != null) && (lv_darkMatter != null)) {
                    UnitRemove(lv_pouch);
                    UnitRemove(lv_shardofCorruption);
                    UnitRemove(lv_darkMatter);
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    if ((lv_rng == 1)) {
                        UnitInventoryCreate(EventUnit(), "cvalFF0000BagofHorrorsc");
                    }
                    else {
                        UnitInventoryCreate(EventUnit(), "cvalFF0000WarlordsSatchelc");
                    }
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorruptedBag_Init () {
    gt_CorruptedBag = TriggerCreate("gt_CorruptedBag_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gloves of Insanity
//--------------------------------------------------------------------------------------------------
bool gt_GlovesofInsanity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gloves;
    unit lv_darkMatter;
    unit lv_darkMatter2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneGlovesQuilgor"))) {
            lv_gloves = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_gloves != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
        UnitRemove(lv_gloves);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "GlovesofInsanity");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlovesofInsanity_Init () {
    gt_GlovesofInsanity = TriggerCreate("gt_GlovesofInsanity_Func");
    TriggerAddEventUnitAbility(gt_GlovesofInsanity, null, AbilityCommand("CraftGlovesofInsanity", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phase Coat
//--------------------------------------------------------------------------------------------------
bool gt_PhaseCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coat;
    unit lv_darkMatter;
    unit lv_darkMatter2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneCoatQuilgor"))) {
            lv_coat = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_coat != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
        UnitRemove(lv_coat);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "PhaseCoat");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhaseCoat_Init () {
    gt_PhaseCoat = TriggerCreate("gt_PhaseCoat_Func");
    TriggerAddEventUnitAbility(gt_PhaseCoat, null, AbilityCommand("CraftPhaseCoat", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hydro Boots
//--------------------------------------------------------------------------------------------------
bool gt_HydroBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boots;
    unit lv_darkMatter;
    unit lv_darkMatter2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsKarak") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsLyote") || (UnitGetType(UnitGroupLoopCurrent()) == "BoneBootsQuilgor"))) {
            lv_boots = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_boots != null) && (lv_darkMatter != null) && (lv_darkMatter2 != null)) {
        UnitRemove(lv_boots);
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_darkMatter2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "HydroBoots");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HydroBoots_Init () {
    gt_HydroBoots = TriggerCreate("gt_HydroBoots_Func");
    TriggerAddEventUnitAbility(gt_HydroBoots, null, AbilityCommand("CraftHydroBoots", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Boots
//--------------------------------------------------------------------------------------------------
bool gt_AiurBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boots;
    unit lv_aiurIgnot;
    unit lv_aiurIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinBoots"))) {
            lv_boots = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot") && (UnitGroupLoopCurrent() != lv_aiurIgnot)) {
            lv_aiurIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_boots != null) && (lv_aiurIgnot != null) && (lv_aiurIgnot2 != null)) {
        UnitRemove(lv_boots);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_aiurIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "AiurBoots");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurBoots_Init () {
    gt_AiurBoots = TriggerCreate("gt_AiurBoots_Func");
    TriggerAddEventUnitAbility(gt_AiurBoots, null, AbilityCommand("CraftAiurBoots", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Gloves
//--------------------------------------------------------------------------------------------------
bool gt_AiurGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gloves;
    unit lv_aiurIgnot;
    unit lv_aiurIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinGloves"))) {
            lv_gloves = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot") && (UnitGroupLoopCurrent() != lv_aiurIgnot)) {
            lv_aiurIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_gloves != null) && (lv_aiurIgnot != null) && (lv_aiurIgnot2 != null)) {
        UnitRemove(lv_gloves);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_aiurIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "AiurGloves");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurGloves_Init () {
    gt_AiurGloves = TriggerCreate("gt_AiurGloves_Func");
    TriggerAddEventUnitAbility(gt_AiurGloves, null, AbilityCommand("CraftAiurGloves", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aiur Coat
//--------------------------------------------------------------------------------------------------
bool gt_AiurCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coat;
    unit lv_aiurIgnot;
    unit lv_aiurIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinCoat"))) {
            lv_coat = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot") && (UnitGroupLoopCurrent() != lv_aiurIgnot)) {
            lv_aiurIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_coat != null) && (lv_aiurIgnot != null) && (lv_aiurIgnot2 != null)) {
        UnitRemove(lv_coat);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_aiurIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "AiurArmor");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AiurCoat_Init () {
    gt_AiurCoat = TriggerCreate("gt_AiurCoat_Func");
    TriggerAddEventUnitAbility(gt_AiurCoat, null, AbilityCommand("CraftAiurCoat", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bane Boots
//--------------------------------------------------------------------------------------------------
bool gt_BaneBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boots;
    unit lv_baneIgnot;
    unit lv_baneIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinBoots"))) {
            lv_boots = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_baneIgnot)) {
            lv_baneIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_boots != null) && (lv_baneIgnot != null) && (lv_baneIgnot2 != null)) {
        UnitRemove(lv_boots);
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_baneIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "BaneBoots");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaneBoots_Init () {
    gt_BaneBoots = TriggerCreate("gt_BaneBoots_Func");
    TriggerAddEventUnitAbility(gt_BaneBoots, null, AbilityCommand("CraftBaneBoots", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bane Coat
//--------------------------------------------------------------------------------------------------
bool gt_BaneCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coat;
    unit lv_baneIgnot;
    unit lv_baneIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinCoat"))) {
            lv_coat = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_baneIgnot)) {
            lv_baneIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_coat != null) && (lv_baneIgnot != null) && (lv_baneIgnot2 != null)) {
        UnitRemove(lv_coat);
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_baneIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "BaneArmor");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaneCoat_Init () {
    gt_BaneCoat = TriggerCreate("gt_BaneCoat_Func");
    TriggerAddEventUnitAbility(gt_BaneCoat, null, AbilityCommand("CraftBaneCoat", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bane Gloves
//--------------------------------------------------------------------------------------------------
bool gt_BaneGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gloves;
    unit lv_baneIgnot;
    unit lv_baneIgnot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinGloves"))) {
            lv_gloves = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot") && (UnitGroupLoopCurrent() != lv_baneIgnot)) {
            lv_baneIgnot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_gloves != null) && (lv_baneIgnot != null) && (lv_baneIgnot2 != null)) {
        UnitRemove(lv_gloves);
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_baneIgnot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "BaneGloves");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaneGloves_Init () {
    gt_BaneGloves = TriggerCreate("gt_BaneGloves_Func");
    TriggerAddEventUnitAbility(gt_BaneGloves, null, AbilityCommand("CraftBaneGloves", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karak Skin Boots
//--------------------------------------------------------------------------------------------------
bool gt_KarakSkinBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_karak1;
    unit lv_karak2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide")) {
            lv_karak1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") && (UnitGroupLoopCurrent() != lv_karak1)) {
            lv_karak2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_karak1 != null) && (lv_karak2 != null)) {
        UnitRemove(lv_karak1);
        UnitRemove(lv_karak2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "KarakSkinBoots");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarakSkinBoots_Init () {
    gt_KarakSkinBoots = TriggerCreate("gt_KarakSkinBoots_Func");
    TriggerAddEventUnitAbility(gt_KarakSkinBoots, null, AbilityCommand("CraftKarakSkinBoots", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karak Skin Gloves
//--------------------------------------------------------------------------------------------------
bool gt_KarakSkinGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_karak1;
    unit lv_karak2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide")) {
            lv_karak1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") && (UnitGroupLoopCurrent() != lv_karak1)) {
            lv_karak2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_karak1 != null) && (lv_karak2 != null)) {
        UnitRemove(lv_karak1);
        UnitRemove(lv_karak2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "KarakSkinGloves");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarakSkinGloves_Init () {
    gt_KarakSkinGloves = TriggerCreate("gt_KarakSkinGloves_Func");
    TriggerAddEventUnitAbility(gt_KarakSkinGloves, null, AbilityCommand("CraftKarakSkinGloves", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karak Skin Coat
//--------------------------------------------------------------------------------------------------
bool gt_KarakSkinCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_karak1;
    unit lv_karak2;
    unit lv_karak3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide")) {
            lv_karak1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") && (UnitGroupLoopCurrent() != lv_karak1)) {
            lv_karak2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") && (UnitGroupLoopCurrent() != lv_karak1) && (UnitGroupLoopCurrent() != lv_karak2)) {
            lv_karak3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_karak1 != null) && (lv_karak2 != null) && (lv_karak3 != null)) {
        UnitRemove(lv_karak1);
        UnitRemove(lv_karak2);
        UnitRemove(lv_karak3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "KarakSkinCoat");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarakSkinCoat_Init () {
    gt_KarakSkinCoat = TriggerCreate("gt_KarakSkinCoat_Func");
    TriggerAddEventUnitAbility(gt_KarakSkinCoat, null, AbilityCommand("CraftKarakSkinCoat", 0), c_abilEffectStageFinish, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadak Skin Coat
//--------------------------------------------------------------------------------------------------
bool gt_UrsadakSkinCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ursadak1;
    unit lv_ursadak2;
    unit lv_ursadak3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide")) {
            lv_ursadak1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide") && (UnitGroupLoopCurrent() != lv_ursadak1)) {
            lv_ursadak2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide") && (UnitGroupLoopCurrent() != lv_ursadak1) && (UnitGroupLoopCurrent() != lv_ursadak2)) {
            lv_ursadak3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_ursadak1 != null) && (lv_ursadak2 != null) && (lv_ursadak3 != null)) {
        UnitRemove(lv_ursadak1);
        UnitRemove(lv_ursadak2);
        UnitRemove(lv_ursadak3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "QuilgorSkinCoat");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadakSkinCoat_Init () {
    gt_UrsadakSkinCoat = TriggerCreate("gt_UrsadakSkinCoat_Func");
    TriggerAddEventUnitAbility(gt_UrsadakSkinCoat, null, AbilityCommand("CraftQuilgorSkinCoat", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadak Skin Gloves
//--------------------------------------------------------------------------------------------------
bool gt_UrsadakSkinGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ursadak1;
    unit lv_ursadak2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide")) {
            lv_ursadak1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide") && (UnitGroupLoopCurrent() != lv_ursadak1)) {
            lv_ursadak2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_ursadak1 != null) && (lv_ursadak2 != null)) {
        UnitRemove(lv_ursadak1);
        UnitRemove(lv_ursadak2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "QuilgorSkinGloves");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadakSkinGloves_Init () {
    gt_UrsadakSkinGloves = TriggerCreate("gt_UrsadakSkinGloves_Func");
    TriggerAddEventUnitAbility(gt_UrsadakSkinGloves, null, AbilityCommand("CraftQuilgorSkinGloves", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ursadak Skin Boots
//--------------------------------------------------------------------------------------------------
bool gt_UrsadakSkinBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ursadak1;
    unit lv_ursadak2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide")) {
            lv_ursadak1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide") && (UnitGroupLoopCurrent() != lv_ursadak1)) {
            lv_ursadak2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_ursadak1 != null) && (lv_ursadak2 != null)) {
        UnitRemove(lv_ursadak1);
        UnitRemove(lv_ursadak2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "QuilgorSkinBoots");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UrsadakSkinBoots_Init () {
    gt_UrsadakSkinBoots = TriggerCreate("gt_UrsadakSkinBoots_Func");
    TriggerAddEventUnitAbility(gt_UrsadakSkinBoots, null, AbilityCommand("CraftQuilgorSkinBoots", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lyote Skin Coat
//--------------------------------------------------------------------------------------------------
bool gt_LyoteSkinCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lyote;
    unit lv_lyote2;
    unit lv_lyote3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide")) {
            lv_lyote = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") && (UnitGroupLoopCurrent() != lv_lyote)) {
            lv_lyote2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") && (UnitGroupLoopCurrent() != lv_lyote) && (UnitGroupLoopCurrent() != lv_lyote2)) {
            lv_lyote3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_lyote != null) && (lv_lyote2 != null) && (lv_lyote3 != null)) {
        UnitRemove(lv_lyote);
        UnitRemove(lv_lyote2);
        UnitRemove(lv_lyote3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "LyoteSkinCoat");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LyoteSkinCoat_Init () {
    gt_LyoteSkinCoat = TriggerCreate("gt_LyoteSkinCoat_Func");
    TriggerAddEventUnitAbility(gt_LyoteSkinCoat, null, AbilityCommand("CraftLyoteSkinCoat", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lyote Skin Boots
//--------------------------------------------------------------------------------------------------
bool gt_LyoteSkinBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lyote;
    unit lv_lyote2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide")) {
            lv_lyote = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") && (UnitGroupLoopCurrent() != lv_lyote)) {
            lv_lyote2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_lyote != null) && (lv_lyote2 != null)) {
        UnitRemove(lv_lyote);
        UnitRemove(lv_lyote2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "LyoteSkinBoots");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LyoteSkinBoots_Init () {
    gt_LyoteSkinBoots = TriggerCreate("gt_LyoteSkinBoots_Func");
    TriggerAddEventUnitAbility(gt_LyoteSkinBoots, null, AbilityCommand("CraftLyoteSkinBoots", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lyote Skin Gloves
//--------------------------------------------------------------------------------------------------
bool gt_LyoteSkinGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lyote;
    unit lv_lyote2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide")) {
            lv_lyote = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") && (UnitGroupLoopCurrent() != lv_lyote)) {
            lv_lyote2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_lyote != null) && (lv_lyote2 != null)) {
        UnitRemove(lv_lyote);
        UnitRemove(lv_lyote2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "LyoteSkinGloves");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LyoteSkinGloves_Init () {
    gt_LyoteSkinGloves = TriggerCreate("gt_LyoteSkinGloves_Func");
    TriggerAddEventUnitAbility(gt_LyoteSkinGloves, null, AbilityCommand("CraftLyoteSkinGloves", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Gloves
//--------------------------------------------------------------------------------------------------
bool gt_BoneGloves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gloves;
    unit lv_bone;
    unit lv_bone2;
    unit lv_bone3;
    unit lv_bone4;
    unit lv_bone5;
    string lv_type;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinGloves") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinGloves"))) {
            lv_gloves = UnitGroupLoopCurrent();
            lv_type = UnitGetType(UnitGroupLoopCurrent());
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone")) {
            lv_bone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone)) {
            lv_bone2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2)) {
            lv_bone3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3)) {
            lv_bone4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3) && (UnitGroupLoopCurrent() != lv_bone4)) {
            lv_bone5 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_gloves != null) && (lv_bone != null) && (lv_bone2 != null) && (lv_bone3 != null) && (lv_bone4 != null) && (lv_bone5 != null)) {
        UnitRemove(lv_gloves);
        UnitRemove(lv_bone);
        UnitRemove(lv_bone2);
        UnitRemove(lv_bone3);
        UnitRemove(lv_bone4);
        UnitRemove(lv_bone5);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        if ((lv_type == "KarakSkinGloves")) {
            UnitInventoryCreate(EventUnit(), "BoneGlovesKarak");
        }
        else {
            if ((lv_type == "LyoteSkinGloves")) {
                UnitInventoryCreate(EventUnit(), "BoneGlovesLyote");
            }
            else {
                if ((lv_type == "QuilgorSkinGloves")) {
                    UnitInventoryCreate(EventUnit(), "BoneGlovesQuilgor");
                }

            }
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneGloves_Init () {
    gt_BoneGloves = TriggerCreate("gt_BoneGloves_Func");
    TriggerAddEventUnitAbility(gt_BoneGloves, null, AbilityCommand("CraftBoneGloves", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Coat
//--------------------------------------------------------------------------------------------------
bool gt_BoneCoat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_coat;
    unit lv_bone;
    unit lv_bone2;
    unit lv_bone3;
    unit lv_bone4;
    unit lv_bone5;
    string lv_type;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinCoat") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinCoat"))) {
            lv_coat = UnitGroupLoopCurrent();
            lv_type = UnitGetType(UnitGroupLoopCurrent());
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone")) {
            lv_bone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone)) {
            lv_bone2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2)) {
            lv_bone3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3)) {
            lv_bone4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3) && (UnitGroupLoopCurrent() != lv_bone4)) {
            lv_bone5 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_coat != null) && (lv_bone != null) && (lv_bone2 != null) && (lv_bone3 != null) && (lv_bone4 != null) && (lv_bone5 != null)) {
        UnitRemove(lv_coat);
        UnitRemove(lv_bone);
        UnitRemove(lv_bone2);
        UnitRemove(lv_bone3);
        UnitRemove(lv_bone4);
        UnitRemove(lv_bone5);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        if ((lv_type == "KarakSkinCoat")) {
            UnitInventoryCreate(EventUnit(), "BoneCoatKarak");
        }
        else {
            if ((lv_type == "LyoteSkinCoat")) {
                UnitInventoryCreate(EventUnit(), "BoneCoatLyote");
            }
            else {
                if ((lv_type == "QuilgorSkinCoat")) {
                    UnitInventoryCreate(EventUnit(), "BoneCoatQuilgor");
                }

            }
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneCoat_Init () {
    gt_BoneCoat = TriggerCreate("gt_BoneCoat_Func");
    TriggerAddEventUnitAbility(gt_BoneCoat, null, AbilityCommand("CraftBoneCoat", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Boots
//--------------------------------------------------------------------------------------------------
bool gt_BoneBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boots;
    unit lv_bone;
    unit lv_bone2;
    unit lv_bone3;
    unit lv_bone4;
    unit lv_bone5;
    string lv_type;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteSkinBoots") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorSkinBoots"))) {
            lv_boots = UnitGroupLoopCurrent();
            lv_type = UnitGetType(UnitGroupLoopCurrent());
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone")) {
            lv_bone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone)) {
            lv_bone2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2)) {
            lv_bone3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3)) {
            lv_bone4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3) && (UnitGroupLoopCurrent() != lv_bone4)) {
            lv_bone5 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_boots != null) && (lv_bone != null) && (lv_bone2 != null) && (lv_bone3 != null) && (lv_bone4 != null) && (lv_bone5 != null)) {
        UnitRemove(lv_boots);
        UnitRemove(lv_bone);
        UnitRemove(lv_bone2);
        UnitRemove(lv_bone3);
        UnitRemove(lv_bone4);
        UnitRemove(lv_bone5);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        if ((lv_type == "KarakSkinBoots")) {
            UnitInventoryCreate(EventUnit(), "BoneBootsKarak");
        }
        else {
            if ((lv_type == "LyoteSkinBoots")) {
                UnitInventoryCreate(EventUnit(), "BoneBootsLyote");
            }
            else {
                if ((lv_type == "QuilgorSkinBoots")) {
                    UnitInventoryCreate(EventUnit(), "BoneBootsQuilgor");
                }

            }
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneBoots_Init () {
    gt_BoneBoots = TriggerCreate("gt_BoneBoots_Func");
    TriggerAddEventUnitAbility(gt_BoneBoots, null, AbilityCommand("CraftBoneBoots", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Shield
//--------------------------------------------------------------------------------------------------
bool gt_BoneShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aiurShield;
    unit lv_bone;
    unit lv_bone2;
    unit lv_bone3;
    unit lv_bone4;
    unit lv_bone5;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Shield")) {
            lv_aiurShield = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone")) {
            lv_bone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone)) {
            lv_bone2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2)) {
            lv_bone3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3)) {
            lv_bone4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3) && (UnitGroupLoopCurrent() != lv_bone4)) {
            lv_bone5 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_aiurShield != null) && (lv_bone != null) && (lv_bone2 != null) && (lv_bone3 != null) && (lv_bone4 != null) && (lv_bone5 != null)) {
        UnitRemove(lv_aiurShield);
        UnitRemove(lv_bone);
        UnitRemove(lv_bone2);
        UnitRemove(lv_bone3);
        UnitRemove(lv_bone4);
        UnitRemove(lv_bone5);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitInventoryCreate(EventUnit(), "BoneShield");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneShield_Init () {
    gt_BoneShield = TriggerCreate("gt_BoneShield_Func");
    TriggerAddEventUnitAbility(gt_BoneShield, null, AbilityCommand("CraftBoneShield", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Multi-Dimensional Pouch
//--------------------------------------------------------------------------------------------------
bool gt_MultiDimensionalPouch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidCrystal;
    unit lv_anyHide1;
    unit lv_anyHide2;
    unit lv_anyHide3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide1 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != lv_anyHide1) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != lv_anyHide1) && (UnitGroupLoopCurrent() != lv_anyHide2) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_voidCrystal != null) && (lv_anyHide1 != null) && (lv_anyHide2 != null) && (lv_anyHide3 != null)) {
        UnitRemove(lv_voidCrystal);
        UnitRemove(lv_anyHide1);
        UnitRemove(lv_anyHide2);
        UnitRemove(lv_anyHide3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "MultiDimensionalSatchel");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MultiDimensionalPouch_Init () {
    gt_MultiDimensionalPouch = TriggerCreate("gt_MultiDimensionalPouch_Func");
    TriggerAddEventUnitAbility(gt_MultiDimensionalPouch, null, AbilityCommand("CraftMultiDimensionalPouch", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transport Ship
//--------------------------------------------------------------------------------------------------
bool gt_TransportShip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;
    unit lv_mineral2;
    unit lv_relic;
    unit lv_relic2;
    unit lv_anyHide;
    unit lv_anyHide2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
            lv_relic = UnitGroupLoopCurrent();
        }

        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_mineral)) {
            lv_mineral2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_relic)) {
            lv_relic2 = UnitGroupLoopCurrent();
        }

        if ((UnitGroupLoopCurrent() != lv_anyHide) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_anyHide != null) && (lv_anyHide2 != null) && (lv_relic != null) && (lv_relic2 != null) && (lv_mineral != null) && (lv_mineral2 != null)) {
        UnitRemove(lv_anyHide);
        UnitRemove(lv_anyHide2);
        UnitRemove(lv_relic);
        UnitRemove(lv_relic2);
        UnitRemove(lv_mineral);
        UnitRemove(lv_mineral2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VoyagersShip");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TransportShip_Init () {
    gt_TransportShip = TriggerCreate("gt_TransportShip_Func");
    TriggerAddEventUnitAbility(gt_TransportShip, null, AbilityCommand("CraftVoyagersShip", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Private Shuttle
//--------------------------------------------------------------------------------------------------
bool gt_PrivateShuttle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;
    unit lv_mineral2;
    unit lv_aiurIgnot;
    unit lv_aiurIgnot2;
    unit lv_anyHide;
    unit lv_anyHide2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot")) {
            lv_aiurIgnot = UnitGroupLoopCurrent();
        }

        if (((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_mineral)) {
            lv_mineral2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "AiurIgnot") && (UnitGroupLoopCurrent() != lv_aiurIgnot)) {
            lv_aiurIgnot2 = UnitGroupLoopCurrent();
        }

        if ((UnitGroupLoopCurrent() != lv_anyHide) && ((UnitGetType(UnitGroupLoopCurrent()) == "KarakHide") || (UnitGetType(UnitGroupLoopCurrent()) == "LyoteHide") || (UnitGetType(UnitGroupLoopCurrent()) == "QuilgorHide"))) {
            lv_anyHide2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_anyHide != null) && (lv_anyHide2 != null) && (lv_aiurIgnot != null) && (lv_aiurIgnot2 != null) && (lv_mineral != null) && (lv_mineral2 != null)) {
        UnitRemove(lv_anyHide);
        UnitRemove(lv_anyHide2);
        UnitRemove(lv_aiurIgnot);
        UnitRemove(lv_aiurIgnot2);
        UnitRemove(lv_mineral);
        UnitRemove(lv_mineral2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "ConquerorsShip");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrivateShuttle_Init () {
    gt_PrivateShuttle = TriggerCreate("gt_PrivateShuttle_Func");
    TriggerAddEventUnitAbility(gt_PrivateShuttle, null, AbilityCommand("CraftConquerorsShip", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling Nest
//--------------------------------------------------------------------------------------------------
bool gt_ZerglingNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;
    unit lv_mineral2;
    unit lv_spiritofWind;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpiritofWind")) {
            lv_spiritofWind = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral") && (UnitGroupLoopCurrent() != lv_mineral)) {
            lv_mineral2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineral != null) && (lv_mineral2 != null) && (lv_spiritofWind != null)) {
        UnitRemove(lv_mineral);
        UnitRemove(lv_mineral2);
        UnitRemove(lv_spiritofWind);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "ZerglingNestItem");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZerglingNest_Init () {
    gt_ZerglingNest = TriggerCreate("gt_ZerglingNest_Func");
    TriggerAddEventUnitAbility(gt_ZerglingNest, null, AbilityCommand("CraftZerglingNest", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp Pad
//--------------------------------------------------------------------------------------------------
bool gt_WarpPad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_relic;
    unit lv_relic2;
    unit lv_relic3;
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
            lv_relic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_relic)) {
            lv_relic2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_relic) && (UnitGroupLoopCurrent() != lv_relic2)) {
            lv_relic3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_relic != null) && (lv_relic2 != null) && (lv_relic3 != null) && (lv_voidCrystal != null)) {
        UnitRemove(lv_relic);
        UnitRemove(lv_relic2);
        UnitRemove(lv_relic3);
        UnitRemove(lv_voidCrystal);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "WarpPadItem");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpPad_Init () {
    gt_WarpPad = TriggerCreate("gt_WarpPad_Func");
    TriggerAddEventUnitAbility(gt_WarpPad, null, AbilityCommand("CraftWarpPad", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Fuel
//--------------------------------------------------------------------------------------------------
bool gt_VespeneFuel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_banelingDust;
    unit lv_banelingDust2;
    unit lv_emberthorn;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_banelingDust = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn")) {
            lv_emberthorn = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust") && (UnitGroupLoopCurrent() != lv_banelingDust)) {
            lv_banelingDust2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_banelingDust != null) && (lv_banelingDust2 != null) && (lv_emberthorn != null)) {
        UnitRemove(lv_banelingDust);
        UnitRemove(lv_banelingDust2);
        UnitRemove(lv_emberthorn);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VespeneFuel");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VespeneFuel_Init () {
    gt_VespeneFuel = TriggerCreate("gt_VespeneFuel_Func");
    TriggerAddEventUnitAbility(gt_VespeneFuel, null, AbilityCommand("CraftVespeneFuel", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP
//--------------------------------------------------------------------------------------------------
bool gt_EMP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;
    unit lv_relic;
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
            lv_relic = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_relic != null) && (lv_mineral != null) && (lv_voidCrystal != null)) {
        UnitRemove(lv_mineral);
        UnitRemove(lv_relic);
        UnitRemove(lv_voidCrystal);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "EMP");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMP_Init () {
    gt_EMP = TriggerCreate("gt_EMP_Func");
    TriggerAddEventUnitAbility(gt_EMP, null, AbilityCommand("CraftEMP", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sonar Compass
//--------------------------------------------------------------------------------------------------
bool gt_SonarCompass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_baneIgnot;
    unit lv_banelingDust;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BaneIgnot")) {
            lv_baneIgnot = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_banelingDust = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_baneIgnot != null) && (lv_banelingDust != null)) {
        UnitRemove(lv_baneIgnot);
        UnitRemove(lv_banelingDust);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "SonarCompass");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SonarCompass_Init () {
    gt_SonarCompass = TriggerCreate("gt_SonarCompass_Func");
    TriggerAddEventUnitAbility(gt_SonarCompass, null, AbilityCommand("CraftSonarCompass", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Capsule
//--------------------------------------------------------------------------------------------------
bool gt_VoidCapsule_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_relic;
    unit lv_emberthorn;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
            lv_relic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn")) {
            lv_emberthorn = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_relic != null) && (lv_emberthorn != null)) {
        UnitRemove(lv_relic);
        UnitRemove(lv_emberthorn);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VoidCapsule");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidCapsule_Init () {
    gt_VoidCapsule = TriggerCreate("gt_VoidCapsule_Func");
    TriggerAddEventUnitAbility(gt_VoidCapsule, null, AbilityCommand("CraftVoidCapsule", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Mechanism
//--------------------------------------------------------------------------------------------------
bool gt_VoidMechanism_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_relic;
    unit lv_relic2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
            lv_relic = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic") && (UnitGroupLoopCurrent() != lv_relic)) {
            lv_relic2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_relic != null) && (lv_relic2 != null)) {
        UnitRemove(lv_relic);
        UnitRemove(lv_relic2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VoidMechanism");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidMechanism_Init () {
    gt_VoidMechanism = TriggerCreate("gt_VoidMechanism_Func");
    TriggerAddEventUnitAbility(gt_VoidMechanism, null, AbilityCommand("CraftVoidMechanism", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combine
//--------------------------------------------------------------------------------------------------
bool gt_Combine_Func (bool testConds, bool runActions) {
    int auto58E1D9A7_ae;
    int auto58E1D9A7_ai;
    int auto58EB56B1_ae;
    int auto58EB56B1_ai;

    // Variable Declarations
    unit lv_potionI;
    unit lv_potionII;
    bool lv_invalidmix;
    bool lv_invalidmixII;
    int lv_stackcounttotal;
    int lv_counter;
    int lv_potionmixercounter;
    int lv_stackcount;
    int lv_itemsmaxcharge;
    string lv_chargelink;

    // Variable Initialization
    lv_chargelink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "HealingStimulantI") && (UnitGetType(UnitGroupLoopCurrent()) != "HealingStimulantII")) {
            lv_invalidmix = true;
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "EnergyStimulantI") && (UnitGetType(UnitGroupLoopCurrent()) != "EnergyStimulantII") && (lv_invalidmix == true)) {
            lv_invalidmixII = true;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_invalidmix == false)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "HealingStimulantI")) {
                lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
                lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
                lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                lv_stackcounttotal += lv_stackcount;
            }

            if ((UnitGetType(UnitGroupLoopCurrent()) == "HealingStimulantII")) {
                lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
                lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
                lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                lv_stackcounttotal += (lv_stackcount * 2);
            }

            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        auto58E1D9A7_ae = lv_stackcounttotal;
        auto58E1D9A7_ai = 1;
        lv_counter = 1;
        for ( ; ( (auto58E1D9A7_ai >= 0 && lv_counter <= auto58E1D9A7_ae) || (auto58E1D9A7_ai <= 0 && lv_counter >= auto58E1D9A7_ae) ) ; lv_counter += auto58E1D9A7_ai ) {
            lv_potionmixercounter += 1;
            if ((lv_potionmixercounter == 1) && ((lv_stackcounttotal - lv_counter) == 0)) {
                Wait(gv_craftingTime, c_timeGame);
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                UnitInventoryCreate(EventUnit(), "HealingStimulantI");
                UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                lv_potionmixercounter = 0;
            }
            else {
                if ((lv_potionmixercounter == 2) && ((lv_stackcounttotal - lv_potionmixercounter) == 0)) {
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                    UnitInventoryCreate(EventUnit(), "HealingStimulantII");
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                    lv_potionmixercounter = 0;
                }
                else {
                    if ((lv_potionmixercounter == 3) && ((lv_stackcounttotal - lv_potionmixercounter) >= 0)) {
                        Wait(gv_craftingTime, c_timeGame);
                        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                        UnitInventoryCreate(EventUnit(), "HealingStimulantIII");
                        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                        lv_potionmixercounter = 0;
                    }

                }
            }
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }
    else {
        if ((lv_invalidmixII == false)) {
            UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "EnergyStimulantI")) {
                    lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
                    lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
                    lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                    lv_stackcounttotal += lv_stackcount;
                }

                if ((UnitGetType(UnitGroupLoopCurrent()) == "EnergyStimulantII")) {
                    lv_chargelink = CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.Link", c_playerAny);
                    lv_itemsmaxcharge = StringToInt(CatalogFieldValueGet(c_gameCatalogItem, (UnitGetType(UnitGroupLoopCurrent())), "EffectCost.Charge.CountMax", c_playerAny));
                    lv_stackcount = (lv_itemsmaxcharge - FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), lv_chargelink)));
                    lv_stackcounttotal += (lv_stackcount * 2);
                }

                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            auto58EB56B1_ae = lv_stackcounttotal;
            auto58EB56B1_ai = 1;
            lv_counter = 1;
            for ( ; ( (auto58EB56B1_ai >= 0 && lv_counter <= auto58EB56B1_ae) || (auto58EB56B1_ai <= 0 && lv_counter >= auto58EB56B1_ae) ) ; lv_counter += auto58EB56B1_ai ) {
                lv_potionmixercounter += 1;
                if ((lv_potionmixercounter == 1) && ((lv_stackcounttotal - lv_counter) == 0)) {
                    Wait(gv_craftingTime, c_timeGame);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                    UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
                    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                    lv_potionmixercounter = 0;
                }
                else {
                    if ((lv_potionmixercounter == 2) && ((lv_stackcounttotal - lv_potionmixercounter) == 0)) {
                        Wait(gv_craftingTime, c_timeGame);
                        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
                        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                        lv_potionmixercounter = 0;
                    }
                    else {
                        if ((lv_potionmixercounter == 3) && ((lv_stackcounttotal - lv_potionmixercounter) >= 0)) {
                            Wait(gv_craftingTime, c_timeGame);
                            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
                            UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
                            UnitInventoryCreate(EventUnit(), "EnergyStimulantIII");
                            UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
                            lv_potionmixercounter = 0;
                        }

                    }
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Combine_Init () {
    gt_Combine = TriggerCreate("gt_Combine_Func");
    TriggerAddEventUnitAbility(gt_Combine, null, AbilityCommand("Combine", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Potion of Disease
//--------------------------------------------------------------------------------------------------
bool gt_FusePotionofDisease_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uniquespecialherbtype11;
    unit lv_uniquespecialherbtype12;
    unit lv_uniquespecialherbtype21;
    unit lv_uniquespecialherbtype22;
    unit lv_poison;
    unit lv_ultrapoison;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Poison")) {
            lv_poison = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "UltraPoison")) {
            lv_ultrapoison = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "OceansBreatheItem") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThornItem") || (UnitGetType(UnitGroupLoopCurrent()) == "StormLeafItem") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernoRootItem"))) {
            lv_uniquespecialherbtype11 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_uniquespecialherbtype12 == null) && (UnitGroupLoopCurrent() != lv_uniquespecialherbtype11) && (UnitGetType(UnitGroupLoopCurrent()) == UnitGetType(lv_uniquespecialherbtype11))) {
            lv_uniquespecialherbtype12 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != UnitGetType(lv_uniquespecialherbtype11)) && ((UnitGetType(UnitGroupLoopCurrent()) == "OceansBreatheItem") || (UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThornItem") || (UnitGetType(UnitGroupLoopCurrent()) == "StormLeafItem") || (UnitGetType(UnitGroupLoopCurrent()) == "InfernoRootItem"))) {
            lv_uniquespecialherbtype21 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lv_uniquespecialherbtype22 == null) && (UnitGroupLoopCurrent() != lv_uniquespecialherbtype21) && (UnitGetType(UnitGroupLoopCurrent()) == UnitGetType(lv_uniquespecialherbtype21))) {
            lv_uniquespecialherbtype22 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_uniquespecialherbtype11 != null) && (lv_uniquespecialherbtype12 != null) && (lv_uniquespecialherbtype21 != null) && (lv_uniquespecialherbtype22 != null) && (lv_poison != null) && (lv_ultrapoison != null)) {
        UnitRemove(lv_uniquespecialherbtype11);
        UnitRemove(lv_uniquespecialherbtype12);
        UnitRemove(lv_uniquespecialherbtype21);
        UnitRemove(lv_uniquespecialherbtype22);
        UnitRemove(lv_poison);
        UnitRemove(lv_ultrapoison);
        Wait(gv_craftingTime, c_timeGame);
        UnitInventoryCreate(EventUnit(), "PotionofDisease");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FusePotionofDisease_Init () {
    gt_FusePotionofDisease = TriggerCreate("gt_FusePotionofDisease_Func");
    TriggerAddEventUnitAbility(gt_FusePotionofDisease, null, AbilityCommand("FusePotionofDisease", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Energy Stim I
//--------------------------------------------------------------------------------------------------
bool gt_FuseEnergyStimI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_riverStem;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem")) {
            lv_riverStem = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_riverStem != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_riverStem);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "EnergyStimulantI");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseEnergyStimI_Init () {
    gt_FuseEnergyStimI = TriggerCreate("gt_FuseEnergyStimI_Func");
    TriggerAddEventUnitAbility(gt_FuseEnergyStimI, null, AbilityCommand("FuseEnergyStimulantI", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Energy Stim II
//--------------------------------------------------------------------------------------------------
bool gt_FuseEnergyStimII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_butsu2;
    unit lv_riverStem;
    unit lv_riverStem2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem")) {
            lv_riverStem = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu)) {
            lv_butsu2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem") && (UnitGroupLoopCurrent() != lv_riverStem)) {
            lv_riverStem2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_butsu2 != null) && (lv_riverStem != null) && (lv_riverStem2 != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_butsu2);
        UnitRemove(lv_riverStem);
        UnitRemove(lv_riverStem2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "EnergyStimulantII");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseEnergyStimII_Init () {
    gt_FuseEnergyStimII = TriggerCreate("gt_FuseEnergyStimII_Func");
    TriggerAddEventUnitAbility(gt_FuseEnergyStimII, null, AbilityCommand("FuseEnergyStimulantII", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Energy Stim III
//--------------------------------------------------------------------------------------------------
bool gt_FuseEnergyStimIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_butsu2;
    unit lv_butsu3;
    unit lv_riverStem;
    unit lv_riverStem2;
    unit lv_riverStem3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem")) {
            lv_riverStem = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu)) {
            lv_butsu2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem") && (UnitGroupLoopCurrent() != lv_riverStem)) {
            lv_riverStem2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu) && (UnitGroupLoopCurrent() != lv_butsu2)) {
            lv_butsu3 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem") && (UnitGroupLoopCurrent() != lv_riverStem) && (UnitGroupLoopCurrent() != lv_riverStem2)) {
            lv_riverStem3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_butsu2 != null) && (lv_butsu3 != null) && (lv_riverStem != null) && (lv_riverStem2 != null) && (lv_riverStem3 != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_butsu2);
        UnitRemove(lv_butsu3);
        UnitRemove(lv_riverStem);
        UnitRemove(lv_riverStem2);
        UnitRemove(lv_riverStem3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "EnergyStimulantIII");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseEnergyStimIII_Init () {
    gt_FuseEnergyStimIII = TriggerCreate("gt_FuseEnergyStimIII_Func");
    TriggerAddEventUnitAbility(gt_FuseEnergyStimIII, null, AbilityCommand("FuseEnergyStimulantIII", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse REAL VISION
//--------------------------------------------------------------------------------------------------
bool gt_FuseREALVISION_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shadowsThorn;
    unit lv_oceansBreathe;
    unit lv_stormLeaf;
    unit lv_infernoRoot;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ShadowsThornItem")) {
            lv_shadowsThorn = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "OceansBreatheItem")) {
            lv_oceansBreathe = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "InfernoRootItem")) {
            lv_infernoRoot = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "StormLeafItem")) {
            lv_stormLeaf = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_shadowsThorn != null) && (lv_oceansBreathe != null) && (lv_infernoRoot != null) && (lv_stormLeaf != null)) {
        UnitRemove(lv_shadowsThorn);
        UnitRemove(lv_oceansBreathe);
        UnitRemove(lv_infernoRoot);
        UnitRemove(lv_stormLeaf);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VisionoftheIsles");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseREALVISION_Init () {
    gt_FuseREALVISION = TriggerCreate("gt_FuseREALVISION_Func");
    TriggerAddEventUnitAbility(gt_FuseREALVISION, null, AbilityCommand("FuseVisionoftheIsles", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Anabolic Potion
//--------------------------------------------------------------------------------------------------
bool gt_FuseAnabolicPotion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_thistles;
    unit lv_thistles2;
    unit lv_mushroom;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Thistle")) {
            lv_thistles = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem")) {
            lv_mushroom = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Thistle") && (UnitGroupLoopCurrent() != lv_thistles)) {
            lv_thistles2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_thistles != null) && (lv_thistles2 != null) && (lv_mushroom != null)) {
        UnitRemove(lv_thistles);
        UnitRemove(lv_thistles2);
        UnitRemove(lv_mushroom);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "AnabolicStimulant");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseAnabolicPotion_Init () {
    gt_FuseAnabolicPotion = TriggerCreate("gt_FuseAnabolicPotion_Func");
    TriggerAddEventUnitAbility(gt_FuseAnabolicPotion, null, AbilityCommand("FuseAnabolicStimulant", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Potion of Knowledge
//--------------------------------------------------------------------------------------------------
bool gt_FusePotionofKnowledge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_butsu2;
    unit lv_mushroom;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem")) {
            lv_mushroom = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu)) {
            lv_butsu2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_butsu2 != null) && (lv_mushroom != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_butsu2);
        UnitRemove(lv_mushroom);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "PotionofKnowledge");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FusePotionofKnowledge_Init () {
    gt_FusePotionofKnowledge = TriggerCreate("gt_FusePotionofKnowledge_Func");
    TriggerAddEventUnitAbility(gt_FusePotionofKnowledge, null, AbilityCommand("FusePotionofKnowledge", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Healing Stim I
//--------------------------------------------------------------------------------------------------
bool gt_FuseHealingStimI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_riverRoot;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot")) {
            lv_riverRoot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_riverRoot != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_riverRoot);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "HealingStimulantI");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseHealingStimI_Init () {
    gt_FuseHealingStimI = TriggerCreate("gt_FuseHealingStimI_Func");
    TriggerAddEventUnitAbility(gt_FuseHealingStimI, null, AbilityCommand("FuseHealingStimulantI", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Healing Stim II
//--------------------------------------------------------------------------------------------------
bool gt_FuseHealingStimII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_butsu2;
    unit lv_riverRoot;
    unit lv_riverRoot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot")) {
            lv_riverRoot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu)) {
            lv_butsu2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") && (UnitGroupLoopCurrent() != lv_riverRoot)) {
            lv_riverRoot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_butsu2 != null) && (lv_riverRoot != null) && (lv_riverRoot2 != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_butsu2);
        UnitRemove(lv_riverRoot);
        UnitRemove(lv_riverRoot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "HealingStimulantII");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseHealingStimII_Init () {
    gt_FuseHealingStimII = TriggerCreate("gt_FuseHealingStimII_Func");
    TriggerAddEventUnitAbility(gt_FuseHealingStimII, null, AbilityCommand("FuseHealingStimulantII", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Healing Stim III
//--------------------------------------------------------------------------------------------------
bool gt_FuseHealingStimIII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_butsu2;
    unit lv_butsu3;
    unit lv_riverRoot;
    unit lv_riverRoot2;
    unit lv_riverRoot3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot")) {
            lv_riverRoot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu)) {
            lv_butsu2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") && (UnitGroupLoopCurrent() != lv_riverRoot)) {
            lv_riverRoot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu) && (UnitGroupLoopCurrent() != lv_butsu2)) {
            lv_butsu3 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") && (UnitGroupLoopCurrent() != lv_riverRoot) && (UnitGroupLoopCurrent() != lv_riverRoot2)) {
            lv_riverRoot3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_butsu2 != null) && (lv_butsu3 != null) && (lv_riverRoot != null) && (lv_riverRoot2 != null) && (lv_riverRoot3 != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_butsu2);
        UnitRemove(lv_butsu3);
        UnitRemove(lv_riverRoot);
        UnitRemove(lv_riverRoot2);
        UnitRemove(lv_riverRoot3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "HealingStimulantIII");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseHealingStimIII_Init () {
    gt_FuseHealingStimIII = TriggerCreate("gt_FuseHealingStimIII_Func");
    TriggerAddEventUnitAbility(gt_FuseHealingStimIII, null, AbilityCommand("FuseHealingStimulantIII", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Cure All
//--------------------------------------------------------------------------------------------------
bool gt_FuseCureAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butsu;
    unit lv_butsu2;
    unit lv_butsu3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem")) {
            lv_butsu = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu)) {
            lv_butsu2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ButsuItem") && (UnitGroupLoopCurrent() != lv_butsu) && (UnitGroupLoopCurrent() != lv_butsu2)) {
            lv_butsu3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_butsu != null) && (lv_butsu2 != null) && (lv_butsu3 != null)) {
        UnitRemove(lv_butsu);
        UnitRemove(lv_butsu2);
        UnitRemove(lv_butsu3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "CureAll");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseCureAll_Init () {
    gt_FuseCureAll = TriggerCreate("gt_FuseCureAll_Func");
    TriggerAddEventUnitAbility(gt_FuseCureAll, null, AbilityCommand("FuseCureAll", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Spirit Of Wind
//--------------------------------------------------------------------------------------------------
bool gt_FuseSpiritOfWind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_riverStem;
    unit lv_riverStem2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem")) {
            lv_riverStem = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverStem") && (UnitGroupLoopCurrent() != lv_riverStem)) {
            lv_riverStem2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_riverStem != null) && (lv_riverStem2 != null)) {
        UnitRemove(lv_riverStem);
        UnitRemove(lv_riverStem2);
        Wait(gv_craftingTime, c_timeGame);
        UnitInventoryCreate(EventUnit(), "SpiritofWind");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseSpiritOfWind_Init () {
    gt_FuseSpiritOfWind = TriggerCreate("gt_FuseSpiritOfWind_Func");
    TriggerAddEventUnitAbility(gt_FuseSpiritOfWind, null, AbilityCommand("FuseSpiritofWind", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuse Spirit Of Water
//--------------------------------------------------------------------------------------------------
bool gt_FuseSpiritOfWater_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_riverRoot;
    unit lv_riverRoot2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot")) {
            lv_riverRoot = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RiverRoot") && (UnitGroupLoopCurrent() != lv_riverRoot)) {
            lv_riverRoot2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_riverRoot != null) && (lv_riverRoot2 != null)) {
        UnitRemove(lv_riverRoot);
        UnitRemove(lv_riverRoot2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "SpiritofWater");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuseSpiritOfWater_Init () {
    gt_FuseSpiritOfWater = TriggerCreate("gt_FuseSpiritOfWater_Func");
    TriggerAddEventUnitAbility(gt_FuseSpiritOfWater, null, AbilityCommand("FuseSpiritofWater", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warpstone
//--------------------------------------------------------------------------------------------------
bool gt_Warpstone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_magic;
    unit lv_stone;
    unit lv_magic2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic")) {
            lv_magic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
            lv_stone = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic") && (UnitGroupLoopCurrent() != lv_magic)) {
            lv_magic2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_magic != null) && (lv_stone != null) && (lv_magic2 != null)) {
        UnitRemove(lv_magic);
        UnitRemove(lv_stone);
        UnitRemove(lv_magic2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "Warpstone");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Warpstone_Init () {
    gt_Warpstone = TriggerCreate("gt_Warpstone_Func");
    TriggerAddEventUnitAbility(gt_Warpstone, null, AbilityCommand("CraftWarpstone", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encryption: Searing Bolt
//--------------------------------------------------------------------------------------------------
bool gt_EncryptionSearingBolt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_emberthorn1;
    unit lv_voidCrystal1;
    unit lv_emberthorn2;
    unit lv_voidCrystal2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn")) {
            lv_emberthorn1 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Emberthorn") && (UnitGroupLoopCurrent() != lv_emberthorn1)) {
            lv_emberthorn2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal1)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_emberthorn1 != null) && (lv_voidCrystal1 != null) && (lv_emberthorn2 != null) && (lv_voidCrystal2 != null)) {
        UnitRemove(lv_emberthorn1);
        UnitRemove(lv_voidCrystal1);
        UnitRemove(lv_emberthorn2);
        UnitRemove(lv_voidCrystal2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "SearingBoltEncryption");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncryptionSearingBolt_Init () {
    gt_EncryptionSearingBolt = TriggerCreate("gt_EncryptionSearingBolt_Func");
    TriggerAddEventUnitAbility(gt_EncryptionSearingBolt, null, AbilityCommand("CraftSearingBoltEncryption", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encryption: Ancient Armor
//--------------------------------------------------------------------------------------------------
bool gt_EncryptionAncientArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stone1;
    unit lv_voidCrystal1;
    unit lv_stone2;
    unit lv_voidCrystal2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock")) {
            lv_stone1 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Rock") && (UnitGroupLoopCurrent() != lv_stone1)) {
            lv_stone2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal1)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_stone1 != null) && (lv_voidCrystal1 != null) && (lv_stone2 != null) && (lv_voidCrystal2 != null)) {
        UnitRemove(lv_stone1);
        UnitRemove(lv_voidCrystal1);
        UnitRemove(lv_stone2);
        UnitRemove(lv_voidCrystal2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "AncientArmorEncryption");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncryptionAncientArmor_Init () {
    gt_EncryptionAncientArmor = TriggerCreate("gt_EncryptionAncientArmor_Func");
    TriggerAddEventUnitAbility(gt_EncryptionAncientArmor, null, AbilityCommand("CraftAncientArmorEncryption", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encryption: Blink
//--------------------------------------------------------------------------------------------------
bool gt_EncryptionBlink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_magic1;
    unit lv_voidCrystal1;
    unit lv_magic2;
    unit lv_voidCrystal2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic")) {
            lv_magic1 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic") && (UnitGroupLoopCurrent() != lv_magic1)) {
            lv_magic2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal1)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_magic1 != null) && (lv_voidCrystal1 != null) && (lv_magic2 != null) && (lv_voidCrystal2 != null)) {
        UnitRemove(lv_magic1);
        UnitRemove(lv_voidCrystal1);
        UnitRemove(lv_magic2);
        UnitRemove(lv_voidCrystal2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "BlinkEncryption");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncryptionBlink_Init () {
    gt_EncryptionBlink = TriggerCreate("gt_EncryptionBlink_Func");
    TriggerAddEventUnitAbility(gt_EncryptionBlink, null, AbilityCommand("CraftBlinkEncryption", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encryption: Psi-Shield
//--------------------------------------------------------------------------------------------------
bool gt_EncryptionPsiShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_banelingDust1;
    unit lv_voidCrystal1;
    unit lv_banelingDust2;
    unit lv_voidCrystal2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust")) {
            lv_banelingDust1 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "BanelingDust") && (UnitGroupLoopCurrent() != lv_banelingDust1)) {
            lv_banelingDust2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal1)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_banelingDust1 != null) && (lv_voidCrystal1 != null) && (lv_banelingDust2 != null) && (lv_voidCrystal2 != null)) {
        UnitRemove(lv_banelingDust1);
        UnitRemove(lv_voidCrystal1);
        UnitRemove(lv_banelingDust2);
        UnitRemove(lv_voidCrystal2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "PsiShieldEncryption");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncryptionPsiShield_Init () {
    gt_EncryptionPsiShield = TriggerCreate("gt_EncryptionPsiShield_Func");
    TriggerAddEventUnitAbility(gt_EncryptionPsiShield, null, AbilityCommand("CraftPsiShieldEncryption", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encryption: Cyclonic Grasp
//--------------------------------------------------------------------------------------------------
bool gt_EncryptionCyclonicGrasp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spiritofWind1;
    unit lv_voidCrystal1;
    unit lv_spiritofWind2;
    unit lv_voidCrystal2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpiritofWind")) {
            lv_spiritofWind1 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SpiritofWind") && (UnitGroupLoopCurrent() != lv_spiritofWind1)) {
            lv_spiritofWind2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal1)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_spiritofWind1 != null) && (lv_voidCrystal1 != null) && (lv_spiritofWind2 != null) && (lv_voidCrystal2 != null)) {
        UnitRemove(lv_spiritofWind1);
        UnitRemove(lv_voidCrystal1);
        UnitRemove(lv_spiritofWind2);
        UnitRemove(lv_voidCrystal2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "CyclonicShellEncryption");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncryptionCyclonicGrasp_Init () {
    gt_EncryptionCyclonicGrasp = TriggerCreate("gt_EncryptionCyclonicGrasp_Func");
    TriggerAddEventUnitAbility(gt_EncryptionCyclonicGrasp, null, AbilityCommand("CraftCyclonicShellEncryption", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encryption: Energy Disruption (FIX)
//--------------------------------------------------------------------------------------------------
bool gt_EncryptionEnergyDisruptionFIX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_darkMatter;
    unit lv_voidCrystal1;
    unit lv_darkMatter2;
    unit lv_voidCrystal2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter")) {
            lv_darkMatter = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "DarkMatter") && (UnitGroupLoopCurrent() != lv_darkMatter)) {
            lv_darkMatter2 = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal1)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_darkMatter != null) && (lv_voidCrystal1 != null) && (lv_darkMatter2 != null) && (lv_voidCrystal2 != null)) {
        UnitRemove(lv_darkMatter);
        UnitRemove(lv_voidCrystal1);
        UnitRemove(lv_darkMatter2);
        UnitRemove(lv_voidCrystal2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "EnergyDisruptionEncryption");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EncryptionEnergyDisruptionFIX_Init () {
    gt_EncryptionEnergyDisruptionFIX = TriggerCreate("gt_EncryptionEnergyDisruptionFIX_Func");
    TriggerAddEventUnitAbility(gt_EncryptionEnergyDisruptionFIX, null, AbilityCommand("CraftEnergyDisruptionEncryption", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison
//--------------------------------------------------------------------------------------------------
bool gt_Poison_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mushroom1;
    unit lv_mushroom2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem")) {
            lv_mushroom1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem") && (UnitGroupLoopCurrent() != lv_mushroom1)) {
            lv_mushroom2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mushroom1 != null) && (lv_mushroom2 != null)) {
        UnitRemove(lv_mushroom1);
        UnitRemove(lv_mushroom2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "Poison");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Poison_Init () {
    gt_Poison = TriggerCreate("gt_Poison_Func");
    TriggerAddEventUnitAbility(gt_Poison, null, AbilityCommand("CraftPoison", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bone Necklace
//--------------------------------------------------------------------------------------------------
bool gt_BoneNecklace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bone1;
    unit lv_bone2;
    unit lv_bone3;
    unit lv_bone4;
    unit lv_bone5;
    unit lv_bone6;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone")) {
            lv_bone1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone1)) {
            lv_bone2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone1) && (UnitGroupLoopCurrent() != lv_bone2)) {
            lv_bone3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone1) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3)) {
            lv_bone4 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone1) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3) && (UnitGroupLoopCurrent() != lv_bone4)) {
            lv_bone5 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bone") && (UnitGroupLoopCurrent() != lv_bone1) && (UnitGroupLoopCurrent() != lv_bone2) && (UnitGroupLoopCurrent() != lv_bone3) && (UnitGroupLoopCurrent() != lv_bone4) && (UnitGroupLoopCurrent() != lv_bone5)) {
            lv_bone6 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_bone1 != null) && (lv_bone2 != null) && (lv_bone3 != null) && (lv_bone4 != null) && (lv_bone5 != null) && (lv_bone6 != null)) {
        UnitRemove(lv_bone1);
        UnitRemove(lv_bone2);
        UnitRemove(lv_bone3);
        UnitRemove(lv_bone4);
        UnitRemove(lv_bone5);
        UnitRemove(lv_bone6);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "BoneNecklace");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoneNecklace_Init () {
    gt_BoneNecklace = TriggerCreate("gt_BoneNecklace_Func");
    TriggerAddEventUnitAbility(gt_BoneNecklace, null, AbilityCommand("CraftBoneNecklace", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra Poison
//--------------------------------------------------------------------------------------------------
bool gt_UltraPoison_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_poison1;
    unit lv_poison2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Poison")) {
            lv_poison1 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Poison") && (UnitGroupLoopCurrent() != lv_poison1)) {
            lv_poison2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_poison1 != null) && (lv_poison2 != null)) {
        UnitRemove(lv_poison1);
        UnitRemove(lv_poison2);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "UltraPoison");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraPoison_Init () {
    gt_UltraPoison = TriggerCreate("gt_UltraPoison_Func");
    TriggerAddEventUnitAbility(gt_UltraPoison, null, AbilityCommand("CraftUltraPoison", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison Spear
//--------------------------------------------------------------------------------------------------
bool gt_PoisonSpear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spear;
    unit lv_mushroom;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Spear")) {
            lv_spear = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "MushroomItem")) {
            lv_mushroom = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_spear != null) && (lv_mushroom != null)) {
        UnitRemove(lv_spear);
        UnitRemove(lv_mushroom);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "PoisonSpear");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoisonSpear_Init () {
    gt_PoisonSpear = TriggerCreate("gt_PoisonSpear_Func");
    TriggerAddEventUnitAbility(gt_PoisonSpear, null, AbilityCommand("CraftPoisonSpear", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refined Poison Spear
//--------------------------------------------------------------------------------------------------
bool gt_RefinedPoisonSpear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spear;
    unit lv_poison;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Spear")) {
            lv_spear = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Poison")) {
            lv_poison = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_spear != null) && (lv_poison != null)) {
        UnitRemove(lv_spear);
        UnitRemove(lv_poison);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "RefinedPoisonSpear");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefinedPoisonSpear_Init () {
    gt_RefinedPoisonSpear = TriggerCreate("gt_RefinedPoisonSpear_Func");
    TriggerAddEventUnitAbility(gt_RefinedPoisonSpear, null, AbilityCommand("CraftRefinedPoisonSpear", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra Poison Spear
//--------------------------------------------------------------------------------------------------
bool gt_UltraPoisonSpear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spear;
    unit lv_ultraPoison;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Spear")) {
            lv_spear = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "UltraPoison")) {
            lv_ultraPoison = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_spear != null) && (lv_ultraPoison != null)) {
        UnitRemove(lv_spear);
        UnitRemove(lv_ultraPoison);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "UltraPoisonSpear");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraPoisonSpear_Init () {
    gt_UltraPoisonSpear = TriggerCreate("gt_UltraPoisonSpear_Func");
    TriggerAddEventUnitAbility(gt_UltraPoisonSpear, null, AbilityCommand("CraftUltraPoisonSpear", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mage Fire
//--------------------------------------------------------------------------------------------------
bool gt_MageFire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fireKit;
    unit lv_voidCrystal;
    unit lv_magic;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "FireStone")) {
            lv_fireKit = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Magic")) {
            lv_magic = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_fireKit != null) && (lv_magic != null) && (lv_voidCrystal != null)) {
        UnitRemove(lv_fireKit);
        UnitRemove(lv_voidCrystal);
        UnitRemove(lv_magic);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "MageFire");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MageFire_Init () {
    gt_MageFire = TriggerCreate("gt_MageFire_Func");
    TriggerAddEventUnitAbility(gt_MageFire, null, AbilityCommand("CraftMageFire", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magic Seed
//--------------------------------------------------------------------------------------------------
bool gt_MagicSeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineral != null) && (lv_voidCrystal != null)) {
        UnitRemove(lv_mineral);
        UnitRemove(lv_voidCrystal);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "MagicSeed");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MagicSeed_Init () {
    gt_MagicSeed = TriggerCreate("gt_MagicSeed_Func");
    TriggerAddEventUnitAbility(gt_MagicSeed, null, AbilityCommand("CraftMagicSeed", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Imbued Relic
//--------------------------------------------------------------------------------------------------
bool gt_ImbuedRelic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_relic;
    unit lv_voidCrystal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_relic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_relic != null) && (lv_voidCrystal != null)) {
        UnitRemove(lv_relic);
        UnitRemove(lv_voidCrystal);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "ImbuedRelic");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImbuedRelic_Init () {
    gt_ImbuedRelic = TriggerCreate("gt_ImbuedRelic_Func");
    TriggerAddEventUnitAbility(gt_ImbuedRelic, null, AbilityCommand("CraftImbuedRelic", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Tower
//--------------------------------------------------------------------------------------------------
bool gt_VoidTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mineral;
    unit lv_voidCrystal;
    unit lv_voidCrystal2;
    unit lv_voidCrystal3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Mineral")) {
            lv_mineral = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal) && (UnitGroupLoopCurrent() != lv_voidCrystal2)) {
            lv_voidCrystal3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_mineral != null) && (lv_voidCrystal != null) && (lv_voidCrystal2 != null) && (lv_voidCrystal3 != null)) {
        UnitRemove(lv_mineral);
        UnitRemove(lv_voidCrystal);
        UnitRemove(lv_voidCrystal2);
        UnitRemove(lv_voidCrystal3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VoidTower");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidTower_Init () {
    gt_VoidTower = TriggerCreate("gt_VoidTower_Func");
    TriggerAddEventUnitAbility(gt_VoidTower, null, AbilityCommand("CraftVoidTower", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Craft Void Artifact
//--------------------------------------------------------------------------------------------------
bool gt_CraftVoidArtifact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_relic;
    unit lv_voidCrystal;
    unit lv_voidCrystal2;
    unit lv_voidCrystal3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Relic")) {
            lv_relic = UnitGroupLoopCurrent();
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal")) {
            lv_voidCrystal = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal)) {
            lv_voidCrystal2 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "VoidCrystal") && (UnitGroupLoopCurrent() != lv_voidCrystal) && (UnitGroupLoopCurrent() != lv_voidCrystal2)) {
            lv_voidCrystal3 = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    if ((lv_relic != null) && (lv_voidCrystal != null) && (lv_voidCrystal2 != null) && (lv_voidCrystal3 != null)) {
        UnitRemove(lv_relic);
        UnitRemove(lv_voidCrystal);
        UnitRemove(lv_voidCrystal2);
        UnitRemove(lv_voidCrystal3);
        Wait(gv_craftingTime, c_timeGame);
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.01);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueAddToFront);
        UnitInventoryCreate(EventUnit(), "VoidArtifact");
        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CraftVoidArtifact_Init () {
    gt_CraftVoidArtifact = TriggerCreate("gt_CraftVoidArtifact_Func");
    TriggerAddEventUnitAbility(gt_CraftVoidArtifact, null, AbilityCommand("CraftVoidArtifact", 0), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_DayNightCycle_Init();
    gt_CreateScoreboard_Init();
    gt_ScoreboardHideShow_Init();
    gt_GameValues_Init();
    gt_PlayerLeaves_Init();
    gt_LoseCheck_Init();
    gt_VictoryCheck_Init();
    gt_CreateAllMenus_Init();
    gt_SelectHeroDialogs_Init();
    gt_VoteBasicMode_Init();
    gt_VoteStandardMode_Init();
    gt_VoteAdvancedMode_Init();
    gt_VoteHardcoreMode_Init();
    gt_VictoryEnabled_Init();
    gt_VictoryDisabled_Init();
    gt_AirShipsEnabled_Init();
    gt_AirShipsDisabled_Init();
    gt_AcceleratedModeEnabled_Init();
    gt_AcceleratedModeDisabled_Init();
    gt_SpawnFish_Init();
    gt_BasicInitialItemsBeasts_Init();
    gt_StandardInitialItemsBeasts_Init();
    gt_HardcoreInitialItemsBeasts_Init();
    gt_StandardBeastSpawn_Init();
    gt_AdvanceBeastSpawn_Init();
    gt_HardcoreBeastSpawn_Init();
    gt_BasicItemSpawn_Init();
    gt_StandardItemSpawn_Init();
    gt_AdvancedItemSpawn_Init();
    gt_HardcoreItemSpawn_Init();
    gt_BasicKarak_Init();
    gt_AdvancedKarak_Init();
    gt_HardcoreKarak_Init();
    gt_NeutralCatcherSouthwest_Init();
    gt_NeutralCatcherNorthwest_Init();
    gt_NeutralCatcherSoutheast_Init();
    gt_NoobTime_Init();
    gt_NoobDeath_Init();
    gt_NoobResurrectionTime_Init();
    gt_EndNoobTIme_Init();
    gt_Tips_Init();
    gt_TreeMorph1_Init();
    gt_TreeMorph2_Init();
    gt_GenerateBaseHerbs_Init();
    gt_GenerateSpecialHerbs_Init();
    gt_TradeShipStop2_Init();
    gt_TradeShipStop_Init();
    gt_MoveTradeShips_Init();
    gt_SetTradeShips_Init();
    gt_EndSelectTime_Init();
    gt_ForceEndSelectTime_Init();
    gt_RunSelectHero_Init();
    gt_ChooseForager_Init();
    gt_ChooseWarrior_Init();
    gt_ChooseThief_Init();
    gt_ChooseTemplar_Init();
    gt_ChooseBeastHunter_Init();
    gt_ChooseTechie_Init();
    gt_ChooseVoidmancer_Init();
    gt_FallBackHideInfo_Init();
    gt_HungerWarning_Init();
    gt_HungerWarning2_Init();
    gt_VespeneWarning_Init();
    gt_VespeneWarning2_Init();
    gt_VespeneWarning3_Init();
    gt_EnergyWarning_Init();
    gt_EnergyWarning2_Init();
    gt_EnergyWarning3_Init();
    gt_HealthWarning_Init();
    gt_HealthWarning2_Init();
    gt_HealthWarning3_Init();
    gt_UltraliskAttackedWarning_Init();
    gt_AirShipsBehavior_Init();
    gt_NewCargoShip_Init();
    gt_TransportShipDeath_Init();
    gt_CheckCargoTile_Init();
    gt_Hypothermia_Init();
    gt_Starvation_Init();
    gt_Insomnia_Init();
    gt_SlainDeath_Init();
    gt_MaxHunger_Init();
    gt_ApplyHungerDepleteTerrazine_Init();
    gt_AddtoHeatCap_Init();
    gt_SubtractfromHeatCap_Init();
    gt_HeatCap_Init();
    gt_COATHEATREDUCTION_Init();
    gt_GLOVESBOOTSHEATREDUCTION_Init();
    gt_MaxHeat_Init();
    gt_ApplyColdDepleteVespene_Init();
    gt_AdvanceApplyColdDepleteVespene_Init();
    gt_HardcoreApplyColdDepleteVespene_Init();
    gt_Evade_Init();
    gt_Block_Init();
    gt_Boom_Init();
    gt_PostStunHostility_Init();
    gt_UltraliskRevive_Init();
    gt_Repair_Init();
    gt_ReinforceMax_Init();
    gt_OffspringSpawn_Init();
    gt_SetMasterandBeast_Init();
    gt_TamedBeastEXP_Init();
    gt_Evolve_Init();
    gt_BeastTurn_Init();
    gt_CriticalLyote_Init();
    gt_ScanMineral_Init();
    gt_ScanEmberthorn_Init();
    gt_ScanBanelingDust_Init();
    gt_ScanRelic_Init();
    gt_ScanBone_Init();
    gt_ScanStone_Init();
    gt_ScanCookedMeat_Init();
    gt_ScanVoidCrystal_Init();
    gt_ScanHide_Init();
    gt_ThiefsCloak_Init();
    gt_CunningDisplay_Init();
    gt_Dragoon_Init();
    gt_ChosenElder_Init();
    gt_Cyborg_Init();
    gt_MechaAnnihilator_Init();
    gt_SacredOne_Init();
    gt_Seeker_Init();
    gt_TrueForm_Init();
    gt_TeleGatherer_Init();
    gt_Assassin_Init();
    gt_Trickster_Init();
    gt_AiurChampion_Init();
    gt_Ancient_Init();
    gt_Deathsayer_Init();
    gt_HeraldofDoom_Init();
    gt_SubSpawn_Init();
    gt_WhirlingAxe1Offensive_Init();
    gt_WhirlingAxe2Offensive_Init();
    gt_WhirlingAxe3Offensive_Init();
    gt_ChallengeBattle_Init();
    gt_ChallengeBattle2_Init();
    gt_EpochFist_Init();
    gt_AncientsCall1_Init();
    gt_AncientsCall2_Init();
    gt_AncientFusionSet_Init();
    gt_AncientFusionIncomingDamage_Init();
    gt_AssassinsTouch_Init();
    gt_StealthStrike_Init();
    gt_SmokeCloud_Init();
    gt_SmokeCloud2_Init();
    gt_MarkforBounty_Init();
    gt_MarkforBounty2_Init();
    gt_MarkforBountyRemoveRank1_Init();
    gt_MarkforBountyRemoveRank2_Init();
    gt_Cleanse_Init();
    gt_LightofAiur1_Init();
    gt_LightofAiur2_Init();
    gt_LightofAiur3_Init();
    gt_StoppedCastingVoid_Init();
    gt_StartcastingVoid1_Init();
    gt_StartcastingVoid2_Init();
    gt_AwakenfromVoid1_Init();
    gt_AwakenfromVoid2_Init();
    gt_StaticGraviBomb_Init();
    gt_StaticGraviBombTimedLife_Init();
    gt_StaticGraviBombTimedLife2_Init();
    gt_CyberneticCannon_Init();
    gt_CyberneticUpload_Init();
    gt_EMPBlastReductionCybernetic_Init();
    gt_SystemShockwaveReduction1Cybernetic_Init();
    gt_SystemShockwaveReduction2Cybernetic_Init();
    gt_DeactivateReductionCybernetic_Init();
    gt_Deactivate2ReductionCybernetic_Init();
    gt_TinkeredMax_Init();
    gt_ChaoticBlast1_Init();
    gt_ChaoticBlast2_Init();
    gt_ChaoticBlast3_Init();
    gt_Decimation1_Init();
    gt_Decimation2_Init();
    gt_Decimation3_Init();
    gt_DrainEnergy_Init();
    gt_WaveofDeath1_Init();
    gt_WaveofDeath2_Init();
    gt_AbsorbLife1_Init();
    gt_AbsorbLife2_Init();
    gt_MarkofDeath1_Init();
    gt_MarkofDeath2_Init();
    gt_TurretBuff_Init();
    gt_Snipe1_Init();
    gt_Snipe2_Init();
    gt_Snipe3_Init();
    gt_VoidLegionZergling_Init();
    gt_VoidLegionRoach_Init();
    gt_MechaThrusters_Init();
    gt_MechaThrusters2_Init();
    gt_SelfDestruct5_Init();
    gt_SelfDestruct4_Init();
    gt_SelfDestruct3_Init();
    gt_SelfDestruct2_Init();
    gt_SelfDestruct1_Init();
    gt_SelfDestructPostEffects_Init();
    gt_SelfDestructDamage1_Init();
    gt_SelfDestructDamage2_Init();
    gt_UnstableEnergy1_Init();
    gt_UnstableEnergy2_Init();
    gt_PurgeAlly_Init();
    gt_PurgeEnemy_Init();
    gt_ScanHostileProtoss_Init();
    gt_ScanHostileStructure_Init();
    gt_ScanHostileQuilgor_Init();
    gt_ScanHostileLyote_Init();
    gt_ScanHostileSpinean_Init();
    gt_ScanHostilePanthor_Init();
    gt_ScanHostileTransportShip_Init();
    gt_Replace_Init();
    gt_VengeanceBuff_Init();
    gt_SeekandDestroy_Init();
    gt_Lunge_Init();
    gt_LungeOff_Init();
    gt_KineticGrasp_Init();
    gt_TransmuteMaterial_Init();
    gt_TransmuteHerb_Init();
    gt_TransmuteLesserPotion_Init();
    gt_TransmuteIngot_Init();
    gt_TransmuteArcana_Init();
    gt_TransmuteGold_Init();
    gt_TransmuteGreaterPotion_Init();
    gt_TransmuteDarkMatter_Init();
    gt_TransmuteCorruption_Init();
    gt_RemoveTeleGather_Init();
    gt_TeleGather_Init();
    gt_PsyForagerBeacon_Init();
    gt_ReplaceSpecialBuilding_Init();
    gt_ImportItemsnew_Init();
    gt_ExportItemsnew_Init();
    gt_ExportItemsToTradingPost_Init();
    gt_SummonedIllusionLevel_Init();
    gt_TrickstersVeil_Init();
    gt_IllusiveBlink_Init();
    gt_IllusiveIllusionSet_Init();
    gt_IllusionBehaviors_Init();
    gt_ShadowAssaultSpawn_Init();
    gt_VenomousBite_Init();
    gt_PreyAcquire_Init();
    gt_PreyVenomBite_Init();
    gt_PreyRegularAttack_Init();
    gt_VoidSpawn_Init();
    gt_RawMeatHeroDeath_Init();
    gt_RawMeatCarry_Init();
    gt_HarvestRawMeat_Init();
    gt_DropRawMeat_Init();
    gt_ConsumeRawMeat_Init();
    gt_TricksterDeath_Init();
    gt_CorruptionItemScatter_Init();
    gt_CorruptedGround_Init();
    gt_ExpNo1ItemScatter_Init();
    gt_DropPodArea_Init();
    gt_DropPodSpawn_Init();
    gt_DropPodDeath_Init();
    gt_UltraliskPoisoned_Init();
    gt_UltraliskItemScatter_Init();
    gt_UltraliskResetPosition_Init();
    gt_UltraliskFacingReset_Init();
    gt_UltraliskFacingResetKite_Init();
    gt_BoneMeleeResponse_Init();
    gt_BoneRangeResponse_Init();
    gt_BoneArmor_Init();
    gt_ThrowSpearRockAnimate_Init();
    gt_KarakHideScrap_Init();
    gt_CookedMeat_Init();
    gt_DiseasedMeat_Init();
    gt_Emberthorn_Init();
    gt_Potions_Init();
    gt_MutalingEgg_Init();
    gt_ItemSpawnScatter_Init();
    gt_Bloodsoul_Init();
    gt_ShardofCorruption_Init();
    gt_DarkShadowBeastDeath_Init();
    gt_GatherHerbs_Init();
    gt_PawnItem_Init();
    gt_TargetStructureInventoryFull_Init();
    gt_PouchMovement_Init();
    gt_ItemLimitations_Init();
    gt_ItemStacking_Init();
    gt_ItemintoNeutral_Init();
    gt_Magic_Init();
    gt_RemoveShadowFromGame_Init();
    gt_PotionofDiseaseTarget_Init();
    gt_BagofHorrors_Init();
    gt_KaiserBlade_Init();
    gt_StaffofEternalFlame_Init();
    gt_VisionoftheIsles_Init();
    gt_HerosSkullReplace_Init();
    gt_Nest_Init();
    gt_CureAll_Init();
    gt_ConsumeHeartoftheUltralisk_Init();
    gt_Sonar_Init();
    gt_VoidArtifact_Init();
    gt_FireStoneDeath_Init();
    gt_PODDeath_Init();
    gt_MageFireStoneDeath_Init();
    gt_NexusWarp_Init();
    gt_UpgradeNexus_Init();
    gt_Warp_Init();
    gt_QuickWarp_Init();
    gt_UpgradeWarpPad_Init();
    gt_UpgradeWarpPad2_Init();
    gt_UpgradeWarpPad3_Init();
    gt_UpgradePhotonCannon_Init();
    gt_UpgradePhotonCannon2_Init();
    gt_UpgradePhotonCannon3_Init();
    gt_EMPBlastReduction_Init();
    gt_SystemShockwaveReduction1_Init();
    gt_SystemShockwaveReduction2_Init();
    gt_DeactivateReduction_Init();
    gt_Deactivate2Reduction_Init();
    gt_MindControlReduction_Init();
    gt_MindControl2Reduction_Init();
    gt_MasterCrafter_Init();
    gt_CookMeat_Init();
    gt_EmpowerStrength_Init();
    gt_EmpowerAgility_Init();
    gt_EmpowerIntellect_Init();
    gt_EmpowerMagic_Init();
    gt_EmpowerFortitude_Init();
    gt_GiftofAiur_Init();
    gt_GiftofXelNaga_Init();
    gt_HeroPostNoobDeath_Init();
    gt_HeroPostNoobDeathHardcore_Init();
    gt_LevelGain_Init();
    gt_VoidTowerDeath_Init();
    gt_VoidTowerBuilt_Init();
    gt_VoidTowerComplete_Init();
    gt_CraftItemsButtons_Init();
    gt_VoidTrap_Init();
    gt_BaneIgnotRecipe_Init();
    gt_AiurIgnotRecipe_Init();
    gt_StormBlade_Init();
    gt_DustyBlade_Init();
    gt_SeersDagger_Init();
    gt_SeersBaneDagger_Init();
    gt_SeersAiurDagger_Init();
    gt_StoneBlade_Init();
    gt_BaneBlade_Init();
    gt_AiurBlade_Init();
    gt_Spear_Init();
    gt_Shield_Init();
    gt_BaneShield_Init();
    gt_AiurShield_Init();
    gt_ShieldoftheVoid_Init();
    gt_CraftCorrupted_Init();
    gt_CorruptedArmor_Init();
    gt_CorruptedWeapon_Init();
    gt_CorruptedBoots_Init();
    gt_CorruptedGloves_Init();
    gt_CorruptedBag_Init();
    gt_GlovesofInsanity_Init();
    gt_PhaseCoat_Init();
    gt_HydroBoots_Init();
    gt_AiurBoots_Init();
    gt_AiurGloves_Init();
    gt_AiurCoat_Init();
    gt_BaneBoots_Init();
    gt_BaneCoat_Init();
    gt_BaneGloves_Init();
    gt_KarakSkinBoots_Init();
    gt_KarakSkinGloves_Init();
    gt_KarakSkinCoat_Init();
    gt_UrsadakSkinCoat_Init();
    gt_UrsadakSkinGloves_Init();
    gt_UrsadakSkinBoots_Init();
    gt_LyoteSkinCoat_Init();
    gt_LyoteSkinBoots_Init();
    gt_LyoteSkinGloves_Init();
    gt_BoneGloves_Init();
    gt_BoneCoat_Init();
    gt_BoneBoots_Init();
    gt_BoneShield_Init();
    gt_MultiDimensionalPouch_Init();
    gt_TransportShip_Init();
    gt_PrivateShuttle_Init();
    gt_ZerglingNest_Init();
    gt_WarpPad_Init();
    gt_VespeneFuel_Init();
    gt_EMP_Init();
    gt_SonarCompass_Init();
    gt_VoidCapsule_Init();
    gt_VoidMechanism_Init();
    gt_Combine_Init();
    gt_FusePotionofDisease_Init();
    gt_FuseEnergyStimI_Init();
    gt_FuseEnergyStimII_Init();
    gt_FuseEnergyStimIII_Init();
    gt_FuseREALVISION_Init();
    gt_FuseAnabolicPotion_Init();
    gt_FusePotionofKnowledge_Init();
    gt_FuseHealingStimI_Init();
    gt_FuseHealingStimII_Init();
    gt_FuseHealingStimIII_Init();
    gt_FuseCureAll_Init();
    gt_FuseSpiritOfWind_Init();
    gt_FuseSpiritOfWater_Init();
    gt_Warpstone_Init();
    gt_EncryptionSearingBolt_Init();
    gt_EncryptionAncientArmor_Init();
    gt_EncryptionBlink_Init();
    gt_EncryptionPsiShield_Init();
    gt_EncryptionCyclonicGrasp_Init();
    gt_EncryptionEnergyDisruptionFIX_Init();
    gt_Poison_Init();
    gt_BoneNecklace_Init();
    gt_UltraPoison_Init();
    gt_PoisonSpear_Init();
    gt_RefinedPoisonSpear_Init();
    gt_UltraPoisonSpear_Init();
    gt_MageFire_Init();
    gt_MagicSeed_Init();
    gt_ImbuedRelic_Init();
    gt_VoidTower_Init();
    gt_CraftVoidArtifact_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
